"use strict";require("core-js/modules/es.array.iterator");Object.defineProperty(exports,"__esModule",{value:true});exports.getExampleTesting=exports.applyTesting=void 0;var _jestValidate=require("jest-validate");

var _runners=require("./runners.js");


const applyTesting=function({opts,opts:{level,testing}}){
if(testing===undefined){
return opts;
}

const testOpts=_runners.RUNNERS[testing];

validateTesting({testOpts,testing});
validateTestOpts({opts,testOpts,testing});

return{
...opts,
...testOpts,

level:{default:"error",...level,...testOpts.level}};

};exports.applyTesting=applyTesting;

const validateTesting=function({testOpts,testing}){
if(testOpts!==undefined){
return;
}

const runners=Object.keys(_runners.RUNNERS).join(", ");
throw new Error(
`Invalid option 'testing' '${testing}': must be one of ${runners}`);

};



const validateTestOpts=function({opts,testOpts,testing}){
const forbiddenOpts=Object.keys(testOpts).filter(isForbiddenOpt);

const invalidOpt=Object.keys(opts).find((optName)=>
forbiddenOpts.includes(optName));


if(invalidOpt===undefined){
return;
}

throw new Error(
`Invalid option '${invalidOpt}': it must not be defined together with the option 'testing' '${testing}'`);

};


const isForbiddenOpt=function(optName){
return!ALLOWED_OPTS.includes(optName);
};

const ALLOWED_OPTS=["level"];


const getExampleTesting=function(){
return(0,_jestValidate.multipleValidOptions)(...Object.keys(_runners.RUNNERS));
};exports.getExampleTesting=getExampleTesting;
//# sourceMappingURL=testing.js.map