{"version":3,"sources":["../../../src/options/runners.js"],"names":["throwUncaughtException","error","tapeFailingTest","tape","require","test","message","t","plan","COMMON_OPTIONS","log","colors","exitOn","level","uncaughtException","unhandledRejection","RUNNERS","ava","mocha","jasmine"],"mappings":"6FAAA;;;;AAIA,KAAMA,CAAAA,sBAAsB,CAAG,SAASC,KAAT,CAAgB;AAC7C,sBAAS,IAAM;AACb,KAAMA,CAAAA,KAAN;AACD,CAFD;AAGD,CAJD;;;;AAQA,KAAMC,CAAAA,eAAe,CAAG,SAASD,KAAT,CAAgB;;;;AAItC,KAAME,CAAAA,IAAI,CAAGC,OAAO,CAAC,MAAD,CAApB;AACAD,IAAI,CAACE,IAAL,CAAUJ,KAAK,CAACK,OAAhB,CAAyBC,CAAC,EAAI;AAC5BA,CAAC,CAACC,IAAF,CAAO,CAAP;AACAD,CAAC,CAACN,KAAF,CAAQA,KAAR;AACD,CAHD;AAID,CATD;;;AAYA,KAAMQ,CAAAA,cAAc,CAAG;AACrBC,GAAG,CAAEV,sBADgB;;AAGrBW,MAAM,CAAE,KAHa;;AAKrBC,MAAM,CAAE,EALa;;;AAQrBC,KAAK,CAAE,CAAEC,iBAAiB,CAAE,QAArB,CAA+BC,kBAAkB,CAAE,QAAnD,CARc,CAAvB;;;AAWO,KAAMC,CAAAA,OAAO,CAAG;AACrBC,GAAG,CAAER,cADgB;;AAGrBS,KAAK,CAAE,CAAE,GAAGT,cAAL,CAAqBI,KAAK,CAAE,CAAEC,iBAAiB,CAAE,QAArB,CAA5B,CAHc;AAIrBK,OAAO,CAAEV,cAJY;;AAMrBN,IAAI,CAAE,CAAE,GAAGM,cAAL,CAAqBI,KAAK,CAAE,EAA5B,CAAgCH,GAAG,CAAER,eAArC,CANe;AAOrB,WAAYO,cAPS,CAAhB,C","sourcesContent":["import { nextTick } from 'process'\n\n// Make `opts.log()` propagate an `uncaughtException` so that test runner\n// reports the original process error as a test failure.\nconst throwUncaughtException = function(error) {\n  nextTick(() => {\n    throw error\n  })\n}\n\n// `tape` does not handle `uncaughtExceptions`. We create a new failing test\n// to do it instead.\nconst tapeFailingTest = function(error) {\n  // This is an optional peerDependency. `package.json` does not support those.\n  // TODO: replace with `import()` once it is supported by default by ESLint\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n  const tape = require('tape')\n  tape.test(error.message, t => {\n    t.plan(1)\n    t.error(error)\n  })\n}\n\n// Options common to most runners\nconst COMMON_OPTIONS = {\n  log: throwUncaughtException,\n  // Most runners do their own colorization\n  colors: false,\n  // Other tests should keep running\n  exitOn: [],\n  // All runners need to report `uncaughtException` for\n  // `throwUncaughtException()` to work. Most also report `unhandledRejection`.\n  level: { uncaughtException: 'silent', unhandledRejection: 'silent' },\n}\n\nexport const RUNNERS = {\n  ava: COMMON_OPTIONS,\n  // Mocha does not report `unhandledRejection`\n  mocha: { ...COMMON_OPTIONS, level: { uncaughtException: 'silent' } },\n  jasmine: COMMON_OPTIONS,\n  // Tape does not report `uncaughtException` nor `unhandledRejection`\n  tape: { ...COMMON_OPTIONS, level: {}, log: tapeFailingTest },\n  'node-tap': COMMON_OPTIONS,\n}\n"],"file":"src/options/runners.js"}