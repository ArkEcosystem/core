{"version":3,"sources":["../../src/main.js"],"names":["logProcessErrors","opts","optsA","listeners","addListeners","stopLogProcessErrors","stopLogging","Object","entries","EVENTS","map","name","eventFunc","addListener","previousEvents","Set","mEmitLimitedWarning","emitLimitedWarning","eventListener","bind","process","on","forEach","removeListener","module","exports"],"mappings":"0DAAA;;AAEA;;AAEA;AACA;AACA;;AAEA,gE;;;AAGA,KAAMA,CAAAA,gBAAgB,CAAG,SAASC,IAAT,CAAe;AACtC,KAAMC,CAAAA,KAAK,CAAG,qBAAW,CAAED,IAAF,CAAX,CAAd;;AAEA;;AAEA,KAAME,CAAAA,SAAS,CAAGC,YAAY,CAAC,CAAEH,IAAI,CAAEC,KAAR,CAAD,CAA9B;;;AAGA,KAAMG,CAAAA,oBAAoB,CAAG,IAAMC,WAAW,CAACH,SAAD,CAA9C;AACA,MAAOE,CAAAA,oBAAP;AACD,CAVD;;AAYA,KAAMD,CAAAA,YAAY,CAAG,SAAS,CAAEH,IAAF,CAAT,CAAmB;AACtC,MAAOM,CAAAA,MAAM,CAACC,OAAP,CAAeC,MAAf,EAAuBC,GAAvB,CAA2B,CAAC,CAACC,IAAD,CAAOC,SAAP,CAAD;AAChCC,WAAW,CAAC,CAAEZ,IAAF,CAAQU,IAAR,CAAcC,SAAd,CAAD,CADN,CAAP;;AAGD,CAJD;;AAMA,KAAMC,CAAAA,WAAW,CAAG,SAAS,CAAEZ,IAAF,CAAQU,IAAR,CAAcC,SAAd,CAAT,CAAoC;;;;;AAKtD,KAAME,CAAAA,cAAc,CAAG,GAAIC,CAAAA,GAA3B;;AAEA,KAAMC,CAAAA,mBAAmB,CAAG,mBAAMC,yBAAN,CAA5B;;AAEA,KAAMC,CAAAA,aAAa,CAAGN,SAAS,CAACO,IAAV,CAAe,IAAf,CAAqB;AACzClB,IADyC;AAEzCU,IAFyC;AAGzCG,cAHyC;AAIzCE,mBAJyC,CAArB,CAAtB;;AAMAI,iBAAQC,EAAR,CAAWV,IAAX,CAAiBO,aAAjB;;AAEA,MAAO,CAAEA,aAAF,CAAiBP,IAAjB,CAAP;AACD,CAlBD;;;AAqBA,KAAML,CAAAA,WAAW,CAAG,SAASH,SAAT,CAAoB;AACtCA,SAAS,CAACmB,OAAV,CAAkBC,cAAlB;AACA;AACD,CAHD;;AAKA,KAAMA,CAAAA,cAAc,CAAG,SAAS,CAAEL,aAAF,CAAiBP,IAAjB,CAAT,CAAkC;;;AAGvDS,iBAAQG,cAAR,CAAuBZ,IAAvB,CAA6BO,aAA7B;AACD,CAJD;;;;AAQAM,MAAM,CAACC,OAAP,CAAiBzB,gBAAjB","sourcesContent":["import process from 'process'\n\nimport moize from 'moize'\n\nimport { getOptions } from './options/main.js'\nimport { removeWarningListener, restoreWarningListener } from './warnings.js'\nimport { emitLimitedWarning } from './limit.js'\n// eslint-disable-next-line import/no-namespace\nimport * as EVENTS from './handle/main.js'\n\n// Add event handling for all process-related errors\nconst logProcessErrors = function(opts) {\n  const optsA = getOptions({ opts })\n\n  removeWarningListener()\n\n  const listeners = addListeners({ opts: optsA })\n\n  // Do not use `function.bind()` to keep the right `function.name`\n  const stopLogProcessErrors = () => stopLogging(listeners)\n  return stopLogProcessErrors\n}\n\nconst addListeners = function({ opts }) {\n  return Object.entries(EVENTS).map(([name, eventFunc]) =>\n    addListener({ opts, name, eventFunc }),\n  )\n}\n\nconst addListener = function({ opts, name, eventFunc }) {\n  // `previousEvents` is event-name-specific so that if events of a given event\n  // stopped being emitted, others still are.\n  // `previousEvents` can take up some memory, but it should be cleaned up\n  // by `removeListener()`, i.e. once `eventListener` is garbage collected.\n  const previousEvents = new Set()\n  // Should only emit the warning once per event name and per `init()`\n  const mEmitLimitedWarning = moize(emitLimitedWarning)\n\n  const eventListener = eventFunc.bind(null, {\n    opts,\n    name,\n    previousEvents,\n    mEmitLimitedWarning,\n  })\n  process.on(name, eventListener)\n\n  return { eventListener, name }\n}\n\n// Remove all event handlers and restore previous `warning` listeners\nconst stopLogging = function(listeners) {\n  listeners.forEach(removeListener)\n  restoreWarningListener()\n}\n\nconst removeListener = function({ eventListener, name }) {\n  // TODO: use `process.off()` instead of `process.removeListener()`\n  // after dropping Node.js <10 support\n  process.removeListener(name, eventListener)\n}\n\n// We do not use `export default` because Babel transpiles it in a way that\n// requires CommonJS users to `require(...).default` instead of `require(...)`.\nmodule.exports = logProcessErrors\n"],"file":"src/main.js"}