"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.getMessage=void 0;var _util=require("util");


const getMessage=function({event,name}){
return MESSAGES[name](event);
};exports.getMessage=getMessage;

const uncaughtException=function({value}){
return`an exception was thrown but not caught: ${serialize(value)}`;
};

const warning=function({value,value:{code,detail}}){
return`${serialize(value)}${getWarningDetails({code,detail})}`;
};

const getWarningDetails=function({code,detail=""}){
if(code!==undefined){
return`\n[${code}] ${detail}`;
}

if(detail!==""){
return`\n${detail}`;
}

return"";
};

const unhandledRejection=function({value}){
return`a promise was rejected but not handled: ${serialize(value)}`;
};

const rejectionHandled=function({value}){
return`a promise was rejected and handled too late: ${serialize(value)}`;
};



const multipleResolves=function({
rejected,
value,
nextRejected,
nextValue})
{
const rejectedStr=REJECTED_NAME[rejected];
const nextRejectedStr=REJECTED_NAME[nextRejected];
const again=rejected===nextRejected?" again":"";
const state=again?rejectedStr:"resolved/rejected";

return`a promise was ${state} multiple times:
Initially ${rejectedStr} with: ${serialize(value)}
Then ${nextRejectedStr}${again} with: ${serialize(nextValue)}`;
};

const REJECTED_NAME={
true:"rejected",
false:"resolved"};


const MESSAGES={
uncaughtException,
warning,
unhandledRejection,
rejectionHandled,
multipleResolves};




const serialize=function(value){

if(value instanceof Error){
return String(value);
}

return(0,_util.inspect)(value,INSPECT_OPTS);
};

const INSPECT_OPTS={getters:true};
//# sourceMappingURL=message.js.map