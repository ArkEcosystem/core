{"version":3,"sources":["../../../src/error/message.js"],"names":["getMessage","event","name","MESSAGES","uncaughtException","value","serialize","warning","code","detail","getWarningDetails","undefined","unhandledRejection","rejectionHandled","multipleResolves","rejected","nextRejected","nextValue","rejectedStr","REJECTED_NAME","nextRejectedStr","again","state","true","false","Error","String","INSPECT_OPTS","getters"],"mappings":"gGAAA;;;AAGO,KAAMA,CAAAA,UAAU,CAAG,SAAS,CAAEC,KAAF,CAASC,IAAT,CAAT,CAA0B;AAClD,MAAOC,CAAAA,QAAQ,CAACD,IAAD,CAAR,CAAeD,KAAf,CAAP;AACD,CAFM,C;;AAIP,KAAMG,CAAAA,iBAAiB,CAAG,SAAS,CAAEC,KAAF,CAAT,CAAoB;AAC5C,MAAQ,2CAA0CC,SAAS,CAACD,KAAD,CAAQ,EAAnE;AACD,CAFD;;AAIA,KAAME,CAAAA,OAAO,CAAG,SAAS,CAAEF,KAAF,CAASA,KAAK,CAAE,CAAEG,IAAF,CAAQC,MAAR,CAAhB,CAAT,CAA6C;AAC3D,MAAQ,GAAEH,SAAS,CAACD,KAAD,CAAQ,GAAEK,iBAAiB,CAAC,CAAEF,IAAF,CAAQC,MAAR,CAAD,CAAmB,EAAjE;AACD,CAFD;;AAIA,KAAMC,CAAAA,iBAAiB,CAAG,SAAS,CAAEF,IAAF,CAAQC,MAAM,CAAG,EAAjB,CAAT,CAAgC;AACxD,GAAID,IAAI,GAAKG,SAAb,CAAwB;AACtB,MAAQ,MAAKH,IAAK,KAAIC,MAAO,EAA7B;AACD;;AAED,GAAIA,MAAM,GAAK,EAAf,CAAmB;AACjB,MAAQ,KAAIA,MAAO,EAAnB;AACD;;AAED,MAAO,EAAP;AACD,CAVD;;AAYA,KAAMG,CAAAA,kBAAkB,CAAG,SAAS,CAAEP,KAAF,CAAT,CAAoB;AAC7C,MAAQ,2CAA0CC,SAAS,CAACD,KAAD,CAAQ,EAAnE;AACD,CAFD;;AAIA,KAAMQ,CAAAA,gBAAgB,CAAG,SAAS,CAAER,KAAF,CAAT,CAAoB;AAC3C,MAAQ,gDAA+CC,SAAS,CAACD,KAAD,CAAQ,EAAxE;AACD,CAFD;;;;AAMA,KAAMS,CAAAA,gBAAgB,CAAG,SAAS;AAChCC,QADgC;AAEhCV,KAFgC;AAGhCW,YAHgC;AAIhCC,SAJgC,CAAT;AAKtB;AACD,KAAMC,CAAAA,WAAW,CAAGC,aAAa,CAACJ,QAAD,CAAjC;AACA,KAAMK,CAAAA,eAAe,CAAGD,aAAa,CAACH,YAAD,CAArC;AACA,KAAMK,CAAAA,KAAK,CAAGN,QAAQ,GAAKC,YAAb,CAA4B,QAA5B,CAAuC,EAArD;AACA,KAAMM,CAAAA,KAAK,CAAGD,KAAK,CAAGH,WAAH,CAAiB,mBAApC;;AAEA,MAAQ,iBAAgBI,KAAM;YACpBJ,WAAY,UAASZ,SAAS,CAACD,KAAD,CAAQ;OAC3Ce,eAAgB,GAAEC,KAAM,UAASf,SAAS,CAACW,SAAD,CAAY,EAF3D;AAGD,CAdD;;AAgBA,KAAME,CAAAA,aAAa,CAAG;AACpBI,IAAI,CAAE,UADc;AAEpBC,KAAK,CAAE,UAFa,CAAtB;;;AAKA,KAAMrB,CAAAA,QAAQ,CAAG;AACfC,iBADe;AAEfG,OAFe;AAGfK,kBAHe;AAIfC,gBAJe;AAKfC,gBALe,CAAjB;;;;;AAUA,KAAMR,CAAAA,SAAS,CAAG,SAASD,KAAT,CAAgB;;AAEhC,GAAIA,KAAK,WAAYoB,CAAAA,KAArB,CAA4B;AAC1B,MAAOC,CAAAA,MAAM,CAACrB,KAAD,CAAb;AACD;;AAED,MAAO,kBAAQA,KAAR,CAAesB,YAAf,CAAP;AACD,CAPD;;AASA,KAAMA,CAAAA,YAAY,CAAG,CAAEC,OAAO,CAAE,IAAX,CAArB","sourcesContent":["import { inspect } from 'util'\n\n// Retrieve the `error.message` using the `event` information\nexport const getMessage = function({ event, name }) {\n  return MESSAGES[name](event)\n}\n\nconst uncaughtException = function({ value }) {\n  return `an exception was thrown but not caught: ${serialize(value)}`\n}\n\nconst warning = function({ value, value: { code, detail } }) {\n  return `${serialize(value)}${getWarningDetails({ code, detail })}`\n}\n\nconst getWarningDetails = function({ code, detail = '' }) {\n  if (code !== undefined) {\n    return `\\n[${code}] ${detail}`\n  }\n\n  if (detail !== '') {\n    return `\\n${detail}`\n  }\n\n  return ''\n}\n\nconst unhandledRejection = function({ value }) {\n  return `a promise was rejected but not handled: ${serialize(value)}`\n}\n\nconst rejectionHandled = function({ value }) {\n  return `a promise was rejected and handled too late: ${serialize(value)}`\n}\n\n// The default level is `event` because it does not always indicate an error:\n// https://github.com/nodejs/node/issues/24321\nconst multipleResolves = function({\n  rejected,\n  value,\n  nextRejected,\n  nextValue,\n}) {\n  const rejectedStr = REJECTED_NAME[rejected]\n  const nextRejectedStr = REJECTED_NAME[nextRejected]\n  const again = rejected === nextRejected ? ' again' : ''\n  const state = again ? rejectedStr : 'resolved/rejected'\n\n  return `a promise was ${state} multiple times:\nInitially ${rejectedStr} with: ${serialize(value)}\nThen ${nextRejectedStr}${again} with: ${serialize(nextValue)}`\n}\n\nconst REJECTED_NAME = {\n  true: 'rejected',\n  false: 'resolved',\n}\n\nconst MESSAGES = {\n  uncaughtException,\n  warning,\n  unhandledRejection,\n  rejectionHandled,\n  multipleResolves,\n}\n\n// We use `util.inspect()` instead of `JSON.stringify()` or a third-party\n// library because it has nice output.\nconst serialize = function(value) {\n  // Do not print `Error.stack`, but print `Error.name` + `Error.message`\n  if (value instanceof Error) {\n    return String(value)\n  }\n\n  return inspect(value, INSPECT_OPTS)\n}\n\nconst INSPECT_OPTS = { getters: true }\n"],"file":"src/error/message.js"}