{"version":3,"sources":["../../src/exit.js"],"names":["exitProcess","name","opts","exitOn","includes","setTimeout","process","exit","EXIT_STATUS","EXIT_TIMEOUT","validateExitOn","undefined","invalidEvents","filter","EVENTS","length","Error","join"],"mappings":";AACA,wD;;;;;;;;;;;;;;;;;;;;AAoBO,KAAMA,CAAAA,WAAW,CAAG,SAAS,CAAEC,IAAF,CAAQC,IAAI,CAAE,CAAEC,MAAF,CAAd,CAAT,CAAqC;AAC9D,GAAI,CAACA,MAAM,CAACC,QAAP,CAAgBH,IAAhB,CAAL,CAA4B;AAC1B;AACD;;;;AAIDI,UAAU,CAAC,IAAM;;AAEfC,iBAAQC,IAAR,CAAaC,WAAb;AACD,CAHS,CAGPC,YAHO,CAAV;AAID,CAXM,C;;AAaA,KAAMA,CAAAA,YAAY,CAAG,IAArB,C;AACA,KAAMD,CAAAA,WAAW,CAAG,CAApB,C;;AAEA,KAAME,CAAAA,cAAc,CAAG,SAAS,CAAEP,MAAF,CAAT,CAAqB;AACjD,GAAIA,MAAM,GAAKQ,SAAf,CAA0B;AACxB;AACD;;AAED,KAAMC,CAAAA,aAAa,CAAGT,MAAM,CAACU,MAAP,CAAcZ,IAAI,EAAI,CAACa,MAAM,CAACV,QAAP,CAAgBH,IAAhB,CAAvB,CAAtB;;AAEA,GAAIW,aAAa,CAACG,MAAd,GAAyB,CAA7B,CAAgC;AAC9B;AACD;;AAED,KAAM,IAAIC,CAAAA,KAAJ;AACH,4BAA2BJ,aAAa,CAACK,IAAd;AAC1B,IAD0B;AAE1B,qBAAoBH,MAAM,CAACG,IAAP,CAAY,IAAZ,CAAkB,EAHpC,CAAN;;AAKD,CAhBM,C;;AAkBP,KAAMH,CAAAA,MAAM,CAAG;AACb,mBADa;AAEb,oBAFa;AAGb,kBAHa;AAIb,kBAJa;AAKb,SALa,CAAf","sourcesContent":["// Do not destructure so tests can stub it\nimport process from 'process'\n\n// Exit process according to `opts.exitOn` (default: ['uncaughtException']):\n//  - `uncaughtException`: default behavior of Node.js and recommended by\n//     https://nodejs.org/api/process.html#process_warning_using_uncaughtexception_correctly\n//  - `unhandledRejection`: possible future behavior and recommended by Node.js.\n//    See https://nodejs.org/dist/latest-v8.x/docs/api/deprecations.html#deprecations_dep0018_unhandled_promise_rejections\n// By default `unhandledRejection` is opt-in so that using this library does not\n// decrease stability (if the application does not restart on exit).\n// `process.exit()` unfortunately aborts any current async operations and\n// streams are not flushed (including stdout/stderr):\n//  - https://github.com/nodejs/node/issues/784\n//  - https://github.com/nodejs/node/issues/6456\n// We go around this problem by:\n//  - await promise returned by `opts.log()`\n//  - waiting for few seconds (EXIT_TIMEOUT)\n// This last one is a hack. We should instead allow `opts.log()` to return a\n// stream, and keep track of all unique returned streams. On exit, we should\n// then close them and wait for them to flush. We should then always wait for\n// process.stdout|stderr as well.\nexport const exitProcess = function({ name, opts: { exitOn } }) {\n  if (!exitOn.includes(name)) {\n    return\n  }\n\n  // TODO: use `promisify` instead after\n  // https://github.com/sinonjs/lolex/issues/223 is fixed\n  setTimeout(() => {\n    // eslint-disable-next-line unicorn/no-process-exit, no-process-exit\n    process.exit(EXIT_STATUS)\n  }, EXIT_TIMEOUT)\n}\n\nexport const EXIT_TIMEOUT = 3000\nexport const EXIT_STATUS = 1\n\nexport const validateExitOn = function({ exitOn }) {\n  if (exitOn === undefined) {\n    return\n  }\n\n  const invalidEvents = exitOn.filter(name => !EVENTS.includes(name))\n\n  if (invalidEvents.length === 0) {\n    return\n  }\n\n  throw new Error(\n    `Invalid option 'exitOn' '${invalidEvents.join(\n      ', ',\n    )}': must be one of ${EVENTS.join(', ')}`,\n  )\n}\n\nconst EVENTS = [\n  'uncaughtException',\n  'unhandledRejection',\n  'rejectionHandled',\n  'multipleResolves',\n  'warning',\n]\n"],"file":"src/exit.js"}