{"version":3,"sources":["../../src/limit.js"],"names":["isLimited","previousEvents","mEmitLimitedWarning","name","value","isLimitedWarning","isLimitedEvent","length","MAX_EVENTS","emitLimitedWarning","ERROR_MESSAGE","ERROR_NAME","ERROR_CODE","code"],"mappings":"0LAAA;;;;;;;;;;;;;AAaO,KAAMA,CAAAA,SAAS,CAAG,SAAS;AAChCC,cADgC;AAEhCC,mBAFgC;AAGhCC,IAHgC;AAIhCC,KAJgC,CAAT;AAKtB;AACD,GAAIC,gBAAgB,CAAC,CAAEF,IAAF,CAAQC,KAAR,CAAD,CAApB,CAAuC;AACrC,MAAO,MAAP;AACD;;AAED,KAAME,CAAAA,cAAc,CAAG,CAAC,GAAGL,cAAJ,EAAoBM,MAApB,EAA8BC,UAArD;;AAEA,GAAIF,cAAJ,CAAoB;AAClBJ,mBAAmB,CAACC,IAAD,CAAnB;AACD;;AAED,MAAOG,CAAAA,cAAP;AACD,CAjBM,C;;;AAoBA,KAAMG,CAAAA,kBAAkB,CAAG,SAASN,IAAT,CAAe;AAC/C,yBAAYO,aAAa,CAACP,IAAD,CAAzB,CAAiCQ,UAAjC,CAA6CC,UAA7C;AACD,CAFM,C;;;AAKP,KAAMP,CAAAA,gBAAgB,CAAG,SAAS,CAAEF,IAAF,CAAQC,KAAK,CAAG,EAAhB,CAAT,CAA+B;AACtD;AACED,IAAI,GAAK,SAAT,EAAsBC,KAAK,CAACD,IAAN,GAAeQ,UAArC,EAAmDP,KAAK,CAACS,IAAN,GAAeD,UADpE;;AAGD,CAJD;;AAMA,KAAMF,CAAAA,aAAa,CAAG,CAAAP,IAAI;AACvB,wBAAuBK,UAAW,KAAIL,IAAK,8BAD9C;AAEA,KAAMQ,CAAAA,UAAU,CAAG,kBAAnB;AACA,KAAMC,CAAAA,UAAU,CAAG,eAAnB;;AAEO,KAAMJ,CAAAA,UAAU,CAAG,GAAnB,C","sourcesContent":["import { emitWarning } from 'process'\n\n// We only allow 100 events (per `event.name`) for the global process because:\n//  - process errors are exceptional and if more than 100 happen, this is\n//    probably due to some infinite recursion.\n//  - the `repeated` logic should prevent reaching the threshold\n//  - `previousEvents` might otherwise take too much memory and/or create a\n//    memory leak.\n//  - it prevents infinite recursions if `opts.log|level()` triggers itself an\n//    event.\n//    The `repeated` logic should prevent it most of the times, but it can still\n//    happen when `[next]Value` is not an `Error` instance and contain dynamic\n//    content.\nexport const isLimited = function({\n  previousEvents,\n  mEmitLimitedWarning,\n  name,\n  value,\n}) {\n  if (isLimitedWarning({ name, value })) {\n    return false\n  }\n\n  const isLimitedEvent = [...previousEvents].length >= MAX_EVENTS\n\n  if (isLimitedEvent) {\n    mEmitLimitedWarning(name)\n  }\n\n  return isLimitedEvent\n}\n\n// Notify that limit has been reached with a `warning` event\nexport const emitLimitedWarning = function(name) {\n  emitWarning(ERROR_MESSAGE(name), ERROR_NAME, ERROR_CODE)\n}\n\n// The `warning` itself should not be skipped\nconst isLimitedWarning = function({ name, value = {} }) {\n  return (\n    name === 'warning' && value.name === ERROR_NAME && value.code === ERROR_CODE\n  )\n}\n\nconst ERROR_MESSAGE = name =>\n  `Cannot log more than ${MAX_EVENTS} '${name}' until process is restarted`\nconst ERROR_NAME = 'LogProcessErrors'\nconst ERROR_CODE = 'TooManyErrors'\n\nexport const MAX_EVENTS = 100\n"],"file":"src/limit.js"}