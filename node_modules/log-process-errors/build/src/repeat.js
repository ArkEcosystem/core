"use strict";require("core-js/modules/es.array.iterator");Object.defineProperty(exports,"__esModule",{value:true});exports.isRepeated=void 0;var _util=require("util");








const isRepeated=function({event,previousEvents}){
const fingerprint=getFingerprint({event});

const isRepeatedEvent=previousEvents.has(fingerprint);

if(!isRepeatedEvent){
previousEvents.add(fingerprint);
}

return isRepeatedEvent;
};exports.isRepeated=isRepeated;


const getFingerprint=function({event}){
const entries=EVENT_PROPS.map((propName)=>
serializeEntry({event,propName}));

const eventA=Object.assign({},...entries);

const fingerprint=JSON.stringify(eventA);





const fingerprintA=fingerprint.slice(0,FINGERPRINT_MAX_LENGTH);
return fingerprintA;
};




const EVENT_PROPS=["nextRejected","rejected","nextValue","value"];

const FINGERPRINT_MAX_LENGTH=1e4;

const serializeEntry=function({event,propName}){
const value=event[propName];

if(value===undefined){
return;
}

const valueA=serializeValue({value});
return{[propName]:valueA};
};

const serializeValue=function({value}){
if(value instanceof Error){
return serializeError(value);
}

return stableSerialize(value);
};





const serializeError=function({name,stack}){
const stackA=filterErrorStack({stack});
return`${name}\n${stackA}`;
};

const filterErrorStack=function({stack}){
return stack.
split("\n").
filter(line=>STACK_TRACE_LINE_REGEXP.test(line)).
slice(0,STACK_TRACE_MAX_LENGTH).
join("\n");
};

const STACK_TRACE_LINE_REGEXP=/^[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+at /u;
const STACK_TRACE_MAX_LENGTH=10;











const stableSerialize=function(value){
return(0,_util.inspect)(value,INSPECT_OPTS);
};

const INSPECT_OPTS={getters:true,sorted:true};
//# sourceMappingURL=repeat.js.map