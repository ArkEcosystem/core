{"version":3,"sources":["../../../src/handle/event.js"],"names":["getEvent","name","promise","value","nextRejected","nextValue","rejected","valueA","parsePromise","event","eventA","eventVal","undefined","NO_PROMISE_EVENTS","includes","getPromiseValue","error"],"mappings":"oIAAA;;;AAGO,KAAMA,CAAAA,QAAQ,CAAG,eAAe;AACrCC,IADqC;AAErCC,OAFqC;AAGrCC,KAHqC;AAIrCC,YAJqC;AAKrCC,SALqC,CAAf;AAMrB;AACD,KAAM,CAAEC,QAAF,CAAYH,KAAK,CAAEI,MAAnB,EAA8B,KAAMC,CAAAA,YAAY,CAAC;AACrDP,IADqD;AAErDC,OAFqD;AAGrDC,KAHqD,CAAD,CAAtD;;;AAMA,KAAMM,CAAAA,KAAK,CAAG,CAAEH,QAAF,CAAYH,KAAK,CAAEI,MAAnB,CAA2BH,YAA3B,CAAyCC,SAAzC,CAAd;;AAEA,KAAMK,CAAAA,MAAM,CAAG,kBAAOD,KAAP,CAAcE,QAAQ,EAAIA,QAAQ,GAAKC,SAAvC,CAAf;AACA,MAAOF,CAAAA,MAAP;AACD,CAjBM,C;;;AAoBP,KAAMF,CAAAA,YAAY,CAAG,eAAe,CAAEP,IAAF,CAAQC,OAAR,CAAiBC,KAAjB,CAAf,CAAyC;AAC5D,GAAIU,iBAAiB,CAACC,QAAlB,CAA2Bb,IAA3B,CAAJ,CAAsC;AACpC,MAAO,CAAEE,KAAF,CAAP;AACD;;AAED,KAAM,CAAEG,QAAF,CAAYH,KAAK,CAAEI,MAAnB,EAA8B,KAAMQ,CAAAA,eAAe,CAAC,CAAEb,OAAF,CAAD,CAAzD;;;AAGA,GAAID,IAAI,GAAK,kBAAb,CAAiC;AAC/B,MAAO,CAAEE,KAAK,CAAEI,MAAT,CAAP;AACD;;AAED,MAAO,CAAED,QAAF,CAAYH,KAAK,CAAEI,MAAnB,CAAP;AACD,CAbD;;;;;;;AAoBA,KAAMM,CAAAA,iBAAiB,CAAG,CAAC,mBAAD,CAAsB,SAAtB,CAAiC,oBAAjC,CAA1B;;;AAGA,KAAME,CAAAA,eAAe,CAAG,eAAe,CAAEb,OAAF,CAAf,CAA4B;AAClD,GAAI;AACF,MAAO,CAAEI,QAAQ,CAAE,KAAZ,CAAmBH,KAAK,CAAE,KAAMD,CAAAA,OAAhC,CAAP;AACD,CAAC,MAAOc,KAAP,CAAc;AACd,MAAO,CAAEV,QAAQ,CAAE,IAAZ,CAAkBH,KAAK,CAAEa,KAAzB,CAAP;AACD;AACF,CAND","sourcesContent":["import { pickBy } from '../utils.js'\n\n// Retrieve `event` object representing the current event information\nexport const getEvent = async function({\n  name,\n  promise,\n  value,\n  nextRejected,\n  nextValue,\n}) {\n  const { rejected, value: valueA } = await parsePromise({\n    name,\n    promise,\n    value,\n  })\n\n  const event = { rejected, value: valueA, nextRejected, nextValue }\n\n  const eventA = pickBy(event, eventVal => eventVal !== undefined)\n  return eventA\n}\n\n// Retrieve promise's resolved/rejected state and value.\nconst parsePromise = async function({ name, promise, value }) {\n  if (NO_PROMISE_EVENTS.includes(name)) {\n    return { value }\n  }\n\n  const { rejected, value: valueA } = await getPromiseValue({ promise })\n\n  // `rejected` is always `true` with `rejectionHandled`, so we skip it\n  if (name === 'rejectionHandled') {\n    return { value: valueA }\n  }\n\n  return { rejected, value: valueA }\n}\n\n// Those events do not try to get the promise value.\n// For `uncaughtException` and `warning`, they are not promise-specific.\n// For `unhandledRejection`:\n//  - we already know `rejected` and `value`\n//  - using `try/catch` will fire `rejectionHandled`\nconst NO_PROMISE_EVENTS = ['uncaughtException', 'warning', 'unhandledRejection']\n\n// `rejectionHandled` and `multipleResolves` otherwise use `await promise`\nconst getPromiseValue = async function({ promise }) {\n  try {\n    return { rejected: false, value: await promise }\n  } catch (error) {\n    return { rejected: true, value: error }\n  }\n}\n"],"file":"src/handle/event.js"}