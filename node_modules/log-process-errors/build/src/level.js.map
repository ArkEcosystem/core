{"version":3,"sources":["../../src/level.js"],"names":["getLevel","opts","name","error","level","undefined","DEFAULT_LEVEL","LEVELS","includes","join","applyDefaultLevels","default","defaultLevel","levelA","value","defaultLevels","getExampleLevels","getExampleLevel","validateLevels","Object","entries","forEach","validateLevel","isValidLevel","Error","uncaughtException","warning","unhandledRejection","rejectionHandled","multipleResolves"],"mappings":"4OAAA;;AAEA;;AAEA;;;AAGO,KAAMA,CAAAA,QAAQ,CAAG,SAAS,CAAEC,IAAF,CAAQC,IAAR,CAAcC,KAAd,CAAT,CAAgC;AACtD,KAAMC,CAAAA,KAAK,CAAG,kBAAOH,IAAI,CAACG,KAAL,CAAWF,IAAX,CAAP,CAAyBC,KAAzB,CAAd;;AAEA,GAAIC,KAAK,GAAK,SAAV,EAAuBA,KAAK,GAAKC,SAArC,CAAgD;AAC9C,MAAOC,CAAAA,aAAa,CAACJ,IAAD,CAApB;AACD;;AAED,GAAIK,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,CAAJ,CAA4B;AAC1B,MAAOA,CAAAA,KAAP;AACD;;AAED;AACG,yBAAwBF,IAAK,gBAAeE,KAAM,kCAAiCG,MAAM,CAACE,IAAP;AAClF,IADkF;AAElF,EAHJ;;;AAMA,MAAOH,CAAAA,aAAa,CAACJ,IAAD,CAApB;AACD,CAlBM,C;;;AAqBA,KAAMQ,CAAAA,kBAAkB,CAAG,SAAS;AACzCT,IAAI,CAAE,CAAEG,KAAK,CAAE,CAAEO,OAAO,CAAEC,YAAX,CAAyB,GAAGR,KAA5B,EAAsC,EAA/C,CADmC,CAAT;AAE/B;AACD,KAAMS,CAAAA,MAAM,CAAG,kBAAOT,KAAP,CAAcU,KAAK,EAAIA,KAAK,GAAKT,SAAjC,CAAf;;AAEA,GAAIO,YAAY,GAAKP,SAArB,CAAgC;AAC9B,MAAO,CAAE,GAAGC,aAAL,CAAoB,GAAGO,MAAvB,CAAP;AACD;;AAED,KAAME,CAAAA,aAAa,CAAG,qBAAUT,aAAV,CAAyB,IAAMM,YAA/B,CAAtB;AACA,MAAO,CAAE,GAAGG,aAAL,CAAoB,GAAGF,MAAvB,CAAP;AACD,CAXM,C;;;AAcA,KAAMG,CAAAA,gBAAgB,CAAG,UAAW;AACzC,MAAO,qBAAUV,aAAV,CAAyBW,eAAzB,CAAP;AACD,CAFM,C;;AAIP,KAAMA,CAAAA,eAAe,CAAG,SAASb,KAAT,CAAgB;;AAEtC,MAAO,uCAAqBA,KAArB,CAA4B,IAAM,CAAE,CAApC,CAAP;AACD,CAHD;;AAKO,KAAMc,CAAAA,cAAc,CAAG,SAAS,CAAEd,KAAF,CAAT,CAAoB;AAChDe,MAAM,CAACC,OAAP,CAAehB,KAAf,EAAsBiB,OAAtB,CAA8BC,aAA9B;AACD,CAFM,C;;AAIP,KAAMA,CAAAA,aAAa,CAAG,SAAS,CAACpB,IAAD,CAAOE,KAAP,CAAT,CAAwB;AAC5C,GAAImB,YAAY,CAAC,CAAEnB,KAAF,CAAD,CAAhB,CAA6B;AAC3B;AACD;;AAED,KAAM,IAAIoB,CAAAA,KAAJ;AACH,yBAAwBtB,IAAK,MAAKE,KAAM,mCAAkCG,MAAM,CAACE,IAAP;AACzE,IADyE;AAEzE,EAHE,CAAN;;AAKD,CAVD;;AAYA,KAAMc,CAAAA,YAAY,CAAG,SAAS,CAAEnB,KAAF,CAAT,CAAoB;AACvC;AACEG,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,GAA0BA,KAAK,GAAKC,SAApC,EAAiD,MAAOD,CAAAA,KAAP,GAAiB,UADpE;;AAGD,CAJD;;AAMA,KAAMG,CAAAA,MAAM,CAAG,CAAC,OAAD,CAAU,MAAV,CAAkB,MAAlB,CAA0B,OAA1B,CAAmC,QAAnC,CAA6C,SAA7C,CAAf;;AAEO,KAAMD,CAAAA,aAAa,CAAG;AAC3BK,OAAO,CAAE,OADkB;AAE3Bc,iBAAiB,CAAE,OAFQ;AAG3BC,OAAO,CAAE,MAHkB;AAI3BC,kBAAkB,CAAE,OAJO;AAK3BC,gBAAgB,CAAE,OALS;AAM3BC,gBAAgB,CAAE,MANS,CAAtB,C","sourcesContent":["import { emitWarning } from 'process'\n\nimport { multipleValidOptions } from 'jest-validate'\n\nimport { result, mapValues, pickBy } from './utils.js'\n\n// Retrieve error's log level\nexport const getLevel = function({ opts, name, error }) {\n  const level = result(opts.level[name], error)\n\n  if (level === 'default' || level === undefined) {\n    return DEFAULT_LEVEL[name]\n  }\n\n  if (LEVELS.includes(level)) {\n    return level\n  }\n\n  emitWarning(\n    `Invalid option 'level.${name}' returning '${level}': function must return one of ${LEVELS.join(\n      ', ',\n    )}`,\n  )\n\n  return DEFAULT_LEVEL[name]\n}\n\n// Apply `opts.level.default` and default values to `opts.level`\nexport const applyDefaultLevels = function({\n  opts: { level: { default: defaultLevel, ...level } = {} },\n}) {\n  const levelA = pickBy(level, value => value !== undefined)\n\n  if (defaultLevel === undefined) {\n    return { ...DEFAULT_LEVEL, ...levelA }\n  }\n\n  const defaultLevels = mapValues(DEFAULT_LEVEL, () => defaultLevel)\n  return { ...defaultLevels, ...levelA }\n}\n\n// Use during options validation\nexport const getExampleLevels = function() {\n  return mapValues(DEFAULT_LEVEL, getExampleLevel)\n}\n\nconst getExampleLevel = function(level) {\n  // eslint-disable-next-line no-empty-function\n  return multipleValidOptions(level, () => {})\n}\n\nexport const validateLevels = function({ level }) {\n  Object.entries(level).forEach(validateLevel)\n}\n\nconst validateLevel = function([name, level]) {\n  if (isValidLevel({ level })) {\n    return\n  }\n\n  throw new Error(\n    `Invalid option 'level.${name}' '${level}': must be a function or one of ${LEVELS.join(\n      ', ',\n    )}`,\n  )\n}\n\nconst isValidLevel = function({ level }) {\n  return (\n    LEVELS.includes(level) || level === undefined || typeof level === 'function'\n  )\n}\n\nconst LEVELS = ['debug', 'info', 'warn', 'error', 'silent', 'default']\n\nexport const DEFAULT_LEVEL = {\n  default: 'error',\n  uncaughtException: 'error',\n  warning: 'warn',\n  unhandledRejection: 'error',\n  rejectionHandled: 'error',\n  multipleResolves: 'info',\n}\n"],"file":"src/level.js"}