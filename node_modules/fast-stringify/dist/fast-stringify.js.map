{"version":3,"file":"fast-stringify.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["/**\n * @function first\n *\n * @description\n * get the first n number of items from the array as a new array (faster than native splice)\n *\n * @param {Array<any>} array the array to get the items from\n * @param {number} length the length to limit the size to\n * @returns {Array<any>} the array limited in size\n */\nexport function first(array, length) {\n  const newArray = new Array(length);\n\n  for (let index = 0; index < length; index++) {\n    newArray[index] = array[index];\n  }\n\n  return newArray;\n}\n\n/**\n * @function getCircularValue\n *\n * @description\n * create a method that will get a placeholder for the circular value based\n * on the value saved in the cache for it\n *\n * @param {any} _key the key of the object to stringify\n * @param {any} _value the value of the object at key\n * @param {number} refCount the index of the ref\n * @returns {string} the circular value\n */\nexport function getCircularValue(_key, _value, refCount) {\n  return `[ref-${refCount}]`;\n}\n\n/**\n * @function indexOf\n *\n * @description\n * get the index of the value in the array (faster than native indexOf)\n *\n * @param {Array<any>} array the array to get the index of the value at\n * @param {any} value the value to match\n * @returns {number} the index of the value in array\n */\nexport const indexOf = (array, value) => {\n  if (array[0] === value) {\n    return 0;\n  }\n\n  const { length } = array;\n\n  for (let index = 1; index < length; index++) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * @function createReplacer\n *\n * @description\n * create a replacer method that handles circular values\n *\n * @param {function} [replacer] a custom replacer to use for non-circular values\n * @param {function} [circularReplacer] a custom replacer to use for circular methods\n * @returns {any} the value to stringify\n */\nexport function createReplacer(replacer, circularReplacer) {\n  const getCircularReplacer = circularReplacer || getCircularValue;\n  const hasReplacer = typeof replacer === 'function';\n\n  let cache = [];\n\n  return function replace(key, value) {\n    if (typeof value === 'object') {\n      if (cache.length) {\n        const cutoff = indexOf(cache, this) + 1;\n\n        if (cutoff) {\n          cache = first(cache, cutoff);\n        } else {\n          cache[cache.length] = this;\n        }\n\n        const locationOfValue = indexOf(cache, value);\n\n        if (~locationOfValue) {\n          return getCircularReplacer.call(this, key, value, locationOfValue);\n        }\n      } else {\n        cache[0] = value;\n      }\n    }\n\n    return hasReplacer ? replacer.call(this, key, value) : value;\n  };\n}\n","// utils\nimport { createReplacer } from './utils';\n\n/**\n * @function stringify\n *\n * @description\n * strinigifer that handles circular values\n *\n * @param {any} value the value to stringify\n * @param {function} [replacer] a custom replacer function for stringifying standard values\n * @param {number} [indent] the number of spaces to indent the output by\n * @param {function} [circularReplacer] a custom replacer function for stringifying circular values\n * @returns {string} the stringified output\n */\nexport default function stringify(value, replacer, indent, circularReplacer) {\n  return JSON.stringify(value, createReplacer(replacer, circularReplacer), indent);\n}\n"],"names":["first","array","length","newArray","Array","index","getCircularValue","_key","_value","refCount","indexOf","value","createReplacer","replacer","circularReplacer","getCircularReplacer","hasReplacer","cache","replace","key","cutoff","locationOfValue","call","stringify","indent","JSON"],"mappings":";;;;;;EAAA;;;;;;;;;;AAUA,EAAO,SAASA,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;EACnC,MAAMC,QAAQ,GAAG,IAAIC,KAAJ,CAAUF,MAAV,CAAjB;;EAEA,OAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,MAA5B,EAAoCG,KAAK,EAAzC,EAA6C;EAC3CF,IAAAA,QAAQ,CAACE,KAAD,CAAR,GAAkBJ,KAAK,CAACI,KAAD,CAAvB;EACD;;EAED,SAAOF,QAAP;EACD;EAED;;;;;;;;;;;;;AAYA,EAAO,SAASG,gBAAT,CAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;EACvD,mBAAeA,QAAf;EACD;EAED;;;;;;;;;;;AAUA,EAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACT,KAAD,EAAQU,KAAR,EAAkB;EACvC,MAAIV,KAAK,CAAC,CAAD,CAAL,KAAaU,KAAjB,EAAwB;EACtB,WAAO,CAAP;EACD;;EAHsC,MAK/BT,MAL+B,GAKpBD,KALoB,CAK/BC,MAL+B;;EAOvC,OAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,MAA5B,EAAoCG,KAAK,EAAzC,EAA6C;EAC3C,QAAIJ,KAAK,CAACI,KAAD,CAAL,KAAiBM,KAArB,EAA4B;EAC1B,aAAON,KAAP;EACD;EACF;;EAED,SAAO,CAAC,CAAR;EACD,CAdM;EAgBP;;;;;;;;;;;AAUA,EAAO,SAASO,cAAT,CAAwBC,QAAxB,EAAkCC,gBAAlC,EAAoD;EACzD,MAAMC,mBAAmB,GAAGD,gBAAgB,IAAIR,gBAAhD;EACA,MAAMU,WAAW,GAAG,OAAOH,QAAP,KAAoB,UAAxC;EAEA,MAAII,KAAK,GAAG,EAAZ;EAEA,SAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBR,KAAtB,EAA6B;EAClC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;EAC7B,UAAIM,KAAK,CAACf,MAAV,EAAkB;EAChB,YAAMkB,MAAM,GAAGV,OAAO,CAACO,KAAD,EAAQ,IAAR,CAAP,GAAuB,CAAtC;;EAEA,YAAIG,MAAJ,EAAY;EACVH,UAAAA,KAAK,GAAGjB,KAAK,CAACiB,KAAD,EAAQG,MAAR,CAAb;EACD,SAFD,MAEO;EACLH,UAAAA,KAAK,CAACA,KAAK,CAACf,MAAP,CAAL,GAAsB,IAAtB;EACD;;EAED,YAAMmB,eAAe,GAAGX,OAAO,CAACO,KAAD,EAAQN,KAAR,CAA/B;;EAEA,YAAI,CAACU,eAAL,EAAsB;EACpB,iBAAON,mBAAmB,CAACO,IAApB,CAAyB,IAAzB,EAA+BH,GAA/B,EAAoCR,KAApC,EAA2CU,eAA3C,CAAP;EACD;EACF,OAdD,MAcO;EACLJ,QAAAA,KAAK,CAAC,CAAD,CAAL,GAAWN,KAAX;EACD;EACF;;EAED,WAAOK,WAAW,GAAGH,QAAQ,CAACS,IAAT,CAAc,IAAd,EAAoBH,GAApB,EAAyBR,KAAzB,CAAH,GAAqCA,KAAvD;EACD,GAtBD;EAuBD;;ECrGD;AACA,EAEA;;;;;;;;;;;;;AAYA,EAAe,SAASY,SAAT,CAAmBZ,KAAnB,EAA0BE,QAA1B,EAAoCW,MAApC,EAA4CV,gBAA5C,EAA8D;EAC3E,SAAOW,IAAI,CAACF,SAAL,CAAeZ,KAAf,EAAsBC,cAAc,CAACC,QAAD,EAAWC,gBAAX,CAApC,EAAkEU,MAAlE,CAAP;EACD;;;;;;;;;;;;"}