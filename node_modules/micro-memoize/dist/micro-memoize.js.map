{"version":3,"file":"micro-memoize.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["// @flow\n\n// types\nimport type {\n  Cache,\n  Options,\n} from './types';\n\nconst hasOwnProperty: Function = Object.prototype.hasOwnProperty;\n\n/**\n * @function assign\n *\n * @description\n * merge the sources into the target, as you would with Object.assign()\n *\n * @param {Object} target object to merge into\n * @param  {...Array<Object>} sources the sources to merge into the target\n * @returns {Object} the merged object\n */\nexport const assign = (target: Object, ...sources: Array<Object>): Object => {\n  let source;\n\n  for (let index = 0; index < sources.length; index++) {\n    source = sources[index];\n\n    if (source && typeof source === 'object') {\n      for (let key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * @function cloneArray\n *\n * @description\n * clone the array-like object and return the new array\n *\n * @param {Array<any>|Arguments} arrayLike the array-like object to clone\n * @returns {Array<any>} the clone of the array\n */\nexport const cloneArray = (arrayLike: Array<any> | Object): Array<any> => {\n  const length: number = arrayLike.length;\n\n  if (!length) {\n    return [];\n  }\n\n  if (length === 1) {\n    return [arrayLike[0]];\n  }\n\n  if (length === 2) {\n    return [arrayLike[0], arrayLike[1]];\n  }\n\n  if (length === 3) {\n    return [arrayLike[0], arrayLike[1], arrayLike[2]];\n  }\n\n  const array: Array<any> = new Array(length);\n\n  for (let index: number = 0; index < length; index++) {\n    array[index] = arrayLike[index];\n  }\n\n  return array;\n};\n\nexport const createAreKeysEqual = (isEqual: Function): Function =>\n  /**\n   * @function areKeysEqual\n   *\n   * @description\n   * are the keys shallowly equal to one another\n   *\n   * @param {Array<any>} keys1 the keys array to test against\n   * @param {Array<any>} keys2 the keys array to test\n   * @returns {boolean} are the keys shallowly equal\n   */\n  (keys1: Array<any>, keys2: Array<any>): boolean => {\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (let index: number = 0, length: number = keys1.length; index < length; index++) {\n      if (!isEqual(keys1[index], keys2[index])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\nexport const createGetKeyIndex = (isEqual: Function, isMatchingKey: ?Function): Function => {\n  const areKeysEqual: Function = typeof isMatchingKey === 'function' ? isMatchingKey : createAreKeysEqual(isEqual);\n\n  /**\n   * @function getKeyIndex\n   *\n   * @description\n   * get the index of the matching key\n   *\n   * @param {Array<Array<any>>} allKeys the list of all available keys\n   * @param {Array<any>} keysToMatch the key to try to match\n   *\n   * @returns {number} the index of the matching key value, or -1\n   */\n  return (allKeys: Array<Array<any>>, keysToMatch: Array<any>): number => {\n    for (let index: number = 0; index < allKeys.length; index++) {\n      if (areKeysEqual(allKeys[index], keysToMatch)) {\n        return index;\n      }\n    }\n\n    return -1;\n  };\n};\n\n/**\n * @function isSameValueZero\n *\n * @description\n * are the objects equal based on SameValueZero\n *\n * @param {any} object1 the first object to compare\n * @param {any} object2 the second object to compare\n * @returns {boolean} are the two objects equal\n */\nexport const isSameValueZero = (object1: any, object2: any): boolean =>\n  object1 === object2 || (object1 !== object1 && object2 !== object2);\n\nexport const onCacheOperation = (cacheIgnored: Cache, optionsIgnored: Options, memoizedIgnored: Function): void => {};\n\n/**\n * @function orderByLru\n *\n * @description\n * order the array based on a Least-Recently-Used basis\n *\n * @param {Array<any>} array the array to order\n * @param {any} value the value to assign at the beginning of the array\n * @param {number} startingIndex the index of the item to move to the front\n */\nexport const orderByLru = (array: Array<any>, value: any, startingIndex: number) => {\n  let index: number = startingIndex;\n\n  while (index--) {\n    array[index + 1] = array[index];\n  }\n\n  array[0] = value;\n};\n\n/**\n * @function createSetPromiseHandler\n *\n * @description\n * update the promise method to auto-remove from cache if rejected, and if resolved then fire cache hit / changed\n *\n * @param {Options} options the options for the memoized function\n * @param {function(Cache, function): function} memoized the memoized function\n */\nexport const createSetPromiseHandler = (options: Options): Function => {\n  const getKeyIndex = createGetKeyIndex(options.isEqual, options.isMatchingKey);\n\n  return (cache: Cache, memoized: Function): void => {\n    const key: any = cache.keys[0];\n\n    cache.values[0] = cache.values[0]\n      .then(\n        (value: any): any => {\n          options.onCacheHit(cache, options, memoized);\n          options.onCacheChange(cache, options, memoized);\n\n          return value;\n        }\n      )\n      .catch((error: Error) => {\n        const keyIndex: number = getKeyIndex(cache.keys, key);\n\n        if (~keyIndex) {\n          cache.keys.splice(keyIndex, 1);\n          cache.values.splice(keyIndex, 1);\n        }\n\n        throw error;\n      });\n  };\n};\n","// @flow\n\n// types\nimport type {\n  Cache,\n  Options,\n} from './types';\n\n// utils\nimport {\n  assign,\n  cloneArray,\n  createGetKeyIndex,\n  createSetPromiseHandler,\n  isSameValueZero,\n  onCacheOperation,\n  orderByLru,\n} from './utils';\n\n/**\n * @function memoize\n *\n * @description\n * get the memoized version of the method passed\n *\n * @param {function} fn the method to memoize\n * @param {Object} [options={}] the options to build the memoizer with\n * @param {boolean} [options.isEqual=isSameValueZero] the method to compare equality of keys with\n * @param {number} [options.maxSize=1] the number of items to store in cache\n * @returns {function} the memoized method\n */\nexport default function memoize(fn: Function, options: Options) {\n  // if it is a memoized method, don't re-memoize it\n  if (fn.isMemoized) {\n    return fn;\n  }\n\n  const {\n    isEqual = isSameValueZero,\n    isMatchingKey,\n    isPromise = false,\n    maxSize = 1,\n    onCacheAdd = onCacheOperation,\n    onCacheChange = onCacheOperation,\n    onCacheHit = onCacheOperation,\n    transformKey,\n    ...extraOptions\n  } = options || {};\n\n  const normalizedOptions = assign({}, extraOptions, {\n    isEqual,\n    isMatchingKey,\n    isPromise,\n    maxSize,\n    onCacheAdd,\n    onCacheChange,\n    onCacheHit,\n    transformKey,\n  });\n\n  const getKeyIndex: Function = createGetKeyIndex(isEqual, isMatchingKey);\n  const setPromiseHandler: Function = createSetPromiseHandler(normalizedOptions);\n  const shouldCloneArguments: boolean = !!(transformKey || isMatchingKey);\n\n  const cache: Cache = {\n    keys: [],\n    get size() {\n      return cache.keys.length;\n    },\n    values: [],\n  };\n  const {keys, values} = cache;\n\n  /**\n   * @function memoized\n   *\n   * @description\n   * the memoized version of the method passed\n   *\n   * @param {...Array<any>} key the arguments passed, which create a unique cache key\n   * @returns {any} the value of the method called with the arguments\n   */\n  function memoized(): any {\n    const args: Object = arguments;\n    const normalizedArgs: Array<any> | Object = shouldCloneArguments ? cloneArray(args) : args;\n    const key: Array<any> | Object = transformKey ? transformKey(normalizedArgs) : normalizedArgs;\n    const keyIndex: number = getKeyIndex(keys, key);\n\n    if (~keyIndex) {\n      onCacheHit(cache, normalizedOptions, memoized);\n\n      if (keyIndex) {\n        orderByLru(keys, keys[keyIndex], keyIndex);\n        orderByLru(values, values[keyIndex], keyIndex);\n\n        onCacheChange(cache, normalizedOptions, memoized);\n      }\n    } else {\n      if (keys.length >= maxSize) {\n        keys.pop();\n        values.pop();\n      }\n\n      const newKey = shouldCloneArguments ? key : cloneArray(normalizedArgs);\n      const newValue = fn.apply(this, args);\n\n      orderByLru(keys, newKey, keys.length);\n      orderByLru(values, newValue, values.length);\n\n      if (isPromise) {\n        setPromiseHandler(cache, memoized);\n      }\n\n      onCacheAdd(cache, normalizedOptions, memoized);\n      onCacheChange(cache, normalizedOptions, memoized);\n    }\n\n    return values[0];\n  }\n\n  Object.defineProperties(\n    memoized,\n    ({\n      cache: {\n        configurable: true,\n        get() {\n          return cache;\n        },\n      },\n      cacheSnapshot: {\n        configurable: true,\n        get() {\n          return {\n            keys: cloneArray(cache.keys),\n            size: cache.size,\n            values: cloneArray(cache.values),\n          };\n        },\n      },\n      isMemoized: {\n        configurable: true,\n        get() {\n          return true;\n        },\n      },\n      options: {\n        configurable: true,\n        get() {\n          return normalizedOptions;\n        },\n      },\n    }: Object)\n  );\n\n  return memoized;\n}\n"],"names":["hasOwnProperty","Object","prototype","assign","target","source","index","key","call","cloneArray","arrayLike","length","array","Array","createAreKeysEqual","isEqual","keys1","keys2","createGetKeyIndex","isMatchingKey","areKeysEqual","allKeys","keysToMatch","isSameValueZero","object1","object2","onCacheOperation","cacheIgnored","optionsIgnored","memoizedIgnored","orderByLru","value","startingIndex","createSetPromiseHandler","options","getKeyIndex","cache","memoized","keys","values","then","onCacheHit","onCacheChange","catch","error","keyIndex","splice","memoize","fn","isMemoized","isPromise","maxSize","onCacheAdd","transformKey","extraOptions","normalizedOptions","setPromiseHandler","shouldCloneArguments","size","args","arguments","normalizedArgs","pop","newKey","newValue","apply","defineProperties","configurable","get","cacheSnapshot"],"mappings":"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"}