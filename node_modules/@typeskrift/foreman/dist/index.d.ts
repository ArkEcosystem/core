import { ExecaSyncReturnValue } from "execa";
export declare enum ProcessState {
    Online = "online",
    Stopped = "stopped",
    Stopping = "stopping",
    Waiting = "waiting restart",
    Launching = "launching",
    Errored = "errored",
    OneLaunch = "one-launch-status"
}
export declare type ProcessIdentifier = string | number;
export declare type ProcessDescription = Record<string, any>;
export declare class Foreman {
    list(): ProcessDescription[] | undefined;
    describe(id: ProcessIdentifier): ProcessDescription | undefined;
    start(opts: Record<string, any>, flags?: Record<string, any>): ExecaSyncReturnValue;
    stop(id: ProcessIdentifier, flags?: Record<string, any>): ExecaSyncReturnValue;
    restart(id: ProcessIdentifier, flags?: Record<string, any>): ExecaSyncReturnValue;
    reload(id: ProcessIdentifier): ExecaSyncReturnValue;
    reset(id: ProcessIdentifier): ExecaSyncReturnValue;
    delete(id: ProcessIdentifier): ExecaSyncReturnValue;
    flush(): ExecaSyncReturnValue;
    reloadLogs(): ExecaSyncReturnValue;
    ping(): ExecaSyncReturnValue;
    update(): ExecaSyncReturnValue;
    status(id: ProcessIdentifier): ProcessState | undefined;
    isOnline(id: ProcessIdentifier): boolean;
    isStopped(id: ProcessIdentifier): boolean;
    isStopping(id: ProcessIdentifier): boolean;
    isWaiting(id: ProcessIdentifier): boolean;
    isLaunching(id: ProcessIdentifier): boolean;
    isErrored(id: ProcessIdentifier): boolean;
    isOneLaunch(id: ProcessIdentifier): boolean;
    isUnknown(id: ProcessIdentifier): boolean;
    has(id: ProcessIdentifier): boolean;
    missing(id: ProcessIdentifier): boolean;
    protected flagsToString(flags: Record<string, any>): string;
    private shellSync;
}
