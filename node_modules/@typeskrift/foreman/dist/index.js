"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const execa_1 = require("execa");
var ProcessState;
(function (ProcessState) {
    ProcessState["Online"] = "online";
    ProcessState["Stopped"] = "stopped";
    ProcessState["Stopping"] = "stopping";
    ProcessState["Waiting"] = "waiting restart";
    ProcessState["Launching"] = "launching";
    ProcessState["Errored"] = "errored";
    ProcessState["OneLaunch"] = "one-launch-status";
})(ProcessState = exports.ProcessState || (exports.ProcessState = {}));
class Foreman {
    list() {
        try {
            const { stdout } = this.shellSync("pm2 jlist");
            if (!stdout) {
                return undefined;
            }
            const lastLine = stdout.split("\n").pop();
            if (!lastLine) {
                return undefined;
            }
            return Object.values(JSON.parse(lastLine));
        }
        catch (error) {
            return undefined;
        }
    }
    describe(id) {
        try {
            const processes = this.list();
            return processes
                ? processes.find((process) => [process.id, process.name].includes(id))
                : undefined;
        }
        catch (error) {
            return undefined;
        }
    }
    start(opts, flags = {}) {
        let command = `pm2 start ${opts.script}`;
        if (opts.node_args) {
            command += ` --node-args="${this.flagsToString(opts.node_args)}"`;
        }
        if (flags) {
            command += ` ${this.flagsToString(flags)}`;
        }
        if (opts.args) {
            command += ` -- ${opts.args}`;
        }
        return this.shellSync(command);
    }
    stop(id, flags = {}) {
        let command = `pm2 stop ${id}`;
        if (flags) {
            command += ` ${this.flagsToString(flags)}`;
        }
        return this.shellSync(command);
    }
    restart(id, flags = {}) {
        let command = `pm2 restart ${id}`;
        if (flags) {
            command += ` ${this.flagsToString(flags)}`;
        }
        return this.shellSync(command);
    }
    reload(id) {
        return this.shellSync(`pm2 reload ${id}`);
    }
    reset(id) {
        return this.shellSync(`pm2 reset ${id}`);
    }
    delete(id) {
        return this.shellSync(`pm2 delete ${id}`);
    }
    flush() {
        return this.shellSync("pm2 flush");
    }
    reloadLogs() {
        return this.shellSync("pm2 reloadLogs");
    }
    ping() {
        return this.shellSync("pm2 ping");
    }
    update() {
        return this.shellSync("pm2 update");
    }
    status(id) {
        try {
            const process = this.describe(id);
            return process ? process.pm2_env.status : undefined;
        }
        catch (error) {
            return undefined;
        }
    }
    isOnline(id) {
        return this.status(id) === ProcessState.Online;
    }
    isStopped(id) {
        return this.status(id) === ProcessState.Stopped;
    }
    isStopping(id) {
        return this.status(id) === ProcessState.Stopping;
    }
    isWaiting(id) {
        return this.status(id) === ProcessState.Waiting;
    }
    isLaunching(id) {
        return this.status(id) === ProcessState.Launching;
    }
    isErrored(id) {
        return this.status(id) === ProcessState.Errored;
    }
    isOneLaunch(id) {
        return this.status(id) === ProcessState.OneLaunch;
    }
    isUnknown(id) {
        return !Object.values(ProcessState).includes(this.status(id));
    }
    has(id) {
        try {
            const { stdout } = this.shellSync(`pm2 id ${id} | awk '{ print $2 }'`);
            return !!stdout && !isNaN(Number(stdout));
        }
        catch (error) {
            return false;
        }
    }
    missing(id) {
        return !this.has(id);
    }
    flagsToString(flags) {
        const mappedFlags = [];
        for (const [key, value] of Object.entries(flags)) {
            if (value !== undefined) {
                if (value === true) {
                    mappedFlags.push(`--${key}`);
                }
                else if (typeof value === "string") {
                    mappedFlags.push(value.includes(" ") ? `--${key}="${value}"` : `--${key}=${value}`);
                }
                else {
                    mappedFlags.push(`--${key}=${value}`);
                }
            }
        }
        return mappedFlags.join(" ");
    }
    shellSync(command) {
        return execa_1.sync(command, { shell: true });
    }
}
exports.Foreman = Foreman;
//# sourceMappingURL=index.js.map