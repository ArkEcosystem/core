{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/transports/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { API } from '@sentry/core';\nimport { Event, Response, Status, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as url from 'url';\n\nimport { SDK_NAME, SDK_VERSION } from '../version';\n\n/**\n * Internal used interface for typescript.\n * @hidden\n */\nexport interface HTTPRequest {\n  /**\n   * Request wrapper\n   * @param options These are {@see TransportOptions}\n   * @param callback Callback when request is finished\n   */\n  request(\n    options: http.RequestOptions | https.RequestOptions | string | url.URL,\n    callback?: (res: http.IncomingMessage) => void,\n  ): http.ClientRequest;\n}\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /** API object */\n  protected _api: API;\n\n  /** The Agent used for corresponding transport */\n  public module?: HTTPRequest;\n\n  /** The Agent used for corresponding transport */\n  public client?: http.Agent | https.Agent;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  /** Create instance and set this.dsn */\n  public constructor(public options: TransportOptions) {\n    this._api = new API(options.dsn);\n  }\n\n  /** Returns a build request option object used by request */\n  protected _getRequestOptions(): http.RequestOptions | https.RequestOptions {\n    const headers = {\n      ...this._api.getRequestHeaders(SDK_NAME, SDK_VERSION),\n      ...this.options.headers,\n    };\n    const dsn = this._api.getDsn();\n\n    const options: {\n      [key: string]: any;\n    } = {\n      agent: this.client,\n      headers,\n      hostname: dsn.host,\n      method: 'POST',\n      path: this._api.getStoreEndpointPath(),\n      port: dsn.port,\n      protocol: `${dsn.protocol}:`,\n    };\n\n    if (this.options.caCerts) {\n      options.ca = fs.readFileSync(this.options.caCerts);\n    }\n\n    return options;\n  }\n\n  /** JSDoc */\n  protected async _sendWithModule(httpModule: HTTPRequest, event: Event): Promise<Response> {\n    if (!this._buffer.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    return this._buffer.add(\n      new Promise<Response>((resolve, reject) => {\n        const req = httpModule.request(this._getRequestOptions(), (res: http.IncomingMessage) => {\n          res.setEncoding('utf8');\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\n            resolve({\n              status: Status.fromHttpCode(res.statusCode),\n            });\n          } else {\n            if (res.headers && res.headers['x-sentry-error']) {\n              const reason = res.headers['x-sentry-error'];\n              reject(new SentryError(`HTTP Error (${res.statusCode}): ${reason}`));\n            } else {\n              reject(new SentryError(`HTTP Error (${res.statusCode})`));\n            }\n          }\n          // force the socket to drain\n          res.on('data', () => {\n            // Drain\n          });\n          res.on('end', () => {\n            // Drain\n          });\n        });\n        req.on('error', reject);\n        req.end(JSON.stringify(event));\n      }),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): Promise<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): Promise<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n"]}