{"version":3,"file":"object.js","sourceRoot":"","sources":["../src/object.ts"],"names":[],"mappings":";AAEA,2BAAkF;AAClF,+BAA8B;AAC9B,+BAA0C;AAC1C,mCAAoC;AAEpC;;;;;;;GAOG;AACH,SAAgB,IAAI,CAAC,MAA8B,EAAE,IAAY,EAAE,WAAoC;IACrG,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,EAAE;QACrB,OAAO;KACR;IAED,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAc,CAAC;IAC3C,IAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAoB,CAAC;IAEzD,0GAA0G;IAC1G,kFAAkF;IAClF,kDAAkD;IAClD,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;QACjC,IAAI;YACF,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;YAC5C,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE;gBAC/B,UAAU,EAAE;oBACV,UAAU,EAAE,KAAK;oBACjB,KAAK,EAAE,IAAI;iBACZ;gBACD,mBAAmB,EAAE;oBACnB,UAAU,EAAE,KAAK;oBACjB,KAAK,EAAE,QAAQ;iBAChB;gBACD,kBAAkB,EAAE;oBAClB,UAAU,EAAE,KAAK;oBACjB,KAAK,EAAE,OAAO;iBACf;aACF,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,iFAAiF;YACjF,mEAAmE;SACpE;KACF;IAED,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;AACzB,CAAC;AAnCD,oBAmCC;AAED;;;;;GAKG;AACH,SAAgB,SAAS,CAAC,MAA8B;IACtD,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;SACvB,GAAG;IACF,yCAAyC;IACzC,UAAA,GAAG,IAAI,OAAG,kBAAkB,CAAC,GAAG,CAAC,SAAI,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAG,EAA/D,CAA+D,CACvE;SACA,IAAI,CAAC,GAAG,CAAC,CAAC;AACf,CAAC;AAPD,8BAOC;AAED;;;;;GAKG;AACH,SAAS,aAAa,CACpB,KAAU;IAIV,IAAI,YAAO,CAAC,KAAK,CAAC,EAAE;QAClB,IAAM,KAAK,GAAG,KAAsB,CAAC;QACrC,IAAM,GAAG,GAKL;YACF,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC;QAEF,KAAK,IAAM,CAAC,IAAI,KAAK,EAAE;YACrB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;gBAClD,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aACnB;SACF;QAED,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,YAAO,CAAC,KAAK,CAAC,EAAE;QAClB,IAAM,MAAM,GAER,EAAE,CAAC;QAEP,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QAEzB,sEAAsE;QACtE,IAAI;YACF,MAAM,CAAC,MAAM,GAAG,cAAS,CAAC,KAAK,CAAC,MAAM,CAAC;gBACrC,CAAC,CAAC,uBAAgB,CAAC,KAAK,CAAC,MAAM,CAAC;gBAChC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAClD;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC;SAC7B;QAED,IAAI;YACF,MAAM,CAAC,aAAa,GAAG,cAAS,CAAC,KAAK,CAAC,aAAa,CAAC;gBACnD,CAAC,CAAC,uBAAgB,CAAC,KAAK,CAAC,aAAa,CAAC;gBACvC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;SACzD;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,CAAC,aAAa,GAAG,WAAW,CAAC;SACpC;QAED,kDAAkD;QAClD,IAAI,OAAO,WAAW,KAAK,WAAW,IAAI,KAAK,YAAY,WAAW,EAAE;YACtE,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;SAC9B;QAED,KAAK,IAAM,CAAC,IAAI,KAAK,EAAE;YACrB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;gBAClD,MAAM,CAAC,CAAC,CAAC,GAAI,KAAgC,CAAC,CAAC,CAAC,CAAC;aAClD;SACF;QAED,OAAO,MAAM,CAAC;KACf;IAED,OAAO,KAEN,CAAC;AACJ,CAAC;AAED,4CAA4C;AAC5C,SAAS,UAAU,CAAC,KAAa;IAC/B,sCAAsC;IACtC,OAAO,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AAClD,CAAC;AAED,4CAA4C;AAC5C,SAAS,QAAQ,CAAC,KAAU;IAC1B,OAAO,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3C,CAAC;AAED,YAAY;AACZ,SAAgB,eAAe,CAC7B,MAA8B;AAC9B,6BAA6B;AAC7B,KAAiB;AACjB,iEAAiE;AACjE,OAA4B;IAF5B,sBAAA,EAAA,SAAiB;IAEjB,wBAAA,EAAA,UAAkB,GAAG,GAAG,IAAI;IAE5B,IAAM,UAAU,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAE5C,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,OAAO,EAAE;QAClC,OAAO,eAAe,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;KACpD;IAED,OAAO,UAAe,CAAC;AACzB,CAAC;AAdD,0CAcC;AAED,mGAAmG;AACnG,SAAS,cAAc,CAAC,KAAU;IAChC,IAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEnD,wBAAwB;IACxB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,KAAK,CAAC;KACd;IACD,IAAI,IAAI,KAAK,iBAAiB,EAAE;QAC9B,OAAO,UAAU,CAAC;KACnB;IACD,IAAI,IAAI,KAAK,gBAAgB,EAAE;QAC7B,OAAO,SAAS,CAAC;KAClB;IAED,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IACzC,OAAO,gBAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;AACrD,CAAC;AAED;;;;;;;;GAQG;AACH,iDAAiD;AACjD,SAAS,cAAc,CAAI,KAAQ,EAAE,GAAS;IAC5C,IAAI,GAAG,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAM,KAAsC,CAAC,OAAO,EAAE;QACrG,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,GAAG,KAAK,eAAe,EAAE;QAC3B,OAAO,iBAAiB,CAAC;KAC1B;IAED,IAAI,OAAQ,MAAc,KAAK,WAAW,IAAK,KAAiB,KAAK,MAAM,EAAE;QAC3E,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,OAAQ,MAAc,KAAK,WAAW,IAAK,KAAiB,KAAK,MAAM,EAAE;QAC3E,OAAO,UAAU,CAAC;KACnB;IAED,IAAI,OAAQ,QAAgB,KAAK,WAAW,IAAK,KAAiB,KAAK,QAAQ,EAAE;QAC/E,OAAO,YAAY,CAAC;KACrB;IAED,gCAAgC;IAChC,IAAI,qBAAgB,CAAC,KAAK,CAAC,EAAE;QAC3B,OAAO,kBAAkB,CAAC;KAC3B;IAED,mDAAmD;IACnD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK,EAAE;QAChD,OAAO,OAAO,CAAC;KAChB;IAED,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;QACpB,OAAO,aAAa,CAAC;KACtB;IAED,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;QAC/B,OAAO,iBAAc,KAAK,CAAC,IAAI,IAAI,yBAAyB,OAAG,CAAC;KACjE;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;;GAOG;AACH,SAAgB,IAAI,CAAC,GAAW,EAAE,KAAU,EAAE,KAAyB,EAAE,IAAuB;IAAlD,sBAAA,EAAA,SAAiB,QAAQ;IAAE,qBAAA,EAAA,WAAiB,WAAI,EAAE;IAC9F,6DAA6D;IAC7D,IAAI,KAAK,KAAK,CAAC,EAAE;QACf,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;KAC9B;IAED,gEAAgE;IAChE,+BAA+B;IAC/B,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;QAC/E,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;KACvB;IACD,8BAA8B;IAE9B,4JAA4J;IAC5J,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAC9C,IAAI,gBAAW,CAAC,UAAU,CAAC,EAAE;QAC3B,OAAO,UAAU,CAAC;KACnB;IAED,wJAAwJ;IACxJ,IAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IAEpC,4FAA4F;IAC5F,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAE3C,yEAAyE;IACzE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,cAAc,CAAC;KACvB;IAED,8BAA8B;IAC9B,KAAK,IAAM,QAAQ,IAAI,MAAM,EAAE;QAC7B,+FAA+F;QAC/F,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;YAC3D,SAAS;SACV;QACD,+CAA+C;QAC9C,GAA8B,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;KAC/F;IAED,4EAA4E;IAC5E,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEtB,4BAA4B;IAC5B,OAAO,GAAG,CAAC;AACb,CAAC;AA7CD,oBA6CC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,SAAS,CAAC,KAAU,EAAE,KAAc;IAClD,IAAI;QACF,yCAAyC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,UAAC,GAAW,EAAE,KAAU,IAAK,OAAA,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,EAAvB,CAAuB,CAAC,CAAC,CAAC;KAChG;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,sBAAsB,CAAC;KAC/B;AACH,CAAC;AAPD,8BAOC;AAED;;;;GAIG;AACH,SAAgB,8BAA8B,CAAC,SAAc,EAAE,SAAsB;IAAtB,0BAAA,EAAA,cAAsB;IACnF,wCAAwC;IACxC,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;IACnD,IAAI,CAAC,IAAI,EAAE,CAAC;IAEZ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,OAAO,sBAAsB,CAAC;KAC/B;IAED,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,SAAS,EAAE;QAC/B,OAAO,iBAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;KACrC;IAED,KAAK,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,YAAY,GAAG,CAAC,EAAE,YAAY,EAAE,EAAE;QACrE,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,UAAU,CAAC,MAAM,GAAG,SAAS,EAAE;YACjC,SAAS;SACV;QACD,IAAI,YAAY,KAAK,IAAI,CAAC,MAAM,EAAE;YAChC,OAAO,UAAU,CAAC;SACnB;QACD,OAAO,iBAAQ,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;KACxC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAzBD,wEAyBC","sourcesContent":["import { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { isElement, isError, isEvent, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { htmlTreeAsString } from './misc';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry__: {\n          enumerable: false,\n          value: true,\n        },\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n        __sentry_wrapped__: {\n          enumerable: false,\n          value: wrapped,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      stack: string | undefined;\n      message: string;\n      name: string;\n      [key: string]: any;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = value.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(value.target)\n        ? htmlTreeAsString(value.target)\n        : Object.prototype.toString.call(value.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(value.currentTarget)\n        ? htmlTreeAsString(value.currentTarget)\n        : Object.prototype.toString.call(value.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof CustomEvent !== 'undefined' && value instanceof CustomEvent) {\n      source.detail = value.detail;\n    }\n\n    for (const i in value) {\n      if (Object.prototype.hasOwnProperty.call(value, i)) {\n        source[i] = (value as { [key: string]: any })[i];\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  // tslint:disable-next-line:no-tautology-expression\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${value.name || '<unknown-function-name>'}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  // tslint:disable:no-unsafe-any\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  // tslint:enable:no-unsafe-any\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\nexport function normalize(input: any, depth?: number): any {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  // tslint:disable:strict-type-predicates\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n"]}