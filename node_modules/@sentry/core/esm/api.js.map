{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnLike } from '@sentry/types';\nimport { urlEncode } from '@sentry/utils';\n\nimport { Dsn } from './dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns a string with auth headers in the url to the store endpoint. */\n  public getStoreEndpoint(): string {\n    return `${this._getBaseUrl()}${this.getStoreEndpointPath()}`;\n  }\n\n  /** Returns the store endpoint with auth added in url encoded. */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n    return `${this.getStoreEndpoint()}?${urlEncode(auth)}`;\n  }\n\n  /** Returns the base path of the url including the port. */\n  private _getBaseUrl(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /** Returns an object that can be used in request headers. */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_timestamp=${new Date().getTime()}`);\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this._getBaseUrl()}${dsn.path ? `/${dsn.path}` : ''}/api/embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n"]}