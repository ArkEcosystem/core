"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ipaddr_js_1 = require("ipaddr.js");
const defaultHeaders = [
    "x-client-ip",
    "x-forwarded-for",
    "cf-connecting-ip",
    "fastly-client-ip",
    "true-client-ip",
    "x-real-ip",
    "x-cluster-client-ip",
    "x-forwarded",
    "forwarded-for",
    "forwarded",
];
function containsAddress(header, request, headers) {
    return headers.includes(header) && ipaddr_js_1.isValid(request.headers[header]);
}
function addressToString(value) {
    try {
        return ipaddr_js_1.parse(value).toString();
    }
    catch (error) {
        return undefined;
    }
}
function discoverFromHeader(header, request) {
    return ipaddr_js_1.isValid(request.headers[header]) ? addressToString(request.headers[header]) : undefined;
}
exports.discoverFromHeader = discoverFromHeader;
function discoverXClientIp(request) {
    return discoverFromHeader("x-client-ip", request);
}
exports.discoverXClientIp = discoverXClientIp;
function discoverXForwardedFor(request) {
    const header = request.headers["x-forwarded-for"];
    if (!header) {
        return undefined;
    }
    return header
        .split(",")
        .map((e) => {
        const ip = e.trim();
        if (ip.includes(":")) {
            const splitted = ip.split(":");
            if (splitted.length === 2) {
                return splitted[0];
            }
        }
        return ip;
    })
        .map(addressToString)
        .find(ipaddr_js_1.isValid);
}
exports.discoverXForwardedFor = discoverXForwardedFor;
function discoverCFConnectingIp(request) {
    return discoverFromHeader("cf-connecting-ip", request);
}
exports.discoverCFConnectingIp = discoverCFConnectingIp;
function discoverFastlyClientIp(request) {
    return discoverFromHeader("fastly-client-ip", request);
}
exports.discoverFastlyClientIp = discoverFastlyClientIp;
function discoverTrueClientIp(request) {
    return discoverFromHeader("true-client-ip", request);
}
exports.discoverTrueClientIp = discoverTrueClientIp;
function discoverXRealIp(request) {
    return discoverFromHeader("x-real-ip", request);
}
exports.discoverXRealIp = discoverXRealIp;
function discoverXClusterClientIp(request) {
    return discoverFromHeader("x-cluster-client-ip", request);
}
exports.discoverXClusterClientIp = discoverXClusterClientIp;
function discoverXForwarded(request) {
    return discoverFromHeader("x-forwarded", request);
}
exports.discoverXForwarded = discoverXForwarded;
function discoverForwardedFor(request) {
    return discoverFromHeader("forwarded-for", request);
}
exports.discoverForwardedFor = discoverForwardedFor;
function discoverForwarded(request) {
    return discoverFromHeader("forwarded", request);
}
exports.discoverForwarded = discoverForwarded;
function discover(request, headers = []) {
    if (!headers.length) {
        headers = defaultHeaders;
    }
    if (request.headers && headers) {
        if (containsAddress("x-client-ip", request, headers)) {
            return request.headers["x-client-ip"];
        }
        if (headers.includes("x-forwarded-for")) {
            const remoteAddress = discoverXForwardedFor(request);
            if (remoteAddress) {
                return remoteAddress;
            }
        }
        if (containsAddress("cf-connecting-ip", request, headers)) {
            return addressToString(request.headers["cf-connecting-ip"]);
        }
        if (containsAddress("fastly-client-ip", request, headers)) {
            return addressToString(request.headers["fastly-client-ip"]);
        }
        if (containsAddress("true-client-ip", request, headers)) {
            return addressToString(request.headers["true-client-ip"]);
        }
        if (containsAddress("x-real-ip", request, headers)) {
            return addressToString(request.headers["x-real-ip"]);
        }
        if (containsAddress("x-cluster-client-ip", request, headers)) {
            return addressToString(request.headers["x-cluster-client-ip"]);
        }
        if (containsAddress("x-forwarded", request, headers)) {
            return addressToString(request.headers["x-forwarded"]);
        }
        if (containsAddress("forwarded-for", request, headers)) {
            return addressToString(request.headers["forwarded-for"]);
        }
        if (containsAddress("forwarded", request, headers)) {
            return addressToString(request.headers.forwarded);
        }
    }
    if (request.connection) {
        if (ipaddr_js_1.isValid(request.connection.remoteAddress)) {
            return addressToString(request.connection.remoteAddress);
        }
        if (request.connection.socket && ipaddr_js_1.isValid(request.connection.socket.remoteAddress)) {
            return addressToString(request.connection.socket.remoteAddress);
        }
    }
    if (request.socket && ipaddr_js_1.isValid(request.socket.remoteAddress)) {
        return addressToString(request.socket.remoteAddress);
    }
    if (request.info && ipaddr_js_1.isValid(request.info.remoteAddress)) {
        return addressToString(request.info.remoteAddress);
    }
    if (request.ip && ipaddr_js_1.isValid(request.ip)) {
        return addressToString(request.ip);
    }
    if (request.requestContext &&
        request.requestContext.identity &&
        ipaddr_js_1.isValid(request.requestContext.identity.sourceIp)) {
        return addressToString(request.requestContext.identity.sourceIp);
    }
    return undefined;
}
exports.discover = discover;
//# sourceMappingURL=discover.js.map