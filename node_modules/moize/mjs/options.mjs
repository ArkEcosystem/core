// external dependencies
import { deepEqual, sameValueZeroEqual, shallowEqual } from "fast-equals/mjs"; // max args

import { createGetInitialArgs } from './maxArgs'; // serialize

import { getIsSerializedKeyEqual, getSerializerFunction } from './serialize'; // types

// utils
import { compose, getArrayKey } from './utils';
export var createOnCacheOperation = function createOnCacheOperation(fn) {
  if (typeof fn === 'function') {
    return function (cache, _microMemoizeOptions, memoized // $FlowIgnore fn is a function if this is hit
    ) {
      return fn(memoized.cache, memoized.options, memoized);
    };
  }
};
/**
 * @private
 *
 * @function getIsEqual
 *
 * @description
 * get the isEqual method passed to micro-memoize
 *
 * @param {Options} options the options passed to the moizer
 * @returns {function} the isEqual method to apply
 */

export var getIsEqual = function getIsEqual(_ref) {
  var equals = _ref.equals,
      isDeepEqual = _ref.isDeepEqual,
      isReact = _ref.isReact;
  return equals || isDeepEqual && deepEqual || isReact && shallowEqual || sameValueZeroEqual;
};
/**
 * @private
 *
 * @function getIsMatchingKey
 *
 * @description
 * get the isEqual method passed to micro-memoize
 *
 * @param {Options} options the options passed to the moizer
 * @returns {function} the isEqual method to apply
 */

export var getIsMatchingKey = function getIsMatchingKey(_ref2) {
  var isSerialized = _ref2.isSerialized,
      matchesKey = _ref2.matchesKey;
  return matchesKey || isSerialized && getIsSerializedKeyEqual || undefined;
};
/**
 * @private
 *
 * @function getTransformKey
 *
 * @description
 * get the function that will transform the key based on the arguments passed
 *
 * @param {Options} options the options passed to the moizer
 * @returns {function|void} the function to transform the key with
 */

export var getTransformKey = function getTransformKey(options) {
  var maxArgs = options.maxArgs,
      isReact = options.isReact,
      isSerialized = options.isSerialized,
      transformArgs = options.transformArgs;
  return compose(isSerialized && getSerializerFunction(options), typeof transformArgs === 'function' && compose(getArrayKey, transformArgs), isReact && createGetInitialArgs(2), typeof maxArgs === 'number' && createGetInitialArgs(maxArgs));
};