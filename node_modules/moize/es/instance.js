// external dependencies
import { orderByLru } from 'micro-memoize/es/utils'; // maxAge

import { clearExpiration } from './maxAge'; // stats

import { getStats, statsCache } from './stats'; // types

// utils
import { createFindKeyIndex } from './utils';
/**
 * @private
 *
 * @function addInstanceMethods
 *
 * @description
 * add methods to the moized fuction object that allow extra features
 *
 * @modifies {moized}
 *
 * @param {function} moized the memoized function
 * @returns {void}
 */

export var addInstanceMethods = function addInstanceMethods(moized, _ref) {
  var expirations = _ref.expirations;
  var _moized$options = moized.options,
      isEqual = _moized$options.isEqual,
      isMatchingKey = _moized$options.isMatchingKey,
      onCacheAdd = _moized$options.onCacheAdd,
      onCacheChange = _moized$options.onCacheChange,
      transformKey = _moized$options.transformKey;
  var findKeyIndex = createFindKeyIndex(isEqual, isMatchingKey);

  moized.add = function (key, value) {
    var savedKey = transformKey ? transformKey(key) : key;

    if (!~findKeyIndex(moized.cache.keys, savedKey)) {
      if (moized.cache.size >= moized.options.maxSize) {
        moized.cache.keys.pop();
        moized.cache.values.pop();
      }

      moized.cache.keys.unshift(savedKey);
      moized.cache.values.unshift(value);
      onCacheAdd(moized.cache, moized.options, moized);
      onCacheChange(moized.cache, moized.options, moized);
    }
  };

  moized.clear = function () {
    moized.cache.keys.length = 0;
    moized.cache.values.length = 0;
    onCacheChange(moized.cache, moized.options, moized);
  };

  moized.get = function (key) {
    var keyIndex = findKeyIndex(moized.cache.keys, transformKey ? transformKey(key) : key);
    return ~keyIndex ? moized.apply(this, moized.cache.keys[keyIndex]) : undefined; // eslint-disable-line prefer-spread
  };

  moized.getStats = function () {
    var profileName = moized.options.profileName;
    return getStats(profileName);
  };

  moized.has = function (key) {
    return !!~findKeyIndex(moized.cache.keys, transformKey ? transformKey(key) : key);
  };

  moized.keys = function () {
    return moized.cacheSnapshot.keys;
  };

  moized.remove = function (key) {
    var keyIndex = findKeyIndex(moized.cache.keys, transformKey ? transformKey(key) : key);

    if (~keyIndex) {
      var existingKey = moized.cache.keys[keyIndex];
      moized.cache.keys.splice(keyIndex, 1);
      moized.cache.values.splice(keyIndex, 1);
      onCacheChange(moized.cache, moized.options, moized);
      clearExpiration(expirations, existingKey, true);
    }
  };

  moized.update = function (key, value) {
    var keyIndex = findKeyIndex(moized.cache.keys, transformKey ? transformKey(key) : key);

    if (~keyIndex) {
      var existingKey = moized.cache.keys[keyIndex];
      orderByLru(moized.cache.keys, existingKey, keyIndex);
      orderByLru(moized.cache.values, value, keyIndex);
      onCacheChange(moized.cache, moized.options, moized);
    }
  };

  moized.values = function () {
    return moized.cacheSnapshot.values;
  };
};
/**
 * @private
 *
 * @function addInstanceMethods
 *
 * @description
 * add propeties to the moized fuction object that surfaces extra information
 *
 * @modifies {moized}
 *
 * @param {function} moized the memoized function
 * @param {Array<Expiration>} expirations the list of expirations for cache items
 * @param {Options} options the options passed to the moizer
 * @param {function} originalFunction the function that is being memoized
 * @returns {void}
 */

export var addInstanceProperties = function addInstanceProperties(moized, _ref2) {
  var expirations = _ref2.expirations,
      moizeOptions = _ref2.options,
      originalFunction = _ref2.originalFunction;
  var microMemoizeOptions = moized.options;
  Object.defineProperties(moized, {
    _microMemoizeOptions: {
      configurable: true,
      get: function get() {
        return microMemoizeOptions;
      }
    },
    expirations: {
      configurable: true,
      get: function get() {
        return expirations;
      }
    },
    expirationsSnapshot: {
      configurable: true,
      get: function get() {
        return expirations.slice(0);
      }
    },
    isCollectingStats: {
      configurable: true,
      get: function get() {
        return statsCache.isCollectingStats;
      }
    },
    isMoized: {
      configurable: true,
      get: function get() {
        return true;
      }
    },
    options: {
      configurable: true,
      get: function get() {
        return moizeOptions;
      }
    },
    originalFunction: {
      configurable: true,
      get: function get() {
        return originalFunction;
      }
    }
  });

  if (moizeOptions.isReact) {
    moized.contextTypes = originalFunction.contextTypes;
    moized.defaultProps = originalFunction.defaultProps;
    moized.displayName = "Moized(" + (originalFunction.displayName || originalFunction.name || 'Component') + ")";
    moized.propTypes = originalFunction.propTypes;
  }
};
/**
 * @private
 *
 * @function augmentMoizeInstance
 *
 * @description
 * add methods and properties to the memoized function for more features
 *
 * @param {function} moized the memoized function
 * @param {Object} configuration the configuration object for the instance
 * @returns {function} the memoized function passed
 */

export var augmentMoizeInstance = function augmentMoizeInstance(moized, configuration) {
  addInstanceMethods(moized, configuration);
  addInstanceProperties(moized, configuration);
  return moized;
};