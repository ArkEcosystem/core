import { Url, Headers, EndpointRequestOptions } from "../types";
export interface Routes {
    "DELETE /app/installations/:installation_id": [AppsDeleteInstallationEndpoint, AppsDeleteInstallationRequestOptions];
    "DELETE /applications/:client_id/grants/:access_token": [OauthAuthorizationsRevokeGrantForApplicationEndpoint, OauthAuthorizationsRevokeGrantForApplicationRequestOptions];
    "DELETE /applications/:client_id/tokens/:access_token": [OauthAuthorizationsRevokeAuthorizationForApplicationEndpoint, OauthAuthorizationsRevokeAuthorizationForApplicationRequestOptions];
    "DELETE /applications/grants/:grant_id": [OauthAuthorizationsDeleteGrantEndpoint, OauthAuthorizationsDeleteGrantRequestOptions];
    "DELETE /authorizations/:authorization_id": [OauthAuthorizationsDeleteAuthorizationEndpoint, OauthAuthorizationsDeleteAuthorizationRequestOptions];
    "DELETE /gists/:gist_id": [GistsDeleteEndpoint, GistsDeleteRequestOptions];
    "DELETE /gists/:gist_id/comments/:comment_id": [GistsDeleteCommentEndpoint, GistsDeleteCommentRequestOptions];
    "DELETE /gists/:gist_id/star": [GistsUnstarEndpoint, GistsUnstarRequestOptions];
    "DELETE /notifications/threads/:thread_id/subscription": [ActivityDeleteThreadSubscriptionEndpoint, ActivityDeleteThreadSubscriptionRequestOptions];
    "DELETE /orgs/:org/blocks/:username": [OrgsUnblockUserEndpoint, OrgsUnblockUserRequestOptions];
    "DELETE /orgs/:org/credential-authorizations/:credential_id": [OrgsRemoveCredentialAuthorizationEndpoint, OrgsRemoveCredentialAuthorizationRequestOptions];
    "DELETE /orgs/:org/hooks/:hook_id": [OrgsDeleteHookEndpoint, OrgsDeleteHookRequestOptions];
    "DELETE /orgs/:org/interaction-limits": [InteractionsRemoveRestrictionsForOrgEndpoint, InteractionsRemoveRestrictionsForOrgRequestOptions];
    "DELETE /orgs/:org/members/:username": [OrgsRemoveMemberEndpoint, OrgsRemoveMemberRequestOptions];
    "DELETE /orgs/:org/memberships/:username": [OrgsRemoveMembershipEndpoint, OrgsRemoveMembershipRequestOptions];
    "DELETE /orgs/:org/migrations/:migration_id/archive": [MigrationsDeleteArchiveForOrgEndpoint, MigrationsDeleteArchiveForOrgRequestOptions];
    "DELETE /orgs/:org/migrations/:migration_id/repos/:repo_name/lock": [MigrationsUnlockRepoForOrgEndpoint, MigrationsUnlockRepoForOrgRequestOptions];
    "DELETE /orgs/:org/outside_collaborators/:username": [OrgsRemoveOutsideCollaboratorEndpoint, OrgsRemoveOutsideCollaboratorRequestOptions];
    "DELETE /orgs/:org/public_members/:username": [OrgsConcealMembershipEndpoint, OrgsConcealMembershipRequestOptions];
    "DELETE /projects/:project_id": [ProjectsDeleteEndpoint, ProjectsDeleteRequestOptions];
    "DELETE /projects/:project_id/collaborators/:username": [ProjectsRemoveCollaboratorEndpoint, ProjectsRemoveCollaboratorRequestOptions];
    "DELETE /projects/columns/:column_id": [ProjectsDeleteColumnEndpoint, ProjectsDeleteColumnRequestOptions];
    "DELETE /projects/columns/cards/:card_id": [ProjectsDeleteCardEndpoint, ProjectsDeleteCardRequestOptions];
    "DELETE /reactions/:reaction_id": [ReactionsDeleteEndpoint, ReactionsDeleteRequestOptions];
    "DELETE /repos/:owner/:repo": [ReposDeleteEndpoint, ReposDeleteRequestOptions];
    "DELETE /repos/:owner/:repo/automated-security-fixes": [ReposDisableAutomatedSecurityFixesEndpoint, ReposDisableAutomatedSecurityFixesRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection": [ReposRemoveBranchProtectionEndpoint, ReposRemoveBranchProtectionRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [ReposRemoveProtectedBranchAdminEnforcementEndpoint, ReposRemoveProtectedBranchAdminEnforcementRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [ReposRemoveProtectedBranchPullRequestReviewEnforcementEndpoint, ReposRemoveProtectedBranchPullRequestReviewEnforcementRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/required_signatures": [ReposRemoveProtectedBranchRequiredSignaturesEndpoint, ReposRemoveProtectedBranchRequiredSignaturesRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [ReposRemoveProtectedBranchRequiredStatusChecksEndpoint, ReposRemoveProtectedBranchRequiredStatusChecksRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [ReposRemoveProtectedBranchRequiredStatusChecksContextsEndpoint, ReposRemoveProtectedBranchRequiredStatusChecksContextsRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions": [ReposRemoveProtectedBranchRestrictionsEndpoint, ReposRemoveProtectedBranchRestrictionsRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [ReposRemoveProtectedBranchAppRestrictionsEndpoint, ReposRemoveProtectedBranchAppRestrictionsRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [ReposRemoveProtectedBranchTeamRestrictionsEndpoint, ReposRemoveProtectedBranchTeamRestrictionsRequestOptions];
    "DELETE /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [ReposRemoveProtectedBranchUserRestrictionsEndpoint, ReposRemoveProtectedBranchUserRestrictionsRequestOptions];
    "DELETE /repos/:owner/:repo/collaborators/:username": [ReposRemoveCollaboratorEndpoint, ReposRemoveCollaboratorRequestOptions];
    "DELETE /repos/:owner/:repo/comments/:comment_id": [ReposDeleteCommitCommentEndpoint, ReposDeleteCommitCommentRequestOptions];
    "DELETE /repos/:owner/:repo/contents/:path": [ReposDeleteFileEndpoint, ReposDeleteFileRequestOptions];
    "DELETE /repos/:owner/:repo/downloads/:download_id": [ReposDeleteDownloadEndpoint, ReposDeleteDownloadRequestOptions];
    "DELETE /repos/:owner/:repo/git/refs/:ref": [GitDeleteRefEndpoint, GitDeleteRefRequestOptions];
    "DELETE /repos/:owner/:repo/hooks/:hook_id": [ReposDeleteHookEndpoint, ReposDeleteHookRequestOptions];
    "DELETE /repos/:owner/:repo/import": [MigrationsCancelImportEndpoint, MigrationsCancelImportRequestOptions];
    "DELETE /repos/:owner/:repo/interaction-limits": [InteractionsRemoveRestrictionsForRepoEndpoint, InteractionsRemoveRestrictionsForRepoRequestOptions];
    "DELETE /repos/:owner/:repo/invitations/:invitation_id": [ReposDeleteInvitationEndpoint, ReposDeleteInvitationRequestOptions];
    "DELETE /repos/:owner/:repo/issues/:issue_number/assignees": [IssuesRemoveAssigneesEndpoint, IssuesRemoveAssigneesRequestOptions];
    "DELETE /repos/:owner/:repo/issues/:issue_number/labels": [IssuesRemoveLabelsEndpoint, IssuesRemoveLabelsRequestOptions];
    "DELETE /repos/:owner/:repo/issues/:issue_number/labels/:name": [IssuesRemoveLabelEndpoint, IssuesRemoveLabelRequestOptions];
    "DELETE /repos/:owner/:repo/issues/:issue_number/lock": [IssuesUnlockEndpoint, IssuesUnlockRequestOptions];
    "DELETE /repos/:owner/:repo/issues/comments/:comment_id": [IssuesDeleteCommentEndpoint, IssuesDeleteCommentRequestOptions];
    "DELETE /repos/:owner/:repo/keys/:key_id": [ReposRemoveDeployKeyEndpoint, ReposRemoveDeployKeyRequestOptions];
    "DELETE /repos/:owner/:repo/labels/:name": [IssuesDeleteLabelEndpoint, IssuesDeleteLabelRequestOptions];
    "DELETE /repos/:owner/:repo/milestones/:milestone_number": [IssuesDeleteMilestoneEndpoint, IssuesDeleteMilestoneRequestOptions];
    "DELETE /repos/:owner/:repo/pages": [ReposDisablePagesSiteEndpoint, ReposDisablePagesSiteRequestOptions];
    "DELETE /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [PullsDeleteReviewRequestEndpoint, PullsDeleteReviewRequestRequestOptions];
    "DELETE /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [PullsDeletePendingReviewEndpoint, PullsDeletePendingReviewRequestOptions];
    "DELETE /repos/:owner/:repo/pulls/comments/:comment_id": [PullsDeleteCommentEndpoint, PullsDeleteCommentRequestOptions];
    "DELETE /repos/:owner/:repo/releases/:release_id": [ReposDeleteReleaseEndpoint, ReposDeleteReleaseRequestOptions];
    "DELETE /repos/:owner/:repo/releases/assets/:asset_id": [ReposDeleteReleaseAssetEndpoint, ReposDeleteReleaseAssetRequestOptions];
    "DELETE /repos/:owner/:repo/subscription": [ActivityDeleteRepoSubscriptionEndpoint, ActivityDeleteRepoSubscriptionRequestOptions];
    "DELETE /repos/:owner/:repo/vulnerability-alerts": [ReposDisableVulnerabilityAlertsEndpoint, ReposDisableVulnerabilityAlertsRequestOptions];
    "DELETE /scim/v2/organizations/:org/Users/:scim_user_id": [ScimRemoveUserFromOrgEndpoint, ScimRemoveUserFromOrgRequestOptions];
    "DELETE /teams/:team_id": [TeamsDeleteEndpoint, TeamsDeleteRequestOptions];
    "DELETE /teams/:team_id/discussions/:discussion_number": [TeamsDeleteDiscussionEndpoint, TeamsDeleteDiscussionRequestOptions];
    "DELETE /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [TeamsDeleteDiscussionCommentEndpoint, TeamsDeleteDiscussionCommentRequestOptions];
    "DELETE /teams/:team_id/members/:username": [TeamsRemoveMemberEndpoint, TeamsRemoveMemberRequestOptions];
    "DELETE /teams/:team_id/memberships/:username": [TeamsRemoveMembershipEndpoint, TeamsRemoveMembershipRequestOptions];
    "DELETE /teams/:team_id/projects/:project_id": [TeamsRemoveProjectEndpoint, TeamsRemoveProjectRequestOptions];
    "DELETE /teams/:team_id/repos/:owner/:repo": [TeamsRemoveRepoEndpoint, TeamsRemoveRepoRequestOptions];
    "DELETE /user/blocks/:username": [UsersUnblockEndpoint, UsersUnblockRequestOptions];
    "DELETE /user/emails": [UsersDeleteEmailsEndpoint, UsersDeleteEmailsRequestOptions];
    "DELETE /user/following/:username": [UsersUnfollowEndpoint, UsersUnfollowRequestOptions];
    "DELETE /user/gpg_keys/:gpg_key_id": [UsersDeleteGpgKeyEndpoint, UsersDeleteGpgKeyRequestOptions];
    "DELETE /user/installations/:installation_id/repositories/:repository_id": [AppsRemoveRepoFromInstallationEndpoint, AppsRemoveRepoFromInstallationRequestOptions];
    "DELETE /user/keys/:key_id": [UsersDeletePublicKeyEndpoint, UsersDeletePublicKeyRequestOptions];
    "DELETE /user/migrations/:migration_id/archive": [MigrationsDeleteArchiveForAuthenticatedUserEndpoint, MigrationsDeleteArchiveForAuthenticatedUserRequestOptions];
    "DELETE /user/migrations/:migration_id/repos/:repo_name/lock": [MigrationsUnlockRepoForAuthenticatedUserEndpoint, MigrationsUnlockRepoForAuthenticatedUserRequestOptions];
    "DELETE /user/repository_invitations/:invitation_id": [ReposDeclineInvitationEndpoint, ReposDeclineInvitationRequestOptions];
    "DELETE /user/starred/:owner/:repo": [ActivityUnstarRepoEndpoint, ActivityUnstarRepoRequestOptions];
    "DELETE /user/subscriptions/:owner/:repo": [ActivityStopWatchingRepoLegacyEndpoint, ActivityStopWatchingRepoLegacyRequestOptions];
    "GET /app": [AppsGetAuthenticatedEndpoint, AppsGetAuthenticatedRequestOptions];
    "GET /app/installations": [AppsListInstallationsEndpoint, AppsListInstallationsRequestOptions];
    "GET /app/installations/:installation_id": [AppsGetInstallationEndpoint, AppsGetInstallationRequestOptions];
    "GET /applications/:client_id/tokens/:access_token": [OauthAuthorizationsCheckAuthorizationEndpoint, OauthAuthorizationsCheckAuthorizationRequestOptions];
    "GET /applications/grants": [OauthAuthorizationsListGrantsEndpoint, OauthAuthorizationsListGrantsRequestOptions];
    "GET /applications/grants/:grant_id": [OauthAuthorizationsGetGrantEndpoint, OauthAuthorizationsGetGrantRequestOptions];
    "GET /apps/:app_slug": [AppsGetBySlugEndpoint, AppsGetBySlugRequestOptions];
    "GET /authorizations": [OauthAuthorizationsListAuthorizationsEndpoint, OauthAuthorizationsListAuthorizationsRequestOptions];
    "GET /authorizations/:authorization_id": [OauthAuthorizationsGetAuthorizationEndpoint, OauthAuthorizationsGetAuthorizationRequestOptions];
    "GET /codes_of_conduct": [CodesOfConductListConductCodesEndpoint, CodesOfConductListConductCodesRequestOptions];
    "GET /codes_of_conduct/:key": [CodesOfConductGetConductCodeEndpoint, CodesOfConductGetConductCodeRequestOptions];
    "GET /emojis": [EmojisGetEndpoint, EmojisGetRequestOptions];
    "GET /events": [ActivityListPublicEventsEndpoint, ActivityListPublicEventsRequestOptions];
    "GET /feeds": [ActivityListFeedsEndpoint, ActivityListFeedsRequestOptions];
    "GET /gists": [GistsListEndpoint, GistsListRequestOptions];
    "GET /gists/:gist_id": [GistsGetEndpoint, GistsGetRequestOptions];
    "GET /gists/:gist_id/:sha": [GistsGetRevisionEndpoint, GistsGetRevisionRequestOptions];
    "GET /gists/:gist_id/comments": [GistsListCommentsEndpoint, GistsListCommentsRequestOptions];
    "GET /gists/:gist_id/comments/:comment_id": [GistsGetCommentEndpoint, GistsGetCommentRequestOptions];
    "GET /gists/:gist_id/commits": [GistsListCommitsEndpoint, GistsListCommitsRequestOptions];
    "GET /gists/:gist_id/forks": [GistsListForksEndpoint, GistsListForksRequestOptions];
    "GET /gists/:gist_id/star": [GistsCheckIsStarredEndpoint, GistsCheckIsStarredRequestOptions];
    "GET /gists/public": [GistsListPublicEndpoint, GistsListPublicRequestOptions];
    "GET /gists/starred": [GistsListStarredEndpoint, GistsListStarredRequestOptions];
    "GET /gitignore/templates": [GitignoreListTemplatesEndpoint, GitignoreListTemplatesRequestOptions];
    "GET /gitignore/templates/:name": [GitignoreGetTemplateEndpoint, GitignoreGetTemplateRequestOptions];
    "GET /installation/repositories": [AppsListReposEndpoint, AppsListReposRequestOptions];
    "GET /issues": [IssuesListEndpoint, IssuesListRequestOptions];
    "GET /legacy/issues/search/:owner/:repository/:state/:keyword": [SearchIssuesLegacyEndpoint, SearchIssuesLegacyRequestOptions];
    "GET /legacy/repos/search/:keyword": [SearchReposLegacyEndpoint, SearchReposLegacyRequestOptions];
    "GET /legacy/user/email/:email": [SearchEmailLegacyEndpoint, SearchEmailLegacyRequestOptions];
    "GET /legacy/user/search/:keyword": [SearchUsersLegacyEndpoint, SearchUsersLegacyRequestOptions];
    "GET /licenses": [LicensesListCommonlyUsedEndpoint | LicensesListEndpoint, LicensesListCommonlyUsedRequestOptions | LicensesListRequestOptions];
    "GET /licenses/:license": [LicensesGetEndpoint, LicensesGetRequestOptions];
    "GET /marketplace_listing/accounts/:account_id": [AppsCheckAccountIsAssociatedWithAnyEndpoint, AppsCheckAccountIsAssociatedWithAnyRequestOptions];
    "GET /marketplace_listing/plans": [AppsListPlansEndpoint, AppsListPlansRequestOptions];
    "GET /marketplace_listing/plans/:plan_id/accounts": [AppsListAccountsUserOrOrgOnPlanEndpoint, AppsListAccountsUserOrOrgOnPlanRequestOptions];
    "GET /marketplace_listing/stubbed/accounts/:account_id": [AppsCheckAccountIsAssociatedWithAnyStubbedEndpoint, AppsCheckAccountIsAssociatedWithAnyStubbedRequestOptions];
    "GET /marketplace_listing/stubbed/plans": [AppsListPlansStubbedEndpoint, AppsListPlansStubbedRequestOptions];
    "GET /marketplace_listing/stubbed/plans/:plan_id/accounts": [AppsListAccountsUserOrOrgOnPlanStubbedEndpoint, AppsListAccountsUserOrOrgOnPlanStubbedRequestOptions];
    "GET /meta": [MetaGetEndpoint, MetaGetRequestOptions];
    "GET /networks/:owner/:repo/events": [ActivityListPublicEventsForRepoNetworkEndpoint, ActivityListPublicEventsForRepoNetworkRequestOptions];
    "GET /notifications": [ActivityListNotificationsEndpoint, ActivityListNotificationsRequestOptions];
    "GET /notifications/threads/:thread_id": [ActivityGetThreadEndpoint, ActivityGetThreadRequestOptions];
    "GET /notifications/threads/:thread_id/subscription": [ActivityGetThreadSubscriptionEndpoint, ActivityGetThreadSubscriptionRequestOptions];
    "GET /organizations": [OrgsListEndpoint, OrgsListRequestOptions];
    "GET /orgs/:org": [OrgsGetEndpoint, OrgsGetRequestOptions];
    "GET /orgs/:org/blocks": [OrgsListBlockedUsersEndpoint, OrgsListBlockedUsersRequestOptions];
    "GET /orgs/:org/blocks/:username": [OrgsCheckBlockedUserEndpoint, OrgsCheckBlockedUserRequestOptions];
    "GET /orgs/:org/credential-authorizations": [OrgsListCredentialAuthorizationsEndpoint, OrgsListCredentialAuthorizationsRequestOptions];
    "GET /orgs/:org/events": [ActivityListPublicEventsForOrgEndpoint, ActivityListPublicEventsForOrgRequestOptions];
    "GET /orgs/:org/hooks": [OrgsListHooksEndpoint, OrgsListHooksRequestOptions];
    "GET /orgs/:org/hooks/:hook_id": [OrgsGetHookEndpoint, OrgsGetHookRequestOptions];
    "GET /orgs/:org/installation": [AppsGetOrgInstallationEndpoint | AppsFindOrgInstallationEndpoint, AppsGetOrgInstallationRequestOptions | AppsFindOrgInstallationRequestOptions];
    "GET /orgs/:org/interaction-limits": [InteractionsGetRestrictionsForOrgEndpoint, InteractionsGetRestrictionsForOrgRequestOptions];
    "GET /orgs/:org/invitations": [OrgsListPendingInvitationsEndpoint, OrgsListPendingInvitationsRequestOptions];
    "GET /orgs/:org/invitations/:invitation_id/teams": [OrgsListInvitationTeamsEndpoint, OrgsListInvitationTeamsRequestOptions];
    "GET /orgs/:org/issues": [IssuesListForOrgEndpoint, IssuesListForOrgRequestOptions];
    "GET /orgs/:org/members": [OrgsListMembersEndpoint, OrgsListMembersRequestOptions];
    "GET /orgs/:org/members/:username": [OrgsCheckMembershipEndpoint, OrgsCheckMembershipRequestOptions];
    "GET /orgs/:org/memberships/:username": [OrgsGetMembershipEndpoint, OrgsGetMembershipRequestOptions];
    "GET /orgs/:org/migrations": [MigrationsListForOrgEndpoint, MigrationsListForOrgRequestOptions];
    "GET /orgs/:org/migrations/:migration_id": [MigrationsGetStatusForOrgEndpoint, MigrationsGetStatusForOrgRequestOptions];
    "GET /orgs/:org/migrations/:migration_id/archive": [MigrationsGetArchiveForOrgEndpoint, MigrationsGetArchiveForOrgRequestOptions];
    "GET /orgs/:org/outside_collaborators": [OrgsListOutsideCollaboratorsEndpoint, OrgsListOutsideCollaboratorsRequestOptions];
    "GET /orgs/:org/projects": [ProjectsListForOrgEndpoint, ProjectsListForOrgRequestOptions];
    "GET /orgs/:org/public_members": [OrgsListPublicMembersEndpoint, OrgsListPublicMembersRequestOptions];
    "GET /orgs/:org/public_members/:username": [OrgsCheckPublicMembershipEndpoint, OrgsCheckPublicMembershipRequestOptions];
    "GET /orgs/:org/repos": [ReposListForOrgEndpoint, ReposListForOrgRequestOptions];
    "GET /orgs/:org/team-sync/groups": [TeamsListIdPGroupsForOrgEndpoint, TeamsListIdPGroupsForOrgRequestOptions];
    "GET /orgs/:org/teams": [TeamsListEndpoint, TeamsListRequestOptions];
    "GET /orgs/:org/teams/:team_slug": [TeamsGetByNameEndpoint, TeamsGetByNameRequestOptions];
    "GET /projects/:project_id": [ProjectsGetEndpoint, ProjectsGetRequestOptions];
    "GET /projects/:project_id/collaborators": [ProjectsListCollaboratorsEndpoint, ProjectsListCollaboratorsRequestOptions];
    "GET /projects/:project_id/collaborators/:username/permission": [ProjectsReviewUserPermissionLevelEndpoint, ProjectsReviewUserPermissionLevelRequestOptions];
    "GET /projects/:project_id/columns": [ProjectsListColumnsEndpoint, ProjectsListColumnsRequestOptions];
    "GET /projects/columns/:column_id": [ProjectsGetColumnEndpoint, ProjectsGetColumnRequestOptions];
    "GET /projects/columns/:column_id/cards": [ProjectsListCardsEndpoint, ProjectsListCardsRequestOptions];
    "GET /projects/columns/cards/:card_id": [ProjectsGetCardEndpoint, ProjectsGetCardRequestOptions];
    "GET /rate_limit": [RateLimitGetEndpoint, RateLimitGetRequestOptions];
    "GET /repos/:owner/:repo": [ReposGetEndpoint, ReposGetRequestOptions];
    "GET /repos/:owner/:repo/:archive_format/:ref": [ReposGetArchiveLinkEndpoint, ReposGetArchiveLinkRequestOptions];
    "GET /repos/:owner/:repo/assignees": [IssuesListAssigneesEndpoint, IssuesListAssigneesRequestOptions];
    "GET /repos/:owner/:repo/assignees/:assignee": [IssuesCheckAssigneeEndpoint, IssuesCheckAssigneeRequestOptions];
    "GET /repos/:owner/:repo/branches": [ReposListBranchesEndpoint, ReposListBranchesRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch": [ReposGetBranchEndpoint, ReposGetBranchRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection": [ReposGetBranchProtectionEndpoint, ReposGetBranchProtectionRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [ReposGetProtectedBranchAdminEnforcementEndpoint, ReposGetProtectedBranchAdminEnforcementRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [ReposGetProtectedBranchPullRequestReviewEnforcementEndpoint, ReposGetProtectedBranchPullRequestReviewEnforcementRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/required_signatures": [ReposGetProtectedBranchRequiredSignaturesEndpoint, ReposGetProtectedBranchRequiredSignaturesRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [ReposGetProtectedBranchRequiredStatusChecksEndpoint, ReposGetProtectedBranchRequiredStatusChecksRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [ReposListProtectedBranchRequiredStatusChecksContextsEndpoint, ReposListProtectedBranchRequiredStatusChecksContextsRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/restrictions": [ReposGetProtectedBranchRestrictionsEndpoint, ReposGetProtectedBranchRestrictionsRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [ReposGetAppsWithAccessToProtectedBranchEndpoint | ReposListAppsWithAccessToProtectedBranchEndpoint, ReposGetAppsWithAccessToProtectedBranchRequestOptions | ReposListAppsWithAccessToProtectedBranchRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [ReposGetTeamsWithAccessToProtectedBranchEndpoint | ReposListProtectedBranchTeamRestrictionsEndpoint | ReposListTeamsWithAccessToProtectedBranchEndpoint, ReposGetTeamsWithAccessToProtectedBranchRequestOptions | ReposListProtectedBranchTeamRestrictionsRequestOptions | ReposListTeamsWithAccessToProtectedBranchRequestOptions];
    "GET /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [ReposGetUsersWithAccessToProtectedBranchEndpoint | ReposListProtectedBranchUserRestrictionsEndpoint | ReposListUsersWithAccessToProtectedBranchEndpoint, ReposGetUsersWithAccessToProtectedBranchRequestOptions | ReposListProtectedBranchUserRestrictionsRequestOptions | ReposListUsersWithAccessToProtectedBranchRequestOptions];
    "GET /repos/:owner/:repo/check-runs/:check_run_id": [ChecksGetEndpoint, ChecksGetRequestOptions];
    "GET /repos/:owner/:repo/check-runs/:check_run_id/annotations": [ChecksListAnnotationsEndpoint, ChecksListAnnotationsRequestOptions];
    "GET /repos/:owner/:repo/check-suites/:check_suite_id": [ChecksGetSuiteEndpoint, ChecksGetSuiteRequestOptions];
    "GET /repos/:owner/:repo/check-suites/:check_suite_id/check-runs": [ChecksListForSuiteEndpoint, ChecksListForSuiteRequestOptions];
    "GET /repos/:owner/:repo/collaborators": [ReposListCollaboratorsEndpoint, ReposListCollaboratorsRequestOptions];
    "GET /repos/:owner/:repo/collaborators/:username": [ReposCheckCollaboratorEndpoint, ReposCheckCollaboratorRequestOptions];
    "GET /repos/:owner/:repo/collaborators/:username/permission": [ReposGetCollaboratorPermissionLevelEndpoint, ReposGetCollaboratorPermissionLevelRequestOptions];
    "GET /repos/:owner/:repo/comments": [ReposListCommitCommentsEndpoint, ReposListCommitCommentsRequestOptions];
    "GET /repos/:owner/:repo/comments/:comment_id": [ReposGetCommitCommentEndpoint, ReposGetCommitCommentRequestOptions];
    "GET /repos/:owner/:repo/comments/:comment_id/reactions": [ReactionsListForCommitCommentEndpoint, ReactionsListForCommitCommentRequestOptions];
    "GET /repos/:owner/:repo/commits": [ReposListCommitsEndpoint, ReposListCommitsRequestOptions];
    "GET /repos/:owner/:repo/commits/:commit_sha/branches-where-head": [ReposListBranchesForHeadCommitEndpoint, ReposListBranchesForHeadCommitRequestOptions];
    "GET /repos/:owner/:repo/commits/:commit_sha/comments": [ReposListCommentsForCommitEndpoint, ReposListCommentsForCommitRequestOptions];
    "GET /repos/:owner/:repo/commits/:commit_sha/pulls": [ReposListPullRequestsAssociatedWithCommitEndpoint, ReposListPullRequestsAssociatedWithCommitRequestOptions];
    "GET /repos/:owner/:repo/commits/:ref": [ReposGetCommitEndpoint, ReposGetCommitRequestOptions];
    "GET /repos/:owner/:repo/commits/:ref/check-runs": [ChecksListForRefEndpoint, ChecksListForRefRequestOptions];
    "GET /repos/:owner/:repo/commits/:ref/check-suites": [ChecksListSuitesForRefEndpoint, ChecksListSuitesForRefRequestOptions];
    "GET /repos/:owner/:repo/commits/:ref/status": [ReposGetCombinedStatusForRefEndpoint, ReposGetCombinedStatusForRefRequestOptions];
    "GET /repos/:owner/:repo/commits/:ref/statuses": [ReposListStatusesForRefEndpoint, ReposListStatusesForRefRequestOptions];
    "GET /repos/:owner/:repo/community/code_of_conduct": [CodesOfConductGetForRepoEndpoint, CodesOfConductGetForRepoRequestOptions];
    "GET /repos/:owner/:repo/community/profile": [ReposRetrieveCommunityProfileMetricsEndpoint, ReposRetrieveCommunityProfileMetricsRequestOptions];
    "GET /repos/:owner/:repo/compare/:base...:head": [ReposCompareCommitsEndpoint, ReposCompareCommitsRequestOptions];
    "GET /repos/:owner/:repo/contents/:path": [ReposGetContentsEndpoint, ReposGetContentsRequestOptions];
    "GET /repos/:owner/:repo/contributors": [ReposListContributorsEndpoint, ReposListContributorsRequestOptions];
    "GET /repos/:owner/:repo/deployments": [ReposListDeploymentsEndpoint, ReposListDeploymentsRequestOptions];
    "GET /repos/:owner/:repo/deployments/:deployment_id": [ReposGetDeploymentEndpoint, ReposGetDeploymentRequestOptions];
    "GET /repos/:owner/:repo/deployments/:deployment_id/statuses": [ReposListDeploymentStatusesEndpoint, ReposListDeploymentStatusesRequestOptions];
    "GET /repos/:owner/:repo/deployments/:deployment_id/statuses/:status_id": [ReposGetDeploymentStatusEndpoint, ReposGetDeploymentStatusRequestOptions];
    "GET /repos/:owner/:repo/downloads": [ReposListDownloadsEndpoint, ReposListDownloadsRequestOptions];
    "GET /repos/:owner/:repo/downloads/:download_id": [ReposGetDownloadEndpoint, ReposGetDownloadRequestOptions];
    "GET /repos/:owner/:repo/events": [ActivityListRepoEventsEndpoint, ActivityListRepoEventsRequestOptions];
    "GET /repos/:owner/:repo/forks": [ReposListForksEndpoint, ReposListForksRequestOptions];
    "GET /repos/:owner/:repo/git/blobs/:file_sha": [GitGetBlobEndpoint, GitGetBlobRequestOptions];
    "GET /repos/:owner/:repo/git/commits/:commit_sha": [GitGetCommitEndpoint, GitGetCommitRequestOptions];
    "GET /repos/:owner/:repo/git/matching-refs/:ref": [GitListMatchingRefsEndpoint, GitListMatchingRefsRequestOptions];
    "GET /repos/:owner/:repo/git/ref/:ref": [GitGetRefEndpoint, GitGetRefRequestOptions];
    "GET /repos/:owner/:repo/git/tags/:tag_sha": [GitGetTagEndpoint, GitGetTagRequestOptions];
    "GET /repos/:owner/:repo/git/trees/:tree_sha": [GitGetTreeEndpoint, GitGetTreeRequestOptions];
    "GET /repos/:owner/:repo/hooks": [ReposListHooksEndpoint, ReposListHooksRequestOptions];
    "GET /repos/:owner/:repo/hooks/:hook_id": [ReposGetHookEndpoint, ReposGetHookRequestOptions];
    "GET /repos/:owner/:repo/import": [MigrationsGetImportProgressEndpoint, MigrationsGetImportProgressRequestOptions];
    "GET /repos/:owner/:repo/import/authors": [MigrationsGetCommitAuthorsEndpoint, MigrationsGetCommitAuthorsRequestOptions];
    "GET /repos/:owner/:repo/import/large_files": [MigrationsGetLargeFilesEndpoint, MigrationsGetLargeFilesRequestOptions];
    "GET /repos/:owner/:repo/installation": [AppsGetRepoInstallationEndpoint | AppsFindRepoInstallationEndpoint, AppsGetRepoInstallationRequestOptions | AppsFindRepoInstallationRequestOptions];
    "GET /repos/:owner/:repo/interaction-limits": [InteractionsGetRestrictionsForRepoEndpoint, InteractionsGetRestrictionsForRepoRequestOptions];
    "GET /repos/:owner/:repo/invitations": [ReposListInvitationsEndpoint, ReposListInvitationsRequestOptions];
    "GET /repos/:owner/:repo/issues": [IssuesListForRepoEndpoint, IssuesListForRepoRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number": [IssuesGetEndpoint, IssuesGetRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number/comments": [IssuesListCommentsEndpoint, IssuesListCommentsRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number/events": [IssuesListEventsEndpoint, IssuesListEventsRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number/labels": [IssuesListLabelsOnIssueEndpoint, IssuesListLabelsOnIssueRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number/reactions": [ReactionsListForIssueEndpoint, ReactionsListForIssueRequestOptions];
    "GET /repos/:owner/:repo/issues/:issue_number/timeline": [IssuesListEventsForTimelineEndpoint, IssuesListEventsForTimelineRequestOptions];
    "GET /repos/:owner/:repo/issues/comments": [IssuesListCommentsForRepoEndpoint, IssuesListCommentsForRepoRequestOptions];
    "GET /repos/:owner/:repo/issues/comments/:comment_id": [IssuesGetCommentEndpoint, IssuesGetCommentRequestOptions];
    "GET /repos/:owner/:repo/issues/comments/:comment_id/reactions": [ReactionsListForIssueCommentEndpoint, ReactionsListForIssueCommentRequestOptions];
    "GET /repos/:owner/:repo/issues/events": [IssuesListEventsForRepoEndpoint, IssuesListEventsForRepoRequestOptions];
    "GET /repos/:owner/:repo/issues/events/:event_id": [IssuesGetEventEndpoint, IssuesGetEventRequestOptions];
    "GET /repos/:owner/:repo/keys": [ReposListDeployKeysEndpoint, ReposListDeployKeysRequestOptions];
    "GET /repos/:owner/:repo/keys/:key_id": [ReposGetDeployKeyEndpoint, ReposGetDeployKeyRequestOptions];
    "GET /repos/:owner/:repo/labels": [IssuesListLabelsForRepoEndpoint, IssuesListLabelsForRepoRequestOptions];
    "GET /repos/:owner/:repo/labels/:name": [IssuesGetLabelEndpoint, IssuesGetLabelRequestOptions];
    "GET /repos/:owner/:repo/languages": [ReposListLanguagesEndpoint, ReposListLanguagesRequestOptions];
    "GET /repos/:owner/:repo/license": [LicensesGetForRepoEndpoint, LicensesGetForRepoRequestOptions];
    "GET /repos/:owner/:repo/milestones": [IssuesListMilestonesForRepoEndpoint, IssuesListMilestonesForRepoRequestOptions];
    "GET /repos/:owner/:repo/milestones/:milestone_number": [IssuesGetMilestoneEndpoint, IssuesGetMilestoneRequestOptions];
    "GET /repos/:owner/:repo/milestones/:milestone_number/labels": [IssuesListLabelsForMilestoneEndpoint, IssuesListLabelsForMilestoneRequestOptions];
    "GET /repos/:owner/:repo/notifications": [ActivityListNotificationsForRepoEndpoint, ActivityListNotificationsForRepoRequestOptions];
    "GET /repos/:owner/:repo/pages": [ReposGetPagesEndpoint, ReposGetPagesRequestOptions];
    "GET /repos/:owner/:repo/pages/builds": [ReposListPagesBuildsEndpoint, ReposListPagesBuildsRequestOptions];
    "GET /repos/:owner/:repo/pages/builds/:build_id": [ReposGetPagesBuildEndpoint, ReposGetPagesBuildRequestOptions];
    "GET /repos/:owner/:repo/pages/builds/latest": [ReposGetLatestPagesBuildEndpoint, ReposGetLatestPagesBuildRequestOptions];
    "GET /repos/:owner/:repo/projects": [ProjectsListForRepoEndpoint, ProjectsListForRepoRequestOptions];
    "GET /repos/:owner/:repo/pulls": [PullsListEndpoint, PullsListRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number": [PullsGetEndpoint, PullsGetRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/comments": [PullsListCommentsEndpoint, PullsListCommentsRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/commits": [PullsListCommitsEndpoint, PullsListCommitsRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/files": [PullsListFilesEndpoint, PullsListFilesRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/merge": [PullsCheckIfMergedEndpoint, PullsCheckIfMergedRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [PullsListReviewRequestsEndpoint, PullsListReviewRequestsRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/reviews": [PullsListReviewsEndpoint, PullsListReviewsRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [PullsGetReviewEndpoint, PullsGetReviewRequestOptions];
    "GET /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/comments": [PullsGetCommentsForReviewEndpoint, PullsGetCommentsForReviewRequestOptions];
    "GET /repos/:owner/:repo/pulls/comments": [PullsListCommentsForRepoEndpoint, PullsListCommentsForRepoRequestOptions];
    "GET /repos/:owner/:repo/pulls/comments/:comment_id": [PullsGetCommentEndpoint, PullsGetCommentRequestOptions];
    "GET /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [ReactionsListForPullRequestReviewCommentEndpoint, ReactionsListForPullRequestReviewCommentRequestOptions];
    "GET /repos/:owner/:repo/readme": [ReposGetReadmeEndpoint, ReposGetReadmeRequestOptions];
    "GET /repos/:owner/:repo/releases": [ReposListReleasesEndpoint, ReposListReleasesRequestOptions];
    "GET /repos/:owner/:repo/releases/:release_id": [ReposGetReleaseEndpoint, ReposGetReleaseRequestOptions];
    "GET /repos/:owner/:repo/releases/:release_id/assets": [ReposListAssetsForReleaseEndpoint, ReposListAssetsForReleaseRequestOptions];
    "GET /repos/:owner/:repo/releases/assets/:asset_id": [ReposGetReleaseAssetEndpoint, ReposGetReleaseAssetRequestOptions];
    "GET /repos/:owner/:repo/releases/latest": [ReposGetLatestReleaseEndpoint, ReposGetLatestReleaseRequestOptions];
    "GET /repos/:owner/:repo/releases/tags/:tag": [ReposGetReleaseByTagEndpoint, ReposGetReleaseByTagRequestOptions];
    "GET /repos/:owner/:repo/stargazers": [ActivityListStargazersForRepoEndpoint, ActivityListStargazersForRepoRequestOptions];
    "GET /repos/:owner/:repo/stats/code_frequency": [ReposGetCodeFrequencyStatsEndpoint, ReposGetCodeFrequencyStatsRequestOptions];
    "GET /repos/:owner/:repo/stats/commit_activity": [ReposGetCommitActivityStatsEndpoint, ReposGetCommitActivityStatsRequestOptions];
    "GET /repos/:owner/:repo/stats/contributors": [ReposGetContributorsStatsEndpoint, ReposGetContributorsStatsRequestOptions];
    "GET /repos/:owner/:repo/stats/participation": [ReposGetParticipationStatsEndpoint, ReposGetParticipationStatsRequestOptions];
    "GET /repos/:owner/:repo/stats/punch_card": [ReposGetPunchCardStatsEndpoint, ReposGetPunchCardStatsRequestOptions];
    "GET /repos/:owner/:repo/subscribers": [ActivityListWatchersForRepoEndpoint, ActivityListWatchersForRepoRequestOptions];
    "GET /repos/:owner/:repo/subscription": [ActivityGetRepoSubscriptionEndpoint, ActivityGetRepoSubscriptionRequestOptions];
    "GET /repos/:owner/:repo/tags": [ReposListTagsEndpoint, ReposListTagsRequestOptions];
    "GET /repos/:owner/:repo/teams": [ReposListTeamsEndpoint, ReposListTeamsRequestOptions];
    "GET /repos/:owner/:repo/topics": [ReposListTopicsEndpoint, ReposListTopicsRequestOptions];
    "GET /repos/:owner/:repo/traffic/clones": [ReposGetClonesEndpoint, ReposGetClonesRequestOptions];
    "GET /repos/:owner/:repo/traffic/popular/paths": [ReposGetTopPathsEndpoint, ReposGetTopPathsRequestOptions];
    "GET /repos/:owner/:repo/traffic/popular/referrers": [ReposGetTopReferrersEndpoint, ReposGetTopReferrersRequestOptions];
    "GET /repos/:owner/:repo/traffic/views": [ReposGetViewsEndpoint, ReposGetViewsRequestOptions];
    "GET /repos/:owner/:repo/vulnerability-alerts": [ReposCheckVulnerabilityAlertsEndpoint, ReposCheckVulnerabilityAlertsRequestOptions];
    "GET /repositories": [ReposListPublicEndpoint, ReposListPublicRequestOptions];
    "GET /scim/v2/organizations/:org/Users": [ScimListProvisionedIdentitiesEndpoint, ScimListProvisionedIdentitiesRequestOptions];
    "GET /scim/v2/organizations/:org/Users/:scim_user_id": [ScimGetProvisioningDetailsForUserEndpoint, ScimGetProvisioningDetailsForUserRequestOptions];
    "GET /search/code": [SearchCodeEndpoint, SearchCodeRequestOptions];
    "GET /search/commits": [SearchCommitsEndpoint, SearchCommitsRequestOptions];
    "GET /search/issues": [SearchIssuesAndPullRequestsEndpoint | SearchIssuesEndpoint, SearchIssuesAndPullRequestsRequestOptions | SearchIssuesRequestOptions];
    "GET /search/labels": [SearchLabelsEndpoint, SearchLabelsRequestOptions];
    "GET /search/repositories": [SearchReposEndpoint, SearchReposRequestOptions];
    "GET /search/topics": [SearchTopicsEndpoint, SearchTopicsRequestOptions];
    "GET /search/users": [SearchUsersEndpoint, SearchUsersRequestOptions];
    "GET /teams/:team_id": [TeamsGetEndpoint, TeamsGetRequestOptions];
    "GET /teams/:team_id/discussions": [TeamsListDiscussionsEndpoint, TeamsListDiscussionsRequestOptions];
    "GET /teams/:team_id/discussions/:discussion_number": [TeamsGetDiscussionEndpoint, TeamsGetDiscussionRequestOptions];
    "GET /teams/:team_id/discussions/:discussion_number/comments": [TeamsListDiscussionCommentsEndpoint, TeamsListDiscussionCommentsRequestOptions];
    "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [TeamsGetDiscussionCommentEndpoint, TeamsGetDiscussionCommentRequestOptions];
    "GET /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [ReactionsListForTeamDiscussionCommentEndpoint, ReactionsListForTeamDiscussionCommentRequestOptions];
    "GET /teams/:team_id/discussions/:discussion_number/reactions": [ReactionsListForTeamDiscussionEndpoint, ReactionsListForTeamDiscussionRequestOptions];
    "GET /teams/:team_id/invitations": [TeamsListPendingInvitationsEndpoint, TeamsListPendingInvitationsRequestOptions];
    "GET /teams/:team_id/members": [TeamsListMembersEndpoint, TeamsListMembersRequestOptions];
    "GET /teams/:team_id/members/:username": [TeamsGetMemberEndpoint, TeamsGetMemberRequestOptions];
    "GET /teams/:team_id/memberships/:username": [TeamsGetMembershipEndpoint, TeamsGetMembershipRequestOptions];
    "GET /teams/:team_id/projects": [TeamsListProjectsEndpoint, TeamsListProjectsRequestOptions];
    "GET /teams/:team_id/projects/:project_id": [TeamsReviewProjectEndpoint, TeamsReviewProjectRequestOptions];
    "GET /teams/:team_id/repos": [TeamsListReposEndpoint, TeamsListReposRequestOptions];
    "GET /teams/:team_id/repos/:owner/:repo": [TeamsCheckManagesRepoEndpoint, TeamsCheckManagesRepoRequestOptions];
    "GET /teams/:team_id/team-sync/group-mappings": [TeamsListIdPGroupsEndpoint, TeamsListIdPGroupsRequestOptions];
    "GET /teams/:team_id/teams": [TeamsListChildEndpoint, TeamsListChildRequestOptions];
    "GET /user": [UsersGetAuthenticatedEndpoint, UsersGetAuthenticatedRequestOptions];
    "GET /user/blocks": [UsersListBlockedEndpoint, UsersListBlockedRequestOptions];
    "GET /user/blocks/:username": [UsersCheckBlockedEndpoint, UsersCheckBlockedRequestOptions];
    "GET /user/emails": [UsersListEmailsEndpoint, UsersListEmailsRequestOptions];
    "GET /user/followers": [UsersListFollowersForAuthenticatedUserEndpoint, UsersListFollowersForAuthenticatedUserRequestOptions];
    "GET /user/following": [UsersListFollowingForAuthenticatedUserEndpoint, UsersListFollowingForAuthenticatedUserRequestOptions];
    "GET /user/following/:username": [UsersCheckFollowingEndpoint, UsersCheckFollowingRequestOptions];
    "GET /user/gpg_keys": [UsersListGpgKeysEndpoint, UsersListGpgKeysRequestOptions];
    "GET /user/gpg_keys/:gpg_key_id": [UsersGetGpgKeyEndpoint, UsersGetGpgKeyRequestOptions];
    "GET /user/installations": [AppsListInstallationsForAuthenticatedUserEndpoint, AppsListInstallationsForAuthenticatedUserRequestOptions];
    "GET /user/installations/:installation_id/repositories": [AppsListInstallationReposForAuthenticatedUserEndpoint, AppsListInstallationReposForAuthenticatedUserRequestOptions];
    "GET /user/issues": [IssuesListForAuthenticatedUserEndpoint, IssuesListForAuthenticatedUserRequestOptions];
    "GET /user/keys": [UsersListPublicKeysEndpoint, UsersListPublicKeysRequestOptions];
    "GET /user/keys/:key_id": [UsersGetPublicKeyEndpoint, UsersGetPublicKeyRequestOptions];
    "GET /user/marketplace_purchases": [AppsListMarketplacePurchasesForAuthenticatedUserEndpoint, AppsListMarketplacePurchasesForAuthenticatedUserRequestOptions];
    "GET /user/marketplace_purchases/stubbed": [AppsListMarketplacePurchasesForAuthenticatedUserStubbedEndpoint, AppsListMarketplacePurchasesForAuthenticatedUserStubbedRequestOptions];
    "GET /user/memberships/orgs": [OrgsListMembershipsEndpoint, OrgsListMembershipsRequestOptions];
    "GET /user/memberships/orgs/:org": [OrgsGetMembershipForAuthenticatedUserEndpoint, OrgsGetMembershipForAuthenticatedUserRequestOptions];
    "GET /user/migrations": [MigrationsListForAuthenticatedUserEndpoint, MigrationsListForAuthenticatedUserRequestOptions];
    "GET /user/migrations/:migration_id": [MigrationsGetStatusForAuthenticatedUserEndpoint, MigrationsGetStatusForAuthenticatedUserRequestOptions];
    "GET /user/migrations/:migration_id/archive": [MigrationsGetArchiveForAuthenticatedUserEndpoint, MigrationsGetArchiveForAuthenticatedUserRequestOptions];
    "GET /user/orgs": [OrgsListForAuthenticatedUserEndpoint, OrgsListForAuthenticatedUserRequestOptions];
    "GET /user/public_emails": [UsersListPublicEmailsEndpoint, UsersListPublicEmailsRequestOptions];
    "GET /user/repos": [ReposListEndpoint, ReposListRequestOptions];
    "GET /user/repository_invitations": [ReposListInvitationsForAuthenticatedUserEndpoint, ReposListInvitationsForAuthenticatedUserRequestOptions];
    "GET /user/starred": [ActivityListReposStarredByAuthenticatedUserEndpoint, ActivityListReposStarredByAuthenticatedUserRequestOptions];
    "GET /user/starred/:owner/:repo": [ActivityCheckStarringRepoEndpoint, ActivityCheckStarringRepoRequestOptions];
    "GET /user/subscriptions": [ActivityListWatchedReposForAuthenticatedUserEndpoint, ActivityListWatchedReposForAuthenticatedUserRequestOptions];
    "GET /user/subscriptions/:owner/:repo": [ActivityCheckWatchingRepoLegacyEndpoint, ActivityCheckWatchingRepoLegacyRequestOptions];
    "GET /user/teams": [TeamsListForAuthenticatedUserEndpoint, TeamsListForAuthenticatedUserRequestOptions];
    "GET /users": [UsersListEndpoint, UsersListRequestOptions];
    "GET /users/:username": [UsersGetByUsernameEndpoint, UsersGetByUsernameRequestOptions];
    "GET /users/:username/events": [ActivityListEventsForUserEndpoint, ActivityListEventsForUserRequestOptions];
    "GET /users/:username/events/orgs/:org": [ActivityListEventsForOrgEndpoint, ActivityListEventsForOrgRequestOptions];
    "GET /users/:username/events/public": [ActivityListPublicEventsForUserEndpoint, ActivityListPublicEventsForUserRequestOptions];
    "GET /users/:username/followers": [UsersListFollowersForUserEndpoint, UsersListFollowersForUserRequestOptions];
    "GET /users/:username/following": [UsersListFollowingForUserEndpoint, UsersListFollowingForUserRequestOptions];
    "GET /users/:username/following/:target_user": [UsersCheckFollowingForUserEndpoint, UsersCheckFollowingForUserRequestOptions];
    "GET /users/:username/gists": [GistsListPublicForUserEndpoint, GistsListPublicForUserRequestOptions];
    "GET /users/:username/gpg_keys": [UsersListGpgKeysForUserEndpoint, UsersListGpgKeysForUserRequestOptions];
    "GET /users/:username/hovercard": [UsersGetContextForUserEndpoint, UsersGetContextForUserRequestOptions];
    "GET /users/:username/installation": [AppsGetUserInstallationEndpoint | AppsFindUserInstallationEndpoint, AppsGetUserInstallationRequestOptions | AppsFindUserInstallationRequestOptions];
    "GET /users/:username/keys": [UsersListPublicKeysForUserEndpoint, UsersListPublicKeysForUserRequestOptions];
    "GET /users/:username/orgs": [OrgsListForUserEndpoint, OrgsListForUserRequestOptions];
    "GET /users/:username/projects": [ProjectsListForUserEndpoint, ProjectsListForUserRequestOptions];
    "GET /users/:username/received_events": [ActivityListReceivedEventsForUserEndpoint, ActivityListReceivedEventsForUserRequestOptions];
    "GET /users/:username/received_events/public": [ActivityListReceivedPublicEventsForUserEndpoint, ActivityListReceivedPublicEventsForUserRequestOptions];
    "GET /users/:username/repos": [ReposListForUserEndpoint, ReposListForUserRequestOptions];
    "GET /users/:username/starred": [ActivityListReposStarredByUserEndpoint, ActivityListReposStarredByUserRequestOptions];
    "GET /users/:username/subscriptions": [ActivityListReposWatchedByUserEndpoint, ActivityListReposWatchedByUserRequestOptions];
    "PATCH /authorizations/:authorization_id": [OauthAuthorizationsUpdateAuthorizationEndpoint, OauthAuthorizationsUpdateAuthorizationRequestOptions];
    "PATCH /gists/:gist_id": [GistsUpdateEndpoint, GistsUpdateRequestOptions];
    "PATCH /gists/:gist_id/comments/:comment_id": [GistsUpdateCommentEndpoint, GistsUpdateCommentRequestOptions];
    "PATCH /notifications/threads/:thread_id": [ActivityMarkThreadAsReadEndpoint, ActivityMarkThreadAsReadRequestOptions];
    "PATCH /orgs/:org": [OrgsUpdateEndpoint, OrgsUpdateRequestOptions];
    "PATCH /orgs/:org/hooks/:hook_id": [OrgsUpdateHookEndpoint, OrgsUpdateHookRequestOptions];
    "PATCH /projects/:project_id": [ProjectsUpdateEndpoint, ProjectsUpdateRequestOptions];
    "PATCH /projects/columns/:column_id": [ProjectsUpdateColumnEndpoint, ProjectsUpdateColumnRequestOptions];
    "PATCH /projects/columns/cards/:card_id": [ProjectsUpdateCardEndpoint, ProjectsUpdateCardRequestOptions];
    "PATCH /repos/:owner/:repo": [ReposUpdateEndpoint, ReposUpdateRequestOptions];
    "PATCH /repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews": [ReposUpdateProtectedBranchPullRequestReviewEnforcementEndpoint, ReposUpdateProtectedBranchPullRequestReviewEnforcementRequestOptions];
    "PATCH /repos/:owner/:repo/branches/:branch/protection/required_status_checks": [ReposUpdateProtectedBranchRequiredStatusChecksEndpoint, ReposUpdateProtectedBranchRequiredStatusChecksRequestOptions];
    "PATCH /repos/:owner/:repo/check-runs/:check_run_id": [ChecksUpdateEndpoint, ChecksUpdateRequestOptions];
    "PATCH /repos/:owner/:repo/check-suites/preferences": [ChecksSetSuitesPreferencesEndpoint, ChecksSetSuitesPreferencesRequestOptions];
    "PATCH /repos/:owner/:repo/comments/:comment_id": [ReposUpdateCommitCommentEndpoint, ReposUpdateCommitCommentRequestOptions];
    "PATCH /repos/:owner/:repo/git/refs/:ref": [GitUpdateRefEndpoint, GitUpdateRefRequestOptions];
    "PATCH /repos/:owner/:repo/hooks/:hook_id": [ReposUpdateHookEndpoint, ReposUpdateHookRequestOptions];
    "PATCH /repos/:owner/:repo/import": [MigrationsUpdateImportEndpoint, MigrationsUpdateImportRequestOptions];
    "PATCH /repos/:owner/:repo/import/authors/:author_id": [MigrationsMapCommitAuthorEndpoint, MigrationsMapCommitAuthorRequestOptions];
    "PATCH /repos/:owner/:repo/import/lfs": [MigrationsSetLfsPreferenceEndpoint, MigrationsSetLfsPreferenceRequestOptions];
    "PATCH /repos/:owner/:repo/invitations/:invitation_id": [ReposUpdateInvitationEndpoint, ReposUpdateInvitationRequestOptions];
    "PATCH /repos/:owner/:repo/issues/:issue_number": [IssuesUpdateEndpoint, IssuesUpdateRequestOptions];
    "PATCH /repos/:owner/:repo/issues/comments/:comment_id": [IssuesUpdateCommentEndpoint, IssuesUpdateCommentRequestOptions];
    "PATCH /repos/:owner/:repo/labels/:name": [IssuesUpdateLabelEndpoint, IssuesUpdateLabelRequestOptions];
    "PATCH /repos/:owner/:repo/milestones/:milestone_number": [IssuesUpdateMilestoneEndpoint, IssuesUpdateMilestoneRequestOptions];
    "PATCH /repos/:owner/:repo/pulls/:pull_number": [PullsUpdateEndpoint, PullsUpdateRequestOptions];
    "PATCH /repos/:owner/:repo/pulls/comments/:comment_id": [PullsUpdateCommentEndpoint, PullsUpdateCommentRequestOptions];
    "PATCH /repos/:owner/:repo/releases/:release_id": [ReposUpdateReleaseEndpoint, ReposUpdateReleaseRequestOptions];
    "PATCH /repos/:owner/:repo/releases/assets/:asset_id": [ReposUpdateReleaseAssetEndpoint, ReposUpdateReleaseAssetRequestOptions];
    "PATCH /scim/v2/organizations/:org/Users/:scim_user_id": [ScimUpdateUserAttributeEndpoint, ScimUpdateUserAttributeRequestOptions];
    "PATCH /teams/:team_id": [TeamsUpdateEndpoint, TeamsUpdateRequestOptions];
    "PATCH /teams/:team_id/discussions/:discussion_number": [TeamsUpdateDiscussionEndpoint, TeamsUpdateDiscussionRequestOptions];
    "PATCH /teams/:team_id/discussions/:discussion_number/comments/:comment_number": [TeamsUpdateDiscussionCommentEndpoint, TeamsUpdateDiscussionCommentRequestOptions];
    "PATCH /teams/:team_id/team-sync/group-mappings": [TeamsCreateOrUpdateIdPGroupConnectionsEndpoint, TeamsCreateOrUpdateIdPGroupConnectionsRequestOptions];
    "PATCH /user": [UsersUpdateAuthenticatedEndpoint, UsersUpdateAuthenticatedRequestOptions];
    "PATCH /user/email/visibility": [UsersTogglePrimaryEmailVisibilityEndpoint, UsersTogglePrimaryEmailVisibilityRequestOptions];
    "PATCH /user/memberships/orgs/:org": [OrgsUpdateMembershipEndpoint, OrgsUpdateMembershipRequestOptions];
    "PATCH /user/repository_invitations/:invitation_id": [ReposAcceptInvitationEndpoint, ReposAcceptInvitationRequestOptions];
    "POST /app-manifests/:code/conversions": [AppsCreateFromManifestEndpoint, AppsCreateFromManifestRequestOptions];
    "POST /app/installations/:installation_id/access_tokens": [AppsCreateInstallationTokenEndpoint, AppsCreateInstallationTokenRequestOptions];
    "POST /applications/:client_id/tokens/:access_token": [OauthAuthorizationsResetAuthorizationEndpoint, OauthAuthorizationsResetAuthorizationRequestOptions];
    "POST /authorizations": [OauthAuthorizationsCreateAuthorizationEndpoint, OauthAuthorizationsCreateAuthorizationRequestOptions];
    "POST /content_references/:content_reference_id/attachments": [AppsCreateContentAttachmentEndpoint, AppsCreateContentAttachmentRequestOptions];
    "POST /gists": [GistsCreateEndpoint, GistsCreateRequestOptions];
    "POST /gists/:gist_id/comments": [GistsCreateCommentEndpoint, GistsCreateCommentRequestOptions];
    "POST /gists/:gist_id/forks": [GistsForkEndpoint, GistsForkRequestOptions];
    "POST /markdown": [MarkdownRenderEndpoint, MarkdownRenderRequestOptions];
    "POST /markdown/raw": [MarkdownRenderRawEndpoint, MarkdownRenderRawRequestOptions];
    "POST /orgs/:org/hooks": [OrgsCreateHookEndpoint, OrgsCreateHookRequestOptions];
    "POST /orgs/:org/hooks/:hook_id/pings": [OrgsPingHookEndpoint, OrgsPingHookRequestOptions];
    "POST /orgs/:org/invitations": [OrgsCreateInvitationEndpoint, OrgsCreateInvitationRequestOptions];
    "POST /orgs/:org/migrations": [MigrationsStartForOrgEndpoint, MigrationsStartForOrgRequestOptions];
    "POST /orgs/:org/projects": [ProjectsCreateForOrgEndpoint, ProjectsCreateForOrgRequestOptions];
    "POST /orgs/:org/repos": [ReposCreateInOrgEndpoint, ReposCreateInOrgRequestOptions];
    "POST /orgs/:org/teams": [TeamsCreateEndpoint, TeamsCreateRequestOptions];
    "POST /projects/:project_id/columns": [ProjectsCreateColumnEndpoint, ProjectsCreateColumnRequestOptions];
    "POST /projects/columns/:column_id/cards": [ProjectsCreateCardEndpoint, ProjectsCreateCardRequestOptions];
    "POST /projects/columns/:column_id/moves": [ProjectsMoveColumnEndpoint, ProjectsMoveColumnRequestOptions];
    "POST /projects/columns/cards/:card_id/moves": [ProjectsMoveCardEndpoint, ProjectsMoveCardRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/enforce_admins": [ReposAddProtectedBranchAdminEnforcementEndpoint, ReposAddProtectedBranchAdminEnforcementRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/required_signatures": [ReposAddProtectedBranchRequiredSignaturesEndpoint, ReposAddProtectedBranchRequiredSignaturesRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [ReposAddProtectedBranchRequiredStatusChecksContextsEndpoint, ReposAddProtectedBranchRequiredStatusChecksContextsRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [ReposAddProtectedBranchAppRestrictionsEndpoint, ReposAddProtectedBranchAppRestrictionsRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [ReposAddProtectedBranchTeamRestrictionsEndpoint, ReposAddProtectedBranchTeamRestrictionsRequestOptions];
    "POST /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [ReposAddProtectedBranchUserRestrictionsEndpoint, ReposAddProtectedBranchUserRestrictionsRequestOptions];
    "POST /repos/:owner/:repo/check-runs": [ChecksCreateEndpoint, ChecksCreateRequestOptions];
    "POST /repos/:owner/:repo/check-suites": [ChecksCreateSuiteEndpoint, ChecksCreateSuiteRequestOptions];
    "POST /repos/:owner/:repo/check-suites/:check_suite_id/rerequest": [ChecksRerequestSuiteEndpoint, ChecksRerequestSuiteRequestOptions];
    "POST /repos/:owner/:repo/comments/:comment_id/reactions": [ReactionsCreateForCommitCommentEndpoint, ReactionsCreateForCommitCommentRequestOptions];
    "POST /repos/:owner/:repo/commits/:commit_sha/comments": [ReposCreateCommitCommentEndpoint, ReposCreateCommitCommentRequestOptions];
    "POST /repos/:owner/:repo/deployments": [ReposCreateDeploymentEndpoint, ReposCreateDeploymentRequestOptions];
    "POST /repos/:owner/:repo/deployments/:deployment_id/statuses": [ReposCreateDeploymentStatusEndpoint, ReposCreateDeploymentStatusRequestOptions];
    "POST /repos/:owner/:repo/dispatches": [ReposCreateDispatchEventEndpoint, ReposCreateDispatchEventRequestOptions];
    "POST /repos/:owner/:repo/forks": [ReposCreateForkEndpoint, ReposCreateForkRequestOptions];
    "POST /repos/:owner/:repo/git/blobs": [GitCreateBlobEndpoint, GitCreateBlobRequestOptions];
    "POST /repos/:owner/:repo/git/commits": [GitCreateCommitEndpoint, GitCreateCommitRequestOptions];
    "POST /repos/:owner/:repo/git/refs": [GitCreateRefEndpoint, GitCreateRefRequestOptions];
    "POST /repos/:owner/:repo/git/tags": [GitCreateTagEndpoint, GitCreateTagRequestOptions];
    "POST /repos/:owner/:repo/git/trees": [GitCreateTreeEndpoint, GitCreateTreeRequestOptions];
    "POST /repos/:owner/:repo/hooks": [ReposCreateHookEndpoint, ReposCreateHookRequestOptions];
    "POST /repos/:owner/:repo/hooks/:hook_id/pings": [ReposPingHookEndpoint, ReposPingHookRequestOptions];
    "POST /repos/:owner/:repo/hooks/:hook_id/tests": [ReposTestPushHookEndpoint, ReposTestPushHookRequestOptions];
    "POST /repos/:owner/:repo/issues": [IssuesCreateEndpoint, IssuesCreateRequestOptions];
    "POST /repos/:owner/:repo/issues/:issue_number/assignees": [IssuesAddAssigneesEndpoint, IssuesAddAssigneesRequestOptions];
    "POST /repos/:owner/:repo/issues/:issue_number/comments": [IssuesCreateCommentEndpoint, IssuesCreateCommentRequestOptions];
    "POST /repos/:owner/:repo/issues/:issue_number/labels": [IssuesAddLabelsEndpoint, IssuesAddLabelsRequestOptions];
    "POST /repos/:owner/:repo/issues/:issue_number/reactions": [ReactionsCreateForIssueEndpoint, ReactionsCreateForIssueRequestOptions];
    "POST /repos/:owner/:repo/issues/comments/:comment_id/reactions": [ReactionsCreateForIssueCommentEndpoint, ReactionsCreateForIssueCommentRequestOptions];
    "POST /repos/:owner/:repo/keys": [ReposAddDeployKeyEndpoint, ReposAddDeployKeyRequestOptions];
    "POST /repos/:owner/:repo/labels": [IssuesCreateLabelEndpoint, IssuesCreateLabelRequestOptions];
    "POST /repos/:owner/:repo/merges": [ReposMergeEndpoint, ReposMergeRequestOptions];
    "POST /repos/:owner/:repo/milestones": [IssuesCreateMilestoneEndpoint, IssuesCreateMilestoneRequestOptions];
    "POST /repos/:owner/:repo/pages": [ReposEnablePagesSiteEndpoint, ReposEnablePagesSiteRequestOptions];
    "POST /repos/:owner/:repo/pages/builds": [ReposRequestPageBuildEndpoint, ReposRequestPageBuildRequestOptions];
    "POST /repos/:owner/:repo/projects": [ProjectsCreateForRepoEndpoint, ProjectsCreateForRepoRequestOptions];
    "POST /repos/:owner/:repo/pulls": [PullsCreateEndpoint, PullsCreateRequestOptions];
    "POST /repos/:owner/:repo/pulls/:pull_number/comments": [PullsCreateCommentEndpoint | PullsCreateCommentReplyEndpoint, PullsCreateCommentRequestOptions | PullsCreateCommentReplyRequestOptions];
    "POST /repos/:owner/:repo/pulls/:pull_number/comments/:comment_id/replies": [PullsCreateReviewCommentReplyEndpoint, PullsCreateReviewCommentReplyRequestOptions];
    "POST /repos/:owner/:repo/pulls/:pull_number/requested_reviewers": [PullsCreateReviewRequestEndpoint, PullsCreateReviewRequestRequestOptions];
    "POST /repos/:owner/:repo/pulls/:pull_number/reviews": [PullsCreateReviewEndpoint, PullsCreateReviewRequestOptions];
    "POST /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/events": [PullsSubmitReviewEndpoint, PullsSubmitReviewRequestOptions];
    "POST /repos/:owner/:repo/pulls/comments/:comment_id/reactions": [ReactionsCreateForPullRequestReviewCommentEndpoint, ReactionsCreateForPullRequestReviewCommentRequestOptions];
    "POST /repos/:owner/:repo/releases": [ReposCreateReleaseEndpoint, ReposCreateReleaseRequestOptions];
    "POST /repos/:owner/:repo/statuses/:sha": [ReposCreateStatusEndpoint, ReposCreateStatusRequestOptions];
    "POST /repos/:owner/:repo/transfer": [ReposTransferEndpoint, ReposTransferRequestOptions];
    "POST /repos/:template_owner/:template_repo/generate": [ReposCreateUsingTemplateEndpoint, ReposCreateUsingTemplateRequestOptions];
    "POST /scim/v2/organizations/:org/Users": [ScimProvisionAndInviteUsersEndpoint | ScimProvisionInviteUsersEndpoint, ScimProvisionAndInviteUsersRequestOptions | ScimProvisionInviteUsersRequestOptions];
    "POST /teams/:team_id/discussions": [TeamsCreateDiscussionEndpoint, TeamsCreateDiscussionRequestOptions];
    "POST /teams/:team_id/discussions/:discussion_number/comments": [TeamsCreateDiscussionCommentEndpoint, TeamsCreateDiscussionCommentRequestOptions];
    "POST /teams/:team_id/discussions/:discussion_number/comments/:comment_number/reactions": [ReactionsCreateForTeamDiscussionCommentEndpoint, ReactionsCreateForTeamDiscussionCommentRequestOptions];
    "POST /teams/:team_id/discussions/:discussion_number/reactions": [ReactionsCreateForTeamDiscussionEndpoint, ReactionsCreateForTeamDiscussionRequestOptions];
    "POST /user/emails": [UsersAddEmailsEndpoint, UsersAddEmailsRequestOptions];
    "POST /user/gpg_keys": [UsersCreateGpgKeyEndpoint, UsersCreateGpgKeyRequestOptions];
    "POST /user/keys": [UsersCreatePublicKeyEndpoint, UsersCreatePublicKeyRequestOptions];
    "POST /user/migrations": [MigrationsStartForAuthenticatedUserEndpoint, MigrationsStartForAuthenticatedUserRequestOptions];
    "POST /user/projects": [ProjectsCreateForAuthenticatedUserEndpoint, ProjectsCreateForAuthenticatedUserRequestOptions];
    "POST /user/repos": [ReposCreateForAuthenticatedUserEndpoint, ReposCreateForAuthenticatedUserRequestOptions];
    "PUT /authorizations/clients/:client_id": [OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint, OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions];
    "PUT /authorizations/clients/:client_id/:fingerprint": [OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintEndpoint, OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions | OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintRequestOptions];
    "PUT /gists/:gist_id/star": [GistsStarEndpoint, GistsStarRequestOptions];
    "PUT /notifications": [ActivityMarkAsReadEndpoint, ActivityMarkAsReadRequestOptions];
    "PUT /notifications/threads/:thread_id/subscription": [ActivitySetThreadSubscriptionEndpoint, ActivitySetThreadSubscriptionRequestOptions];
    "PUT /orgs/:org/blocks/:username": [OrgsBlockUserEndpoint, OrgsBlockUserRequestOptions];
    "PUT /orgs/:org/interaction-limits": [InteractionsAddOrUpdateRestrictionsForOrgEndpoint, InteractionsAddOrUpdateRestrictionsForOrgRequestOptions];
    "PUT /orgs/:org/memberships/:username": [OrgsAddOrUpdateMembershipEndpoint, OrgsAddOrUpdateMembershipRequestOptions];
    "PUT /orgs/:org/outside_collaborators/:username": [OrgsConvertMemberToOutsideCollaboratorEndpoint, OrgsConvertMemberToOutsideCollaboratorRequestOptions];
    "PUT /orgs/:org/public_members/:username": [OrgsPublicizeMembershipEndpoint, OrgsPublicizeMembershipRequestOptions];
    "PUT /projects/:project_id/collaborators/:username": [ProjectsAddCollaboratorEndpoint, ProjectsAddCollaboratorRequestOptions];
    "PUT /repos/:owner/:repo/automated-security-fixes": [ReposEnableAutomatedSecurityFixesEndpoint, ReposEnableAutomatedSecurityFixesRequestOptions];
    "PUT /repos/:owner/:repo/branches/:branch/protection": [ReposUpdateBranchProtectionEndpoint, ReposUpdateBranchProtectionRequestOptions];
    "PUT /repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts": [ReposReplaceProtectedBranchRequiredStatusChecksContextsEndpoint, ReposReplaceProtectedBranchRequiredStatusChecksContextsRequestOptions];
    "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/apps": [ReposReplaceProtectedBranchAppRestrictionsEndpoint, ReposReplaceProtectedBranchAppRestrictionsRequestOptions];
    "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/teams": [ReposReplaceProtectedBranchTeamRestrictionsEndpoint, ReposReplaceProtectedBranchTeamRestrictionsRequestOptions];
    "PUT /repos/:owner/:repo/branches/:branch/protection/restrictions/users": [ReposReplaceProtectedBranchUserRestrictionsEndpoint, ReposReplaceProtectedBranchUserRestrictionsRequestOptions];
    "PUT /repos/:owner/:repo/collaborators/:username": [ReposAddCollaboratorEndpoint, ReposAddCollaboratorRequestOptions];
    "PUT /repos/:owner/:repo/contents/:path": [ReposCreateOrUpdateFileEndpoint | ReposCreateFileEndpoint | ReposUpdateFileEndpoint, ReposCreateOrUpdateFileRequestOptions | ReposCreateFileRequestOptions | ReposUpdateFileRequestOptions];
    "PUT /repos/:owner/:repo/import": [MigrationsStartImportEndpoint, MigrationsStartImportRequestOptions];
    "PUT /repos/:owner/:repo/interaction-limits": [InteractionsAddOrUpdateRestrictionsForRepoEndpoint, InteractionsAddOrUpdateRestrictionsForRepoRequestOptions];
    "PUT /repos/:owner/:repo/issues/:issue_number/labels": [IssuesReplaceLabelsEndpoint, IssuesReplaceLabelsRequestOptions];
    "PUT /repos/:owner/:repo/issues/:issue_number/lock": [IssuesLockEndpoint, IssuesLockRequestOptions];
    "PUT /repos/:owner/:repo/notifications": [ActivityMarkNotificationsAsReadForRepoEndpoint, ActivityMarkNotificationsAsReadForRepoRequestOptions];
    "PUT /repos/:owner/:repo/pages": [ReposUpdateInformationAboutPagesSiteEndpoint, ReposUpdateInformationAboutPagesSiteRequestOptions];
    "PUT /repos/:owner/:repo/pulls/:pull_number/merge": [PullsMergeEndpoint, PullsMergeRequestOptions];
    "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id": [PullsUpdateReviewEndpoint, PullsUpdateReviewRequestOptions];
    "PUT /repos/:owner/:repo/pulls/:pull_number/reviews/:review_id/dismissals": [PullsDismissReviewEndpoint, PullsDismissReviewRequestOptions];
    "PUT /repos/:owner/:repo/pulls/:pull_number/update-branch": [PullsUpdateBranchEndpoint, PullsUpdateBranchRequestOptions];
    "PUT /repos/:owner/:repo/subscription": [ActivitySetRepoSubscriptionEndpoint, ActivitySetRepoSubscriptionRequestOptions];
    "PUT /repos/:owner/:repo/topics": [ReposReplaceTopicsEndpoint, ReposReplaceTopicsRequestOptions];
    "PUT /repos/:owner/:repo/vulnerability-alerts": [ReposEnableVulnerabilityAlertsEndpoint, ReposEnableVulnerabilityAlertsRequestOptions];
    "PUT /scim/v2/organizations/:org/Users/:scim_user_id": [ScimReplaceProvisionedUserInformationEndpoint | ScimUpdateProvisionedOrgMembershipEndpoint, ScimReplaceProvisionedUserInformationRequestOptions | ScimUpdateProvisionedOrgMembershipRequestOptions];
    "PUT /teams/:team_id/members/:username": [TeamsAddMemberEndpoint, TeamsAddMemberRequestOptions];
    "PUT /teams/:team_id/memberships/:username": [TeamsAddOrUpdateMembershipEndpoint, TeamsAddOrUpdateMembershipRequestOptions];
    "PUT /teams/:team_id/projects/:project_id": [TeamsAddOrUpdateProjectEndpoint, TeamsAddOrUpdateProjectRequestOptions];
    "PUT /teams/:team_id/repos/:owner/:repo": [TeamsAddOrUpdateRepoEndpoint, TeamsAddOrUpdateRepoRequestOptions];
    "PUT /user/blocks/:username": [UsersBlockEndpoint, UsersBlockRequestOptions];
    "PUT /user/following/:username": [UsersFollowEndpoint, UsersFollowRequestOptions];
    "PUT /user/installations/:installation_id/repositories/:repository_id": [AppsAddRepoToInstallationEndpoint, AppsAddRepoToInstallationRequestOptions];
    "PUT /user/starred/:owner/:repo": [ActivityStarRepoEndpoint, ActivityStarRepoRequestOptions];
    "PUT /user/subscriptions/:owner/:repo": [ActivityWatchRepoLegacyEndpoint, ActivityWatchRepoLegacyRequestOptions];
}
declare type AppsGetAuthenticatedEndpoint = {};
declare type AppsGetAuthenticatedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsCreateFromManifestEndpoint = {};
declare type AppsCreateFromManifestRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListInstallationsEndpoint = {};
declare type AppsListInstallationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsGetInstallationEndpoint = {};
declare type AppsGetInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsDeleteInstallationEndpoint = {};
declare type AppsDeleteInstallationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsCreateInstallationTokenEndpoint = {};
declare type AppsCreateInstallationTokenRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsListGrantsEndpoint = {};
declare type OauthAuthorizationsListGrantsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsGetGrantEndpoint = {};
declare type OauthAuthorizationsGetGrantRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsDeleteGrantEndpoint = {};
declare type OauthAuthorizationsDeleteGrantRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsRevokeGrantForApplicationEndpoint = {};
declare type OauthAuthorizationsRevokeGrantForApplicationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsCheckAuthorizationEndpoint = {};
declare type OauthAuthorizationsCheckAuthorizationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsResetAuthorizationEndpoint = {};
declare type OauthAuthorizationsResetAuthorizationRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsRevokeAuthorizationForApplicationEndpoint = {};
declare type OauthAuthorizationsRevokeAuthorizationForApplicationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsGetBySlugEndpoint = {};
declare type AppsGetBySlugRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsListAuthorizationsEndpoint = {};
declare type OauthAuthorizationsListAuthorizationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsCreateAuthorizationEndpoint = {};
declare type OauthAuthorizationsCreateAuthorizationRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppEndpoint = {};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintEndpoint = {};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintEndpoint = {};
declare type OauthAuthorizationsGetOrCreateAuthorizationForAppFingerprintRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsGetAuthorizationEndpoint = {};
declare type OauthAuthorizationsGetAuthorizationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsUpdateAuthorizationEndpoint = {};
declare type OauthAuthorizationsUpdateAuthorizationRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OauthAuthorizationsDeleteAuthorizationEndpoint = {};
declare type OauthAuthorizationsDeleteAuthorizationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type CodesOfConductListConductCodesEndpoint = {};
declare type CodesOfConductListConductCodesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type CodesOfConductGetConductCodeEndpoint = {};
declare type CodesOfConductGetConductCodeRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsCreateContentAttachmentEndpoint = {};
declare type AppsCreateContentAttachmentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type EmojisGetEndpoint = {};
declare type EmojisGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListPublicEventsEndpoint = {};
declare type ActivityListPublicEventsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListFeedsEndpoint = {};
declare type ActivityListFeedsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListEndpoint = {};
declare type GistsListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsCreateEndpoint = {};
declare type GistsCreateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListPublicEndpoint = {};
declare type GistsListPublicRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListStarredEndpoint = {};
declare type GistsListStarredRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsGetEndpoint = {};
declare type GistsGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsUpdateEndpoint = {};
declare type GistsUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsDeleteEndpoint = {};
declare type GistsDeleteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListCommentsEndpoint = {};
declare type GistsListCommentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsCreateCommentEndpoint = {};
declare type GistsCreateCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsGetCommentEndpoint = {};
declare type GistsGetCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsUpdateCommentEndpoint = {};
declare type GistsUpdateCommentRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsDeleteCommentEndpoint = {};
declare type GistsDeleteCommentRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListCommitsEndpoint = {};
declare type GistsListCommitsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsForkEndpoint = {};
declare type GistsForkRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListForksEndpoint = {};
declare type GistsListForksRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsStarEndpoint = {};
declare type GistsStarRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsUnstarEndpoint = {};
declare type GistsUnstarRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsCheckIsStarredEndpoint = {};
declare type GistsCheckIsStarredRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsGetRevisionEndpoint = {};
declare type GistsGetRevisionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitignoreListTemplatesEndpoint = {};
declare type GitignoreListTemplatesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitignoreGetTemplateEndpoint = {};
declare type GitignoreGetTemplateRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListReposEndpoint = {};
declare type AppsListReposRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListEndpoint = {};
declare type IssuesListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchIssuesLegacyEndpoint = {};
declare type SearchIssuesLegacyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchReposLegacyEndpoint = {};
declare type SearchReposLegacyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchEmailLegacyEndpoint = {};
declare type SearchEmailLegacyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchUsersLegacyEndpoint = {};
declare type SearchUsersLegacyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type LicensesListCommonlyUsedEndpoint = {};
declare type LicensesListCommonlyUsedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type LicensesListEndpoint = {};
declare type LicensesListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type LicensesGetEndpoint = {};
declare type LicensesGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MarkdownRenderEndpoint = {};
declare type MarkdownRenderRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MarkdownRenderRawEndpoint = {};
declare type MarkdownRenderRawRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsCheckAccountIsAssociatedWithAnyEndpoint = {};
declare type AppsCheckAccountIsAssociatedWithAnyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListPlansEndpoint = {};
declare type AppsListPlansRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListAccountsUserOrOrgOnPlanEndpoint = {};
declare type AppsListAccountsUserOrOrgOnPlanRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsCheckAccountIsAssociatedWithAnyStubbedEndpoint = {};
declare type AppsCheckAccountIsAssociatedWithAnyStubbedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListPlansStubbedEndpoint = {};
declare type AppsListPlansStubbedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListAccountsUserOrOrgOnPlanStubbedEndpoint = {};
declare type AppsListAccountsUserOrOrgOnPlanStubbedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MetaGetEndpoint = {};
declare type MetaGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListPublicEventsForRepoNetworkEndpoint = {};
declare type ActivityListPublicEventsForRepoNetworkRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListNotificationsEndpoint = {};
declare type ActivityListNotificationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityMarkAsReadEndpoint = {};
declare type ActivityMarkAsReadRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityGetThreadEndpoint = {};
declare type ActivityGetThreadRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityMarkThreadAsReadEndpoint = {};
declare type ActivityMarkThreadAsReadRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityGetThreadSubscriptionEndpoint = {};
declare type ActivityGetThreadSubscriptionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivitySetThreadSubscriptionEndpoint = {};
declare type ActivitySetThreadSubscriptionRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityDeleteThreadSubscriptionEndpoint = {};
declare type ActivityDeleteThreadSubscriptionRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListEndpoint = {};
declare type OrgsListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsGetEndpoint = {};
declare type OrgsGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsUpdateEndpoint = {};
declare type OrgsUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListBlockedUsersEndpoint = {};
declare type OrgsListBlockedUsersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsCheckBlockedUserEndpoint = {};
declare type OrgsCheckBlockedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsBlockUserEndpoint = {};
declare type OrgsBlockUserRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsUnblockUserEndpoint = {};
declare type OrgsUnblockUserRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListCredentialAuthorizationsEndpoint = {};
declare type OrgsListCredentialAuthorizationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsRemoveCredentialAuthorizationEndpoint = {};
declare type OrgsRemoveCredentialAuthorizationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListPublicEventsForOrgEndpoint = {};
declare type ActivityListPublicEventsForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListHooksEndpoint = {};
declare type OrgsListHooksRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsCreateHookEndpoint = {};
declare type OrgsCreateHookRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsGetHookEndpoint = {};
declare type OrgsGetHookRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsUpdateHookEndpoint = {};
declare type OrgsUpdateHookRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsDeleteHookEndpoint = {};
declare type OrgsDeleteHookRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsPingHookEndpoint = {};
declare type OrgsPingHookRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsGetOrgInstallationEndpoint = {};
declare type AppsGetOrgInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsFindOrgInstallationEndpoint = {};
declare type AppsFindOrgInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsGetRestrictionsForOrgEndpoint = {};
declare type InteractionsGetRestrictionsForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsAddOrUpdateRestrictionsForOrgEndpoint = {};
declare type InteractionsAddOrUpdateRestrictionsForOrgRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsRemoveRestrictionsForOrgEndpoint = {};
declare type InteractionsRemoveRestrictionsForOrgRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListPendingInvitationsEndpoint = {};
declare type OrgsListPendingInvitationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsCreateInvitationEndpoint = {};
declare type OrgsCreateInvitationRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListInvitationTeamsEndpoint = {};
declare type OrgsListInvitationTeamsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListForOrgEndpoint = {};
declare type IssuesListForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListMembersEndpoint = {};
declare type OrgsListMembersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsCheckMembershipEndpoint = {};
declare type OrgsCheckMembershipRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsRemoveMemberEndpoint = {};
declare type OrgsRemoveMemberRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsGetMembershipEndpoint = {};
declare type OrgsGetMembershipRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsAddOrUpdateMembershipEndpoint = {};
declare type OrgsAddOrUpdateMembershipRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsRemoveMembershipEndpoint = {};
declare type OrgsRemoveMembershipRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsStartForOrgEndpoint = {};
declare type MigrationsStartForOrgRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsListForOrgEndpoint = {};
declare type MigrationsListForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetStatusForOrgEndpoint = {};
declare type MigrationsGetStatusForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetArchiveForOrgEndpoint = {};
declare type MigrationsGetArchiveForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsDeleteArchiveForOrgEndpoint = {};
declare type MigrationsDeleteArchiveForOrgRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsUnlockRepoForOrgEndpoint = {};
declare type MigrationsUnlockRepoForOrgRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListOutsideCollaboratorsEndpoint = {};
declare type OrgsListOutsideCollaboratorsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsRemoveOutsideCollaboratorEndpoint = {};
declare type OrgsRemoveOutsideCollaboratorRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsConvertMemberToOutsideCollaboratorEndpoint = {};
declare type OrgsConvertMemberToOutsideCollaboratorRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListForOrgEndpoint = {};
declare type ProjectsListForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsCreateForOrgEndpoint = {};
declare type ProjectsCreateForOrgRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListPublicMembersEndpoint = {};
declare type OrgsListPublicMembersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsCheckPublicMembershipEndpoint = {};
declare type OrgsCheckPublicMembershipRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsPublicizeMembershipEndpoint = {};
declare type OrgsPublicizeMembershipRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsConcealMembershipEndpoint = {};
declare type OrgsConcealMembershipRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListForOrgEndpoint = {};
declare type ReposListForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateInOrgEndpoint = {};
declare type ReposCreateInOrgRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListIdPGroupsForOrgEndpoint = {};
declare type TeamsListIdPGroupsForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListEndpoint = {};
declare type TeamsListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsCreateEndpoint = {};
declare type TeamsCreateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetByNameEndpoint = {};
declare type TeamsGetByNameRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsGetCardEndpoint = {};
declare type ProjectsGetCardRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsUpdateCardEndpoint = {};
declare type ProjectsUpdateCardRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsDeleteCardEndpoint = {};
declare type ProjectsDeleteCardRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsMoveCardEndpoint = {};
declare type ProjectsMoveCardRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsGetColumnEndpoint = {};
declare type ProjectsGetColumnRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsUpdateColumnEndpoint = {};
declare type ProjectsUpdateColumnRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsDeleteColumnEndpoint = {};
declare type ProjectsDeleteColumnRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListCardsEndpoint = {};
declare type ProjectsListCardsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsCreateCardEndpoint = {};
declare type ProjectsCreateCardRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsMoveColumnEndpoint = {};
declare type ProjectsMoveColumnRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsGetEndpoint = {};
declare type ProjectsGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsUpdateEndpoint = {};
declare type ProjectsUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsDeleteEndpoint = {};
declare type ProjectsDeleteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListCollaboratorsEndpoint = {};
declare type ProjectsListCollaboratorsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsAddCollaboratorEndpoint = {};
declare type ProjectsAddCollaboratorRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsRemoveCollaboratorEndpoint = {};
declare type ProjectsRemoveCollaboratorRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsReviewUserPermissionLevelEndpoint = {};
declare type ProjectsReviewUserPermissionLevelRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListColumnsEndpoint = {};
declare type ProjectsListColumnsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsCreateColumnEndpoint = {};
declare type ProjectsCreateColumnRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type RateLimitGetEndpoint = {};
declare type RateLimitGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsDeleteEndpoint = {};
declare type ReactionsDeleteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetEndpoint = {};
declare type ReposGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateEndpoint = {};
declare type ReposUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteEndpoint = {};
declare type ReposDeleteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListAssigneesEndpoint = {};
declare type IssuesListAssigneesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesCheckAssigneeEndpoint = {};
declare type IssuesCheckAssigneeRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposEnableAutomatedSecurityFixesEndpoint = {};
declare type ReposEnableAutomatedSecurityFixesRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDisableAutomatedSecurityFixesEndpoint = {};
declare type ReposDisableAutomatedSecurityFixesRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListBranchesEndpoint = {};
declare type ReposListBranchesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetBranchEndpoint = {};
declare type ReposGetBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetBranchProtectionEndpoint = {};
declare type ReposGetBranchProtectionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateBranchProtectionEndpoint = {};
declare type ReposUpdateBranchProtectionRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveBranchProtectionEndpoint = {};
declare type ReposRemoveBranchProtectionRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetProtectedBranchAdminEnforcementEndpoint = {};
declare type ReposGetProtectedBranchAdminEnforcementRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchAdminEnforcementEndpoint = {};
declare type ReposAddProtectedBranchAdminEnforcementRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchAdminEnforcementEndpoint = {};
declare type ReposRemoveProtectedBranchAdminEnforcementRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetProtectedBranchPullRequestReviewEnforcementEndpoint = {};
declare type ReposGetProtectedBranchPullRequestReviewEnforcementRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateProtectedBranchPullRequestReviewEnforcementEndpoint = {};
declare type ReposUpdateProtectedBranchPullRequestReviewEnforcementRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchPullRequestReviewEnforcementEndpoint = {};
declare type ReposRemoveProtectedBranchPullRequestReviewEnforcementRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetProtectedBranchRequiredSignaturesEndpoint = {};
declare type ReposGetProtectedBranchRequiredSignaturesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchRequiredSignaturesEndpoint = {};
declare type ReposAddProtectedBranchRequiredSignaturesRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchRequiredSignaturesEndpoint = {};
declare type ReposRemoveProtectedBranchRequiredSignaturesRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetProtectedBranchRequiredStatusChecksEndpoint = {};
declare type ReposGetProtectedBranchRequiredStatusChecksRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateProtectedBranchRequiredStatusChecksEndpoint = {};
declare type ReposUpdateProtectedBranchRequiredStatusChecksRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchRequiredStatusChecksEndpoint = {};
declare type ReposRemoveProtectedBranchRequiredStatusChecksRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListProtectedBranchRequiredStatusChecksContextsEndpoint = {};
declare type ReposListProtectedBranchRequiredStatusChecksContextsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposReplaceProtectedBranchRequiredStatusChecksContextsEndpoint = {};
declare type ReposReplaceProtectedBranchRequiredStatusChecksContextsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchRequiredStatusChecksContextsEndpoint = {};
declare type ReposAddProtectedBranchRequiredStatusChecksContextsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchRequiredStatusChecksContextsEndpoint = {};
declare type ReposRemoveProtectedBranchRequiredStatusChecksContextsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetProtectedBranchRestrictionsEndpoint = {};
declare type ReposGetProtectedBranchRestrictionsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchRestrictionsEndpoint = {};
declare type ReposRemoveProtectedBranchRestrictionsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetAppsWithAccessToProtectedBranchEndpoint = {};
declare type ReposGetAppsWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListAppsWithAccessToProtectedBranchEndpoint = {};
declare type ReposListAppsWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposReplaceProtectedBranchAppRestrictionsEndpoint = {};
declare type ReposReplaceProtectedBranchAppRestrictionsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchAppRestrictionsEndpoint = {};
declare type ReposAddProtectedBranchAppRestrictionsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchAppRestrictionsEndpoint = {};
declare type ReposRemoveProtectedBranchAppRestrictionsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetTeamsWithAccessToProtectedBranchEndpoint = {};
declare type ReposGetTeamsWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListProtectedBranchTeamRestrictionsEndpoint = {};
declare type ReposListProtectedBranchTeamRestrictionsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListTeamsWithAccessToProtectedBranchEndpoint = {};
declare type ReposListTeamsWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposReplaceProtectedBranchTeamRestrictionsEndpoint = {};
declare type ReposReplaceProtectedBranchTeamRestrictionsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchTeamRestrictionsEndpoint = {};
declare type ReposAddProtectedBranchTeamRestrictionsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchTeamRestrictionsEndpoint = {};
declare type ReposRemoveProtectedBranchTeamRestrictionsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetUsersWithAccessToProtectedBranchEndpoint = {};
declare type ReposGetUsersWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListProtectedBranchUserRestrictionsEndpoint = {};
declare type ReposListProtectedBranchUserRestrictionsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListUsersWithAccessToProtectedBranchEndpoint = {};
declare type ReposListUsersWithAccessToProtectedBranchRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposReplaceProtectedBranchUserRestrictionsEndpoint = {};
declare type ReposReplaceProtectedBranchUserRestrictionsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddProtectedBranchUserRestrictionsEndpoint = {};
declare type ReposAddProtectedBranchUserRestrictionsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveProtectedBranchUserRestrictionsEndpoint = {};
declare type ReposRemoveProtectedBranchUserRestrictionsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksCreateEndpoint = {};
declare type ChecksCreateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksUpdateEndpoint = {};
declare type ChecksUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksGetEndpoint = {};
declare type ChecksGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksListAnnotationsEndpoint = {};
declare type ChecksListAnnotationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksCreateSuiteEndpoint = {};
declare type ChecksCreateSuiteRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksSetSuitesPreferencesEndpoint = {};
declare type ChecksSetSuitesPreferencesRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksGetSuiteEndpoint = {};
declare type ChecksGetSuiteRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksListForSuiteEndpoint = {};
declare type ChecksListForSuiteRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksRerequestSuiteEndpoint = {};
declare type ChecksRerequestSuiteRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListCollaboratorsEndpoint = {};
declare type ReposListCollaboratorsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCheckCollaboratorEndpoint = {};
declare type ReposCheckCollaboratorRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddCollaboratorEndpoint = {};
declare type ReposAddCollaboratorRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveCollaboratorEndpoint = {};
declare type ReposRemoveCollaboratorRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCollaboratorPermissionLevelEndpoint = {};
declare type ReposGetCollaboratorPermissionLevelRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListCommitCommentsEndpoint = {};
declare type ReposListCommitCommentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCommitCommentEndpoint = {};
declare type ReposGetCommitCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateCommitCommentEndpoint = {};
declare type ReposUpdateCommitCommentRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteCommitCommentEndpoint = {};
declare type ReposDeleteCommitCommentRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForCommitCommentEndpoint = {};
declare type ReactionsListForCommitCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForCommitCommentEndpoint = {};
declare type ReactionsCreateForCommitCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListCommitsEndpoint = {};
declare type ReposListCommitsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListBranchesForHeadCommitEndpoint = {};
declare type ReposListBranchesForHeadCommitRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListCommentsForCommitEndpoint = {};
declare type ReposListCommentsForCommitRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateCommitCommentEndpoint = {};
declare type ReposCreateCommitCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListPullRequestsAssociatedWithCommitEndpoint = {};
declare type ReposListPullRequestsAssociatedWithCommitRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCommitEndpoint = {};
declare type ReposGetCommitRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksListForRefEndpoint = {};
declare type ChecksListForRefRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ChecksListSuitesForRefEndpoint = {};
declare type ChecksListSuitesForRefRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCombinedStatusForRefEndpoint = {};
declare type ReposGetCombinedStatusForRefRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListStatusesForRefEndpoint = {};
declare type ReposListStatusesForRefRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type CodesOfConductGetForRepoEndpoint = {};
declare type CodesOfConductGetForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRetrieveCommunityProfileMetricsEndpoint = {};
declare type ReposRetrieveCommunityProfileMetricsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCompareCommitsEndpoint = {};
declare type ReposCompareCommitsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetContentsEndpoint = {};
declare type ReposGetContentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateOrUpdateFileEndpoint = {};
declare type ReposCreateOrUpdateFileRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateFileEndpoint = {};
declare type ReposCreateFileRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateFileEndpoint = {};
declare type ReposUpdateFileRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteFileEndpoint = {};
declare type ReposDeleteFileRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListContributorsEndpoint = {};
declare type ReposListContributorsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListDeploymentsEndpoint = {};
declare type ReposListDeploymentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateDeploymentEndpoint = {};
declare type ReposCreateDeploymentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetDeploymentEndpoint = {};
declare type ReposGetDeploymentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListDeploymentStatusesEndpoint = {};
declare type ReposListDeploymentStatusesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateDeploymentStatusEndpoint = {};
declare type ReposCreateDeploymentStatusRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetDeploymentStatusEndpoint = {};
declare type ReposGetDeploymentStatusRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateDispatchEventEndpoint = {};
declare type ReposCreateDispatchEventRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListDownloadsEndpoint = {};
declare type ReposListDownloadsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetDownloadEndpoint = {};
declare type ReposGetDownloadRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteDownloadEndpoint = {};
declare type ReposDeleteDownloadRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListRepoEventsEndpoint = {};
declare type ActivityListRepoEventsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListForksEndpoint = {};
declare type ReposListForksRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateForkEndpoint = {};
declare type ReposCreateForkRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitCreateBlobEndpoint = {};
declare type GitCreateBlobRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitGetBlobEndpoint = {};
declare type GitGetBlobRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitCreateCommitEndpoint = {};
declare type GitCreateCommitRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitGetCommitEndpoint = {};
declare type GitGetCommitRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitListMatchingRefsEndpoint = {};
declare type GitListMatchingRefsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitGetRefEndpoint = {};
declare type GitGetRefRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitCreateRefEndpoint = {};
declare type GitCreateRefRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitUpdateRefEndpoint = {};
declare type GitUpdateRefRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitDeleteRefEndpoint = {};
declare type GitDeleteRefRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitCreateTagEndpoint = {};
declare type GitCreateTagRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitGetTagEndpoint = {};
declare type GitGetTagRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitCreateTreeEndpoint = {};
declare type GitCreateTreeRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GitGetTreeEndpoint = {};
declare type GitGetTreeRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListHooksEndpoint = {};
declare type ReposListHooksRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateHookEndpoint = {};
declare type ReposCreateHookRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetHookEndpoint = {};
declare type ReposGetHookRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateHookEndpoint = {};
declare type ReposUpdateHookRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteHookEndpoint = {};
declare type ReposDeleteHookRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposPingHookEndpoint = {};
declare type ReposPingHookRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposTestPushHookEndpoint = {};
declare type ReposTestPushHookRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsStartImportEndpoint = {};
declare type MigrationsStartImportRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetImportProgressEndpoint = {};
declare type MigrationsGetImportProgressRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsUpdateImportEndpoint = {};
declare type MigrationsUpdateImportRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsCancelImportEndpoint = {};
declare type MigrationsCancelImportRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetCommitAuthorsEndpoint = {};
declare type MigrationsGetCommitAuthorsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsMapCommitAuthorEndpoint = {};
declare type MigrationsMapCommitAuthorRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetLargeFilesEndpoint = {};
declare type MigrationsGetLargeFilesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsSetLfsPreferenceEndpoint = {};
declare type MigrationsSetLfsPreferenceRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsGetRepoInstallationEndpoint = {};
declare type AppsGetRepoInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsFindRepoInstallationEndpoint = {};
declare type AppsFindRepoInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsGetRestrictionsForRepoEndpoint = {};
declare type InteractionsGetRestrictionsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsAddOrUpdateRestrictionsForRepoEndpoint = {};
declare type InteractionsAddOrUpdateRestrictionsForRepoRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type InteractionsRemoveRestrictionsForRepoEndpoint = {};
declare type InteractionsRemoveRestrictionsForRepoRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListInvitationsEndpoint = {};
declare type ReposListInvitationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteInvitationEndpoint = {};
declare type ReposDeleteInvitationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateInvitationEndpoint = {};
declare type ReposUpdateInvitationRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListForRepoEndpoint = {};
declare type IssuesListForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesCreateEndpoint = {};
declare type IssuesCreateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListCommentsForRepoEndpoint = {};
declare type IssuesListCommentsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesGetCommentEndpoint = {};
declare type IssuesGetCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesUpdateCommentEndpoint = {};
declare type IssuesUpdateCommentRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesDeleteCommentEndpoint = {};
declare type IssuesDeleteCommentRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForIssueCommentEndpoint = {};
declare type ReactionsListForIssueCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForIssueCommentEndpoint = {};
declare type ReactionsCreateForIssueCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListEventsForRepoEndpoint = {};
declare type IssuesListEventsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesGetEventEndpoint = {};
declare type IssuesGetEventRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesGetEndpoint = {};
declare type IssuesGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesUpdateEndpoint = {};
declare type IssuesUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesAddAssigneesEndpoint = {};
declare type IssuesAddAssigneesRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesRemoveAssigneesEndpoint = {};
declare type IssuesRemoveAssigneesRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListCommentsEndpoint = {};
declare type IssuesListCommentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesCreateCommentEndpoint = {};
declare type IssuesCreateCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListEventsEndpoint = {};
declare type IssuesListEventsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListLabelsOnIssueEndpoint = {};
declare type IssuesListLabelsOnIssueRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesAddLabelsEndpoint = {};
declare type IssuesAddLabelsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesReplaceLabelsEndpoint = {};
declare type IssuesReplaceLabelsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesRemoveLabelsEndpoint = {};
declare type IssuesRemoveLabelsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesRemoveLabelEndpoint = {};
declare type IssuesRemoveLabelRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesLockEndpoint = {};
declare type IssuesLockRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesUnlockEndpoint = {};
declare type IssuesUnlockRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForIssueEndpoint = {};
declare type ReactionsListForIssueRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForIssueEndpoint = {};
declare type ReactionsCreateForIssueRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListEventsForTimelineEndpoint = {};
declare type IssuesListEventsForTimelineRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListDeployKeysEndpoint = {};
declare type ReposListDeployKeysRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAddDeployKeyEndpoint = {};
declare type ReposAddDeployKeyRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetDeployKeyEndpoint = {};
declare type ReposGetDeployKeyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRemoveDeployKeyEndpoint = {};
declare type ReposRemoveDeployKeyRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListLabelsForRepoEndpoint = {};
declare type IssuesListLabelsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesCreateLabelEndpoint = {};
declare type IssuesCreateLabelRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesGetLabelEndpoint = {};
declare type IssuesGetLabelRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesUpdateLabelEndpoint = {};
declare type IssuesUpdateLabelRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesDeleteLabelEndpoint = {};
declare type IssuesDeleteLabelRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListLanguagesEndpoint = {};
declare type ReposListLanguagesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type LicensesGetForRepoEndpoint = {};
declare type LicensesGetForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposMergeEndpoint = {};
declare type ReposMergeRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListMilestonesForRepoEndpoint = {};
declare type IssuesListMilestonesForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesCreateMilestoneEndpoint = {};
declare type IssuesCreateMilestoneRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesGetMilestoneEndpoint = {};
declare type IssuesGetMilestoneRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesUpdateMilestoneEndpoint = {};
declare type IssuesUpdateMilestoneRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesDeleteMilestoneEndpoint = {};
declare type IssuesDeleteMilestoneRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListLabelsForMilestoneEndpoint = {};
declare type IssuesListLabelsForMilestoneRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListNotificationsForRepoEndpoint = {};
declare type ActivityListNotificationsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityMarkNotificationsAsReadForRepoEndpoint = {};
declare type ActivityMarkNotificationsAsReadForRepoRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetPagesEndpoint = {};
declare type ReposGetPagesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposEnablePagesSiteEndpoint = {};
declare type ReposEnablePagesSiteRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDisablePagesSiteEndpoint = {};
declare type ReposDisablePagesSiteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateInformationAboutPagesSiteEndpoint = {};
declare type ReposUpdateInformationAboutPagesSiteRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposRequestPageBuildEndpoint = {};
declare type ReposRequestPageBuildRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListPagesBuildsEndpoint = {};
declare type ReposListPagesBuildsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetLatestPagesBuildEndpoint = {};
declare type ReposGetLatestPagesBuildRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetPagesBuildEndpoint = {};
declare type ReposGetPagesBuildRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListForRepoEndpoint = {};
declare type ProjectsListForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsCreateForRepoEndpoint = {};
declare type ProjectsCreateForRepoRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListEndpoint = {};
declare type PullsListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateEndpoint = {};
declare type PullsCreateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListCommentsForRepoEndpoint = {};
declare type PullsListCommentsForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsGetCommentEndpoint = {};
declare type PullsGetCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsUpdateCommentEndpoint = {};
declare type PullsUpdateCommentRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsDeleteCommentEndpoint = {};
declare type PullsDeleteCommentRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForPullRequestReviewCommentEndpoint = {};
declare type ReactionsListForPullRequestReviewCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForPullRequestReviewCommentEndpoint = {};
declare type ReactionsCreateForPullRequestReviewCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsGetEndpoint = {};
declare type PullsGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsUpdateEndpoint = {};
declare type PullsUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListCommentsEndpoint = {};
declare type PullsListCommentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateCommentEndpoint = {};
declare type PullsCreateCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateCommentReplyEndpoint = {};
declare type PullsCreateCommentReplyRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateReviewCommentReplyEndpoint = {};
declare type PullsCreateReviewCommentReplyRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListCommitsEndpoint = {};
declare type PullsListCommitsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListFilesEndpoint = {};
declare type PullsListFilesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCheckIfMergedEndpoint = {};
declare type PullsCheckIfMergedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsMergeEndpoint = {};
declare type PullsMergeRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListReviewRequestsEndpoint = {};
declare type PullsListReviewRequestsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateReviewRequestEndpoint = {};
declare type PullsCreateReviewRequestRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsDeleteReviewRequestEndpoint = {};
declare type PullsDeleteReviewRequestRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsListReviewsEndpoint = {};
declare type PullsListReviewsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsCreateReviewEndpoint = {};
declare type PullsCreateReviewRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsGetReviewEndpoint = {};
declare type PullsGetReviewRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsDeletePendingReviewEndpoint = {};
declare type PullsDeletePendingReviewRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsUpdateReviewEndpoint = {};
declare type PullsUpdateReviewRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsGetCommentsForReviewEndpoint = {};
declare type PullsGetCommentsForReviewRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsDismissReviewEndpoint = {};
declare type PullsDismissReviewRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsSubmitReviewEndpoint = {};
declare type PullsSubmitReviewRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type PullsUpdateBranchEndpoint = {};
declare type PullsUpdateBranchRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetReadmeEndpoint = {};
declare type ReposGetReadmeRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListReleasesEndpoint = {};
declare type ReposListReleasesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateReleaseEndpoint = {};
declare type ReposCreateReleaseRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetReleaseAssetEndpoint = {};
declare type ReposGetReleaseAssetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateReleaseAssetEndpoint = {};
declare type ReposUpdateReleaseAssetRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteReleaseAssetEndpoint = {};
declare type ReposDeleteReleaseAssetRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetLatestReleaseEndpoint = {};
declare type ReposGetLatestReleaseRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetReleaseByTagEndpoint = {};
declare type ReposGetReleaseByTagRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetReleaseEndpoint = {};
declare type ReposGetReleaseRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposUpdateReleaseEndpoint = {};
declare type ReposUpdateReleaseRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeleteReleaseEndpoint = {};
declare type ReposDeleteReleaseRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListAssetsForReleaseEndpoint = {};
declare type ReposListAssetsForReleaseRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListStargazersForRepoEndpoint = {};
declare type ActivityListStargazersForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCodeFrequencyStatsEndpoint = {};
declare type ReposGetCodeFrequencyStatsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetCommitActivityStatsEndpoint = {};
declare type ReposGetCommitActivityStatsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetContributorsStatsEndpoint = {};
declare type ReposGetContributorsStatsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetParticipationStatsEndpoint = {};
declare type ReposGetParticipationStatsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetPunchCardStatsEndpoint = {};
declare type ReposGetPunchCardStatsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateStatusEndpoint = {};
declare type ReposCreateStatusRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListWatchersForRepoEndpoint = {};
declare type ActivityListWatchersForRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityGetRepoSubscriptionEndpoint = {};
declare type ActivityGetRepoSubscriptionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivitySetRepoSubscriptionEndpoint = {};
declare type ActivitySetRepoSubscriptionRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityDeleteRepoSubscriptionEndpoint = {};
declare type ActivityDeleteRepoSubscriptionRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListTagsEndpoint = {};
declare type ReposListTagsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListTeamsEndpoint = {};
declare type ReposListTeamsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListTopicsEndpoint = {};
declare type ReposListTopicsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposReplaceTopicsEndpoint = {};
declare type ReposReplaceTopicsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetClonesEndpoint = {};
declare type ReposGetClonesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetTopPathsEndpoint = {};
declare type ReposGetTopPathsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetTopReferrersEndpoint = {};
declare type ReposGetTopReferrersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetViewsEndpoint = {};
declare type ReposGetViewsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposTransferEndpoint = {};
declare type ReposTransferRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCheckVulnerabilityAlertsEndpoint = {};
declare type ReposCheckVulnerabilityAlertsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposEnableVulnerabilityAlertsEndpoint = {};
declare type ReposEnableVulnerabilityAlertsRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDisableVulnerabilityAlertsEndpoint = {};
declare type ReposDisableVulnerabilityAlertsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposGetArchiveLinkEndpoint = {};
declare type ReposGetArchiveLinkRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateUsingTemplateEndpoint = {};
declare type ReposCreateUsingTemplateRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListPublicEndpoint = {};
declare type ReposListPublicRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimListProvisionedIdentitiesEndpoint = {};
declare type ScimListProvisionedIdentitiesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimProvisionAndInviteUsersEndpoint = {};
declare type ScimProvisionAndInviteUsersRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimProvisionInviteUsersEndpoint = {};
declare type ScimProvisionInviteUsersRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimGetProvisioningDetailsForUserEndpoint = {};
declare type ScimGetProvisioningDetailsForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimReplaceProvisionedUserInformationEndpoint = {};
declare type ScimReplaceProvisionedUserInformationRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimUpdateProvisionedOrgMembershipEndpoint = {};
declare type ScimUpdateProvisionedOrgMembershipRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimUpdateUserAttributeEndpoint = {};
declare type ScimUpdateUserAttributeRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ScimRemoveUserFromOrgEndpoint = {};
declare type ScimRemoveUserFromOrgRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchCodeEndpoint = {};
declare type SearchCodeRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchCommitsEndpoint = {};
declare type SearchCommitsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchIssuesAndPullRequestsEndpoint = {};
declare type SearchIssuesAndPullRequestsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchIssuesEndpoint = {};
declare type SearchIssuesRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchLabelsEndpoint = {};
declare type SearchLabelsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchReposEndpoint = {};
declare type SearchReposRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchTopicsEndpoint = {};
declare type SearchTopicsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type SearchUsersEndpoint = {};
declare type SearchUsersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetEndpoint = {};
declare type TeamsGetRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsUpdateEndpoint = {};
declare type TeamsUpdateRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsDeleteEndpoint = {};
declare type TeamsDeleteRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListDiscussionsEndpoint = {};
declare type TeamsListDiscussionsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsCreateDiscussionEndpoint = {};
declare type TeamsCreateDiscussionRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetDiscussionEndpoint = {};
declare type TeamsGetDiscussionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsUpdateDiscussionEndpoint = {};
declare type TeamsUpdateDiscussionRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsDeleteDiscussionEndpoint = {};
declare type TeamsDeleteDiscussionRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListDiscussionCommentsEndpoint = {};
declare type TeamsListDiscussionCommentsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsCreateDiscussionCommentEndpoint = {};
declare type TeamsCreateDiscussionCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetDiscussionCommentEndpoint = {};
declare type TeamsGetDiscussionCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsUpdateDiscussionCommentEndpoint = {};
declare type TeamsUpdateDiscussionCommentRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsDeleteDiscussionCommentEndpoint = {};
declare type TeamsDeleteDiscussionCommentRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForTeamDiscussionCommentEndpoint = {};
declare type ReactionsListForTeamDiscussionCommentRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForTeamDiscussionCommentEndpoint = {};
declare type ReactionsCreateForTeamDiscussionCommentRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsListForTeamDiscussionEndpoint = {};
declare type ReactionsListForTeamDiscussionRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReactionsCreateForTeamDiscussionEndpoint = {};
declare type ReactionsCreateForTeamDiscussionRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListPendingInvitationsEndpoint = {};
declare type TeamsListPendingInvitationsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListMembersEndpoint = {};
declare type TeamsListMembersRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetMemberEndpoint = {};
declare type TeamsGetMemberRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsAddMemberEndpoint = {};
declare type TeamsAddMemberRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsRemoveMemberEndpoint = {};
declare type TeamsRemoveMemberRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsGetMembershipEndpoint = {};
declare type TeamsGetMembershipRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsAddOrUpdateMembershipEndpoint = {};
declare type TeamsAddOrUpdateMembershipRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsRemoveMembershipEndpoint = {};
declare type TeamsRemoveMembershipRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListProjectsEndpoint = {};
declare type TeamsListProjectsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsReviewProjectEndpoint = {};
declare type TeamsReviewProjectRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsAddOrUpdateProjectEndpoint = {};
declare type TeamsAddOrUpdateProjectRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsRemoveProjectEndpoint = {};
declare type TeamsRemoveProjectRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListReposEndpoint = {};
declare type TeamsListReposRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsCheckManagesRepoEndpoint = {};
declare type TeamsCheckManagesRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsAddOrUpdateRepoEndpoint = {};
declare type TeamsAddOrUpdateRepoRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsRemoveRepoEndpoint = {};
declare type TeamsRemoveRepoRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListIdPGroupsEndpoint = {};
declare type TeamsListIdPGroupsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsCreateOrUpdateIdPGroupConnectionsEndpoint = {};
declare type TeamsCreateOrUpdateIdPGroupConnectionsRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListChildEndpoint = {};
declare type TeamsListChildRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersGetAuthenticatedEndpoint = {};
declare type UsersGetAuthenticatedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersUpdateAuthenticatedEndpoint = {};
declare type UsersUpdateAuthenticatedRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListBlockedEndpoint = {};
declare type UsersListBlockedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersCheckBlockedEndpoint = {};
declare type UsersCheckBlockedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersBlockEndpoint = {};
declare type UsersBlockRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersUnblockEndpoint = {};
declare type UsersUnblockRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersTogglePrimaryEmailVisibilityEndpoint = {};
declare type UsersTogglePrimaryEmailVisibilityRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListEmailsEndpoint = {};
declare type UsersListEmailsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersAddEmailsEndpoint = {};
declare type UsersAddEmailsRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersDeleteEmailsEndpoint = {};
declare type UsersDeleteEmailsRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListFollowersForAuthenticatedUserEndpoint = {};
declare type UsersListFollowersForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListFollowingForAuthenticatedUserEndpoint = {};
declare type UsersListFollowingForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersCheckFollowingEndpoint = {};
declare type UsersCheckFollowingRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersFollowEndpoint = {};
declare type UsersFollowRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersUnfollowEndpoint = {};
declare type UsersUnfollowRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListGpgKeysEndpoint = {};
declare type UsersListGpgKeysRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersCreateGpgKeyEndpoint = {};
declare type UsersCreateGpgKeyRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersGetGpgKeyEndpoint = {};
declare type UsersGetGpgKeyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersDeleteGpgKeyEndpoint = {};
declare type UsersDeleteGpgKeyRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListInstallationsForAuthenticatedUserEndpoint = {};
declare type AppsListInstallationsForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListInstallationReposForAuthenticatedUserEndpoint = {};
declare type AppsListInstallationReposForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsAddRepoToInstallationEndpoint = {};
declare type AppsAddRepoToInstallationRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsRemoveRepoFromInstallationEndpoint = {};
declare type AppsRemoveRepoFromInstallationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type IssuesListForAuthenticatedUserEndpoint = {};
declare type IssuesListForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListPublicKeysEndpoint = {};
declare type UsersListPublicKeysRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersCreatePublicKeyEndpoint = {};
declare type UsersCreatePublicKeyRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersGetPublicKeyEndpoint = {};
declare type UsersGetPublicKeyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersDeletePublicKeyEndpoint = {};
declare type UsersDeletePublicKeyRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListMarketplacePurchasesForAuthenticatedUserEndpoint = {};
declare type AppsListMarketplacePurchasesForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsListMarketplacePurchasesForAuthenticatedUserStubbedEndpoint = {};
declare type AppsListMarketplacePurchasesForAuthenticatedUserStubbedRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListMembershipsEndpoint = {};
declare type OrgsListMembershipsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsGetMembershipForAuthenticatedUserEndpoint = {};
declare type OrgsGetMembershipForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsUpdateMembershipEndpoint = {};
declare type OrgsUpdateMembershipRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsStartForAuthenticatedUserEndpoint = {};
declare type MigrationsStartForAuthenticatedUserRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsListForAuthenticatedUserEndpoint = {};
declare type MigrationsListForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetStatusForAuthenticatedUserEndpoint = {};
declare type MigrationsGetStatusForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsGetArchiveForAuthenticatedUserEndpoint = {};
declare type MigrationsGetArchiveForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsDeleteArchiveForAuthenticatedUserEndpoint = {};
declare type MigrationsDeleteArchiveForAuthenticatedUserRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type MigrationsUnlockRepoForAuthenticatedUserEndpoint = {};
declare type MigrationsUnlockRepoForAuthenticatedUserRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListForAuthenticatedUserEndpoint = {};
declare type OrgsListForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsCreateForAuthenticatedUserEndpoint = {};
declare type ProjectsCreateForAuthenticatedUserRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListPublicEmailsEndpoint = {};
declare type UsersListPublicEmailsRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListEndpoint = {};
declare type ReposListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposCreateForAuthenticatedUserEndpoint = {};
declare type ReposCreateForAuthenticatedUserRequestOptions = {
    method: "POST";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListInvitationsForAuthenticatedUserEndpoint = {};
declare type ReposListInvitationsForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposAcceptInvitationEndpoint = {};
declare type ReposAcceptInvitationRequestOptions = {
    method: "PATCH";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposDeclineInvitationEndpoint = {};
declare type ReposDeclineInvitationRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListReposStarredByAuthenticatedUserEndpoint = {};
declare type ActivityListReposStarredByAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityCheckStarringRepoEndpoint = {};
declare type ActivityCheckStarringRepoRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityStarRepoEndpoint = {};
declare type ActivityStarRepoRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityUnstarRepoEndpoint = {};
declare type ActivityUnstarRepoRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListWatchedReposForAuthenticatedUserEndpoint = {};
declare type ActivityListWatchedReposForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityCheckWatchingRepoLegacyEndpoint = {};
declare type ActivityCheckWatchingRepoLegacyRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityWatchRepoLegacyEndpoint = {};
declare type ActivityWatchRepoLegacyRequestOptions = {
    method: "PUT";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityStopWatchingRepoLegacyEndpoint = {};
declare type ActivityStopWatchingRepoLegacyRequestOptions = {
    method: "DELETE";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type TeamsListForAuthenticatedUserEndpoint = {};
declare type TeamsListForAuthenticatedUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListEndpoint = {};
declare type UsersListRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersGetByUsernameEndpoint = {};
declare type UsersGetByUsernameRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListEventsForUserEndpoint = {};
declare type ActivityListEventsForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListEventsForOrgEndpoint = {};
declare type ActivityListEventsForOrgRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListPublicEventsForUserEndpoint = {};
declare type ActivityListPublicEventsForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListFollowersForUserEndpoint = {};
declare type UsersListFollowersForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListFollowingForUserEndpoint = {};
declare type UsersListFollowingForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersCheckFollowingForUserEndpoint = {};
declare type UsersCheckFollowingForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type GistsListPublicForUserEndpoint = {};
declare type GistsListPublicForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListGpgKeysForUserEndpoint = {};
declare type UsersListGpgKeysForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersGetContextForUserEndpoint = {};
declare type UsersGetContextForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsGetUserInstallationEndpoint = {};
declare type AppsGetUserInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type AppsFindUserInstallationEndpoint = {};
declare type AppsFindUserInstallationRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type UsersListPublicKeysForUserEndpoint = {};
declare type UsersListPublicKeysForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type OrgsListForUserEndpoint = {};
declare type OrgsListForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ProjectsListForUserEndpoint = {};
declare type ProjectsListForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListReceivedEventsForUserEndpoint = {};
declare type ActivityListReceivedEventsForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListReceivedPublicEventsForUserEndpoint = {};
declare type ActivityListReceivedPublicEventsForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ReposListForUserEndpoint = {};
declare type ReposListForUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListReposStarredByUserEndpoint = {};
declare type ActivityListReposStarredByUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
declare type ActivityListReposWatchedByUserEndpoint = {};
declare type ActivityListReposWatchedByUserRequestOptions = {
    method: "GET";
    url: Url;
    headers: Headers;
    request: EndpointRequestOptions;
};
export {};
