"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var errors_1 = require("../errors");
var Scope;
(function (Scope) {
    Scope["prod"] = "prod";
    Scope["dev"] = "dev";
})(Scope = exports.Scope || (exports.Scope = {}));
var LockfileType;
(function (LockfileType) {
    LockfileType["npm"] = "npm";
    LockfileType["yarn"] = "yarn";
})(LockfileType = exports.LockfileType || (exports.LockfileType = {}));
function parseManifestFile(manifestFileContents) {
    try {
        return JSON.parse(manifestFileContents);
    }
    catch (e) {
        throw new errors_1.InvalidUserInputError('package.json parsing failed with error ' +
            e.message);
    }
}
exports.parseManifestFile = parseManifestFile;
function getTopLevelDeps(targetFile, includeDev) {
    var dependencies = [];
    var dependenciesIterator = _.entries(tslib_1.__assign({}, targetFile.dependencies, (includeDev ? targetFile.devDependencies : null)));
    for (var _i = 0, dependenciesIterator_1 = dependenciesIterator; _i < dependenciesIterator_1.length; _i++) {
        var _a = dependenciesIterator_1[_i], name = _a[0], version = _a[1];
        dependencies.push({
            dev: (includeDev && targetFile.devDependencies) ?
                !!targetFile.devDependencies[name] : false,
            name: name,
            version: version,
        });
    }
    return dependencies;
}
exports.getTopLevelDeps = getTopLevelDeps;
function createPkgTreeFromDep(dep) {
    var pkgTree = {
        dependencies: {},
        labels: {
            scope: dep.dev ? Scope.dev : Scope.prod,
        },
        name: dep.name,
        version: dep.version,
    };
    return pkgTree;
}
exports.createPkgTreeFromDep = createPkgTreeFromDep;
function getYarnWorkspaces(targetFile) {
    try {
        var packageJson = parseManifestFile(targetFile);
        if (!!packageJson.workspaces && !!packageJson.private) {
            return packageJson.workspaces.slice();
        }
        return false;
    }
    catch (e) {
        throw new errors_1.InvalidUserInputError('package.json parsing failed with ' +
            ("error " + e.message));
    }
}
exports.getYarnWorkspaces = getYarnWorkspaces;
//# sourceMappingURL=index.js.map