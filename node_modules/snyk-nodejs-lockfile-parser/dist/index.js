"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("source-map-support/register");
var fs = require("fs");
var path = require("path");
var _ = require("lodash");
var parsers_1 = require("./parsers");
exports.Scope = parsers_1.Scope;
exports.LockfileType = parsers_1.LockfileType;
exports.getYarnWorkspaces = parsers_1.getYarnWorkspaces;
var package_lock_parser_1 = require("./parsers/package-lock-parser");
var yarn_lock_parse_1 = require("./parsers/yarn-lock-parse");
var get_node_runtime_version_1 = require("./get-node-runtime-version");
var errors_1 = require("./errors");
exports.UnsupportedRuntimeError = errors_1.UnsupportedRuntimeError;
exports.InvalidUserInputError = errors_1.InvalidUserInputError;
exports.OutOfSyncError = errors_1.OutOfSyncError;
function buildDepTree(manifestFileContents, lockFileContents, includeDev, lockfileType, strict, defaultManifestFileName) {
    if (includeDev === void 0) { includeDev = false; }
    if (strict === void 0) { strict = true; }
    if (defaultManifestFileName === void 0) { defaultManifestFileName = 'package.json'; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var lockfileParser, manifestFile, lockFile;
        return tslib_1.__generator(this, function (_a) {
            if (!lockfileType) {
                lockfileType = parsers_1.LockfileType.npm;
            }
            switch (lockfileType) {
                case parsers_1.LockfileType.npm:
                    lockfileParser = new package_lock_parser_1.PackageLockParser();
                    break;
                case parsers_1.LockfileType.yarn:
                    // parsing yarn.lock is supported for Node.js v6 and higher
                    if (get_node_runtime_version_1.default() >= 6) {
                        lockfileParser = new yarn_lock_parse_1.YarnLockParser();
                    }
                    else {
                        throw new errors_1.UnsupportedRuntimeError('Parsing `yarn.lock` is not ' +
                            'supported on Node.js version less than 6. Please upgrade your ' +
                            'Node.js environment or use `package-lock.json`');
                    }
                    break;
                default:
                    throw new errors_1.InvalidUserInputError('Unsupported lockfile type ' +
                        (lockfileType + " provided. Only 'npm' or 'yarn' is currently ") +
                        'supported.');
            }
            manifestFile = parsers_1.parseManifestFile(manifestFileContents);
            if (!manifestFile.name) {
                manifestFile.name = defaultManifestFileName;
            }
            lockFile = lockfileParser.parseLockFile(lockFileContents);
            return [2 /*return*/, lockfileParser.getDependencyTree(manifestFile, lockFile, includeDev, strict)];
        });
    });
}
exports.buildDepTree = buildDepTree;
function buildDepTreeFromFiles(root, manifestFilePath, lockFilePath, includeDev, strict) {
    if (includeDev === void 0) { includeDev = false; }
    if (strict === void 0) { strict = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var lockFileType, manifestFileFullPath, lockFileFullPath, manifestFileContents, lockFileContents;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!root || !manifestFilePath || !lockFilePath) {
                        throw new Error('Missing required parameters for buildDepTreeFromFiles()');
                    }
                    if (_.endsWith(lockFilePath, 'package-lock.json')) {
                        lockFileType = parsers_1.LockfileType.npm;
                    }
                    else if (_.endsWith(lockFilePath, 'yarn.lock')) {
                        lockFileType = parsers_1.LockfileType.yarn;
                    }
                    else {
                        throw new errors_1.InvalidUserInputError("Unknown lockfile " + lockFilePath + ". " +
                            'Please provide either package-lock.json or yarn.lock.');
                    }
                    manifestFileFullPath = path.resolve(root, manifestFilePath);
                    lockFileFullPath = path.resolve(root, lockFilePath);
                    if (!fs.existsSync(manifestFileFullPath)) {
                        throw new errors_1.InvalidUserInputError('Target file package.json not found at ' +
                            ("location: " + manifestFileFullPath));
                    }
                    if (!fs.existsSync(lockFileFullPath)) {
                        throw new errors_1.InvalidUserInputError('Lockfile not found at location: ' +
                            lockFileFullPath);
                    }
                    manifestFileContents = fs.readFileSync(manifestFileFullPath, 'utf-8');
                    lockFileContents = fs.readFileSync(lockFileFullPath, 'utf-8');
                    return [4 /*yield*/, buildDepTree(manifestFileContents, lockFileContents, includeDev, lockFileType, strict, manifestFilePath)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.buildDepTreeFromFiles = buildDepTreeFromFiles;
function getYarnWorkspacesFromFiles(root, manifestFilePath) {
    if (!root || !manifestFilePath) {
        throw new Error('Missing required parameters for getYarnWorkspacesFromFiles()');
    }
    var manifestFileFullPath = path.resolve(root, manifestFilePath);
    if (!fs.existsSync(manifestFileFullPath)) {
        throw new errors_1.InvalidUserInputError('Target file package.json not found at ' +
            ("location: " + manifestFileFullPath));
    }
    var manifestFileContents = fs.readFileSync(manifestFileFullPath, 'utf-8');
    return parsers_1.getYarnWorkspaces(manifestFileContents);
}
exports.getYarnWorkspacesFromFiles = getYarnWorkspacesFromFiles;
//# sourceMappingURL=index.js.map