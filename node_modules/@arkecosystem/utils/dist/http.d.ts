/// <reference types="node" />
import { RequestOptions } from "https";
import { Primitive } from "type-fest";
export declare type HttpOptions = RequestOptions & {
    body?: Record<string, Primitive>;
};
export declare type HttpResponse = {
    method: string | undefined;
    statusCode: number | undefined;
    statusMessage: string | undefined;
    data: any;
    headers: string[];
};
export declare class HttpError extends Error {
    constructor(response: HttpResponse, error?: Error);
}
export declare const http: {
    get: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
    head: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
    post: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
    put: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
    patch: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
    delete: (url: string, opts?: HttpOptions | undefined) => Promise<HttpResponse>;
};
