"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns unique items.
 *
 * @param source The source to filter
 */
function uniq(source) {
    var seen = [];
    for (var _i = 0, source_1 = source; _i < source_1.length; _i++) {
        var s = source_1[_i];
        if (seen.includes(s)) {
            continue;
        }
        seen.push(s);
    }
    return seen;
}
exports.uniq = uniq;
/**
 * Does a `map` and a `filter` in one pass.
 *
 * @param source The source to filter and map
 * @param iteratee The iteratee.
 */
function filterMap(source, iteratee) {
    var result = [];
    var index = 0;
    for (var _i = 0, source_2 = source; _i < source_2.length; _i++) {
        var item = source_2[_i];
        var mapped = iteratee(item, index++);
        if (mapped === false)
            continue;
        result.push(mapped);
    }
    return result;
}
exports.filterMap = filterMap;
/**
 * Merges a sequence of objects into a single object using `reduce`.
 *
 * @param source An array of objects to merge.
 */
function mergeObjects(source) {
    return source.reduce(function (accum, next) { return (__assign({}, accum, next)); }, {});
}
exports.mergeObjects = mergeObjects;
/**
 * Returns the assumed types package name.
 * @param name Package name
 */
function typed(name) {
    return "@types/" + name;
}
exports.typed = typed;
/**
 * Returns the assumed code package name based on a types package name.
 * @param name
 */
function untyped(name) {
    var prefix = '@types/';
    if (!name.startsWith(prefix)) {
        return name;
    }
    name = name.substring(prefix.length);
    var splat = name.split('__');
    if (splat.length === 2) {
        return "@" + splat[0] + "/" + splat[1];
    }
    return name;
}
exports.untyped = untyped;
/**
 * Orders an object.
 * @param source
 */
function orderObject(source, comparer) {
    var keys = Object.keys(source).sort(comparer);
    var result = {};
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        result[key] = source[key];
    }
    return result;
}
exports.orderObject = orderObject;
/**
 * Promisifies the specified function.
 *
 * @param fn
 */
function promisify(fn) {
    return function promisified() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            fn.apply(void 0, args.concat([function callback(err, result) {
                    // Edge case with `fs.exists`.
                    if (arguments.length === 1 && typeof err === 'boolean') {
                        return resolve(err);
                    }
                    return !err ? resolve(result) : reject(err);
                }]));
        });
    };
}
exports.promisify = promisify;
/**
 * Flattens a 2-dimensional array.
 *
 * @param source
 */
function flatten(source) {
    var result = [];
    for (var _i = 0, source_3 = source; _i < source_3.length; _i++) {
        var items = source_3[_i];
        for (var _a = 0, items_1 = items; _a < items_1.length; _a++) {
            var item = items_1[_a];
            result.push(item);
        }
    }
    return result;
}
exports.flatten = flatten;
/**
 * Async memoize.
 *
 * @param fn
 */
function memoizeAsync(fn) {
    var cache = new Map();
    function run() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fn.apply(void 0, args)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_1 = _a.sent();
                        cache.delete(args[0]);
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var key, p;
            return __generator(this, function (_a) {
                key = args[0];
                if (cache.has(key)) {
                    return [2 /*return*/, cache.get(key)];
                }
                p = run.apply(void 0, args);
                cache.set(key, p);
                return [2 /*return*/, p];
            });
        });
    };
}
exports.memoizeAsync = memoizeAsync;
/**
 * Ensures that we have a valid workspaces array.
 *
 * @param data
 */
function ensureWorkspacesArray(data) {
    if (!data) {
        return [];
    }
    if (!Array.isArray(data)) {
        return ensureWorkspacesArray(data.packages);
    }
    // tslint:disable-next-line
    if (!data.every(function (s) { return typeof s === 'string'; })) {
        return [];
    }
    return data;
}
exports.ensureWorkspacesArray = ensureWorkspacesArray;
//# sourceMappingURL=util.js.map