"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var awilix_1 = require("awilix");
var chalk_1 = __importDefault(require("chalk"));
var path = __importStar(require("path"));
var C = __importStar(require("./cli-util"));
var type_syncer_1 = require("./type-syncer");
var type_definition_source_1 = require("./type-definition-source");
var package_json_file_service_1 = require("./package-json-file-service");
var globber_1 = require("./globber");
var package_source_1 = require("./package-source");
/**
 * Starts the TypeSync CLI.
 */
function startCli() {
    return __awaiter(this, void 0, void 0, function () {
        var container, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    container = awilix_1.createContainer({
                        injectionMode: awilix_1.InjectionMode.CLASSIC
                    }).register({
                        typeDefinitionSource: awilix_1.asFunction(type_definition_source_1.createTypeDefinitionSource).singleton(),
                        packageJSONService: awilix_1.asFunction(package_json_file_service_1.createPackageJSONFileService).singleton(),
                        packageSource: awilix_1.asFunction(package_source_1.createPackageSource).singleton(),
                        globber: awilix_1.asFunction(globber_1.createGlobber).singleton(),
                        typeSyncer: awilix_1.asFunction(type_syncer_1.createTypeSyncer)
                    });
                    return [4 /*yield*/, run(container.resolve('typeSyncer'))];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    C.error(err_1);
                    process.exitCode = 1;
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.startCli = startCli;
/**
 * Actual CLI runner. Uses the `syncer` instance to sync.
 * @param syncer
 */
function run(syncer) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, args, flags, _b, filePath, ignore, splat, result, syncedFilesOutput, totals;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = C.parseArguments(process.argv.slice(2)), args = _a.args, flags = _a.flags;
                    _b = args[0], filePath = _b === void 0 ? 'package.json' : _b;
                    if (flags.help) {
                        printHelp();
                        return [2 /*return*/];
                    }
                    ignore = {};
                    if (typeof flags.ignoredeps === 'string') {
                        splat = flags.ignoredeps.split(',');
                        ignore.deps = splat.includes('deps');
                        ignore.dev = splat.includes('dev');
                        ignore.optional = splat.includes('optional');
                        ignore.peer = splat.includes('peer');
                    }
                    C.log(chalk_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["TypeSync v{white ", "}"], ["TypeSync v{white ", "}"])), require('../package.json').version));
                    if (flags.dry) {
                        C.log('—— DRY RUN — will not modify file ——');
                    }
                    return [4 /*yield*/, C.spinWhile("Syncing type definitions in " + chalk_1.default.cyan(filePath) + "...", function () { return syncer.sync(filePath, { dry: !!flags.dry, ignore: ignore }); })];
                case 1:
                    result = _c.sent();
                    syncedFilesOutput = result.syncedFiles
                        .map(renderSyncedFile)
                        .join('\n\n');
                    totals = result.syncedFiles
                        .map(function (f) { return ({
                        newTypings: f.newTypings.length,
                        removedTypings: f.removedTypings.length
                    }); })
                        .reduce(function (accum, next) { return ({
                        newTypings: accum.newTypings + next.newTypings,
                        removedTypings: accum.removedTypings + next.removedTypings
                    }); }, { newTypings: 0, removedTypings: 0 });
                    C.success(totals.newTypings === 0
                        ? "No new typings added, looks like you're all synced up!" + (totals.removedTypings > 0
                            ? chalk_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject([" {gray.italic Also removed ", " unused typings, no big deal.}"], [" {gray.italic Also removed ", " unused typings, no big deal.}"])), totals.removedTypings.toString()) : '')
                        : chalk_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["", " new typings added", ".\n\n", "\n\n\u2728  Go ahead and run {green npm install} or {green yarn} to install the packages that were added."], ["", " new typings added",
                            ".\\n\\n", "\\n\\n\u2728  Go ahead and run {green npm install} or {green yarn} to install the packages that were added."])), totals.newTypings.toString(), totals.removedTypings > 0
                            ? chalk_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject([" {italic (", " unused removed)}"], [" {italic (", " unused removed)}"])), totals.removedTypings.toString()) : '', syncedFilesOutput));
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * Renders a type definition.
 * @param typeDef
 * @param isLast
 */
function renderTypeDef(typeDef, isLast) {
    var treeNode = isLast ? '└─' : '├─';
    return chalk_1.default(templateObject_9 || (templateObject_9 = __makeTemplateObject(["", " ", " {gray @types/}", ""], ["", " ",
        " {gray @types/}",
        ""])), treeNode, typeDef.action === 'add' ? chalk_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["{green.bold +}"], ["{green.bold +}"]))) : chalk_1.default(templateObject_6 || (templateObject_6 = __makeTemplateObject(["{red.bold -}"], ["{red.bold -}"]))), typeDef.action === 'add'
        ? chalk_1.default(templateObject_7 || (templateObject_7 = __makeTemplateObject(["{bold.blue ", "}"], ["{bold.blue ", "}"])), typeDef.typingsName) : chalk_1.default(templateObject_8 || (templateObject_8 = __makeTemplateObject(["{bold.yellow ", "} {gray.italic (unused)}"], ["{bold.yellow ", "} {gray.italic (unused)}"])), typeDef.typingsName));
}
/**
 * Renders a synced file.
 *
 * @param file
 */
function renderSyncedFile(file) {
    var badge = file.newTypings.length === 0 && file.removedTypings.length === 0
        ? chalk_1.default(templateObject_10 || (templateObject_10 = __makeTemplateObject(["{blue.bold (no new typings added)}"], ["{blue.bold (no new typings added)}"]))) : chalk_1.default(templateObject_11 || (templateObject_11 = __makeTemplateObject(["{green.bold (", " new typings added, ", " unused typings removed)}"], ["{green.bold (", " new typings added, ", " unused typings removed)}"])), file.newTypings.length.toString(), file.removedTypings.length.toString());
    var dirName = path.basename(path.dirname(path.resolve(file.filePath)));
    var title = chalk_1.default(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\uD83D\uDCE6 ", " {gray.italic \u2014 ", "} ", ""], ["\uD83D\uDCE6 ", " {gray.italic \u2014 ",
        "} ", ""])), file.package.name || dirName, file.filePath, badge);
    var nl = '\n';
    var combined = file.newTypings.map(function (t) { return (__assign({}, t, { action: 'add' })); }).concat(file.removedTypings.map(function (t) { return (__assign({}, t, { action: 'remove' })); }));
    var rendered = title +
        nl +
        combined
            .map(function (t) { return renderTypeDef(t, combined[combined.length - 1] === t); })
            .join(nl);
    return rendered;
}
/**
 * Prints the help text.
 */
function printHelp() {
    console.log(chalk_1.default(templateObject_13 || (templateObject_13 = __makeTemplateObject(["\n{blue.bold typesync} - adds missing TypeScript definitions to package.json\n\nOptions\n  {magenta.bold --dry}                                   dry run, won't save the package.json\n  {magenta.bold --ignoredeps=<deps|dev|peer|optional>}   ignores dependencies in the specified sections (comma separate for multiple). Example: {magenta ignoredeps=dev,peer}\n  {magenta.bold --help}                                  shows this help menu\n  "], ["\n{blue.bold typesync} - adds missing TypeScript definitions to package.json\n\nOptions\n  {magenta.bold --dry}                                   dry run, won't save the package.json\n  {magenta.bold --ignoredeps=<deps|dev|peer|optional>}   ignores dependencies in the specified sections (comma separate for multiple). Example: {magenta ignoredeps=dev,peer}\n  {magenta.bold --help}                                  shows this help menu\n  "]))).trim());
}
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13;
//# sourceMappingURL=cli.js.map