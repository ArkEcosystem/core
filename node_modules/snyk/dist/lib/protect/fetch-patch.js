"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require("fs");
const analytics = require("../analytics");
const debugModule = require("debug");
const request = require("../request");
const debug = debugModule('snyk:fetch-patch');
function getPatchFile(patchUrl, patchFilename) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const response = yield request({ url: patchUrl });
            if (!response ||
                !response.res ||
                !response.body ||
                response.res.statusCode !== 200) {
                throw response;
            }
            fs.writeFileSync(patchFilename, response.body);
            debug(`Fetched patch from ${patchUrl} to ${patchFilename}, patch size ${response.body.length} bytes`);
        }
        catch (error) {
            const errorMessage = `Failed to fetch patch from ${patchUrl} to ${patchFilename}`;
            debug(errorMessage, error);
            analytics.add('patch-fetch-fail', {
                message: (error && error.message) || errorMessage,
                code: error && error.res && error.res.statusCode,
                patchFilename,
                patchUrl,
            });
            throw new Error(errorMessage);
        }
        return patchFilename;
    });
}
module.exports = getPatchFile;
//# sourceMappingURL=fetch-patch.js.map