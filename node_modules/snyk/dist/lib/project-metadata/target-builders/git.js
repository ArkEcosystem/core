"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const GitUrlParse = require("git-url-parse");
const subProcess = require("../../sub-process");
function getInfo(packageInfo) {
    return __awaiter(this, void 0, void 0, function* () {
        let origin;
        if (packageInfo.docker) {
            return null;
        }
        try {
            origin = (yield subProcess.execute('git', [
                'remote',
                'get-url',
                'origin',
            ])).trim();
            if (!origin) {
                return null;
            }
            const parsedOrigin = GitUrlParse(origin);
            const branch = (yield subProcess.execute('git', [
                'rev-parse',
                '--abbrev-ref',
                'HEAD',
            ])).trim();
            return {
                remoteUrl: parsedOrigin.toString('http'),
                branch,
            };
        }
        catch (err) {
            // Swallowing exception since we don't want to break the monitor if there is a problem
            // executing git commands.
            return null;
        }
    });
}
exports.getInfo = getInfo;
//# sourceMappingURL=git.js.map