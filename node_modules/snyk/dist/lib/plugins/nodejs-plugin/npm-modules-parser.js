"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const snyk = require("../../index");
const spinner = require("../../spinner");
const analytics = require("../../analytics");
const fs = require("then-fs");
function parse(root, targetFile, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const nodeModulesPath = path.join(path.dirname(path.resolve(root, targetFile)), 'node_modules');
        const packageManager = options.packageManager || 'npm';
        if (!fs.existsSync(nodeModulesPath)) {
            // throw a custom error
            throw new Error("Missing node_modules folder: we can't test " +
                `without dependencies.\nPlease run '${packageManager} install' first.`);
        }
        analytics.add('local', true);
        analytics.add('generating-node-dependency-tree', {
            lockFile: false,
            targetFile,
        });
        const resolveModuleSpinnerLabel = 'Analyzing npm dependencies for ' +
            path.dirname(path.resolve(root, targetFile));
        try {
            yield spinner(resolveModuleSpinnerLabel);
            if (targetFile.endsWith('yarn.lock')) {
                options.file =
                    options.file && options.file.replace('yarn.lock', 'package.json');
            }
            // package-lock.json falls back to package.json (used in wizard code)
            if (targetFile.endsWith('package-lock.json')) {
                options.file =
                    options.file &&
                        options.file.replace('package-lock.json', 'package.json');
            }
            return snyk.modules(root, Object.assign({}, options, { noFromArrays: true }));
        }
        finally {
            yield spinner.clear(resolveModuleSpinnerLabel)();
        }
    });
}
exports.parse = parse;
//# sourceMappingURL=npm-modules-parser.js.map