"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const modulesParser = require("./npm-modules-parser");
const lockParser = require("./npm-lock-parser");
const missing_targetfile_error_1 = require("../../errors/missing-targetfile-error");
function inspect(root, targetFile, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!targetFile) {
            throw missing_targetfile_error_1.MissingTargetFileError(root);
        }
        const isLockFileBased = targetFile.endsWith('package-lock.json') ||
            targetFile.endsWith('yarn.lock');
        const getLockFileDeps = isLockFileBased && !options.traverseNodeModules;
        const depTree = getLockFileDeps
            ? yield lockParser.parse(root, targetFile, options)
            : yield modulesParser.parse(root, targetFile, options);
        return {
            plugin: {
                name: 'snyk-nodejs-lockfile-parser',
                runtime: process.version,
            },
            scannedProjects: [{ depTree }],
        };
    });
}
exports.inspect = inspect;
//# sourceMappingURL=index.js.map