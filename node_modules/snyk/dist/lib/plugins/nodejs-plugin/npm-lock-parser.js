"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const baseDebug = require("debug");
const debug = baseDebug('snyk');
const path = require("path");
const spinner = require("../../spinner");
const analytics = require("../../analytics");
const fs = require("fs");
const lockFileParser = require("snyk-nodejs-lockfile-parser");
function parse(root, targetFile, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const lockFileFullPath = path.resolve(root, targetFile);
        if (!fs.existsSync(lockFileFullPath)) {
            throw new Error('Lockfile ' + targetFile + ' not found at location: ' + lockFileFullPath);
        }
        const fullPath = path.parse(lockFileFullPath);
        const manifestFileFullPath = path.resolve(fullPath.dir, 'package.json');
        const shrinkwrapFullPath = path.resolve(fullPath.dir, 'npm-shrinkwrap.json');
        if (!fs.existsSync(manifestFileFullPath)) {
            throw new Error(`Could not find package.json at ${manifestFileFullPath} ` +
                `(lockfile found at ${targetFile})`);
        }
        if (fs.existsSync(shrinkwrapFullPath)) {
            throw new Error('`npm-shrinkwrap.json` was found while using lockfile.\n' +
                'Please run your command again without `--file=' +
                targetFile +
                '` flag.');
        }
        const manifestFile = fs.readFileSync(manifestFileFullPath, 'utf-8');
        const lockFile = fs.readFileSync(lockFileFullPath, 'utf-8');
        analytics.add('local', true);
        analytics.add('generating-node-dependency-tree', {
            lockFile: true,
            targetFile,
        });
        const lockFileType = targetFile.endsWith('yarn.lock')
            ? lockFileParser.LockfileType.yarn
            : lockFileParser.LockfileType.npm;
        const resolveModuleSpinnerLabel = `Analyzing npm dependencies for ${lockFileFullPath}`;
        debug(resolveModuleSpinnerLabel);
        try {
            yield spinner(resolveModuleSpinnerLabel);
            const strictOutOfSync = options.strictOutOfSync !== false;
            return lockFileParser.buildDepTree(manifestFile, lockFile, options.dev, lockFileType, strictOutOfSync);
        }
        finally {
            yield spinner.clear(resolveModuleSpinnerLabel);
        }
    });
}
exports.parse = parse;
//# sourceMappingURL=npm-lock-parser.js.map