"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const inspectors_1 = require("./inspectors");
const missing_targetfile_error_1 = require("../../errors/missing-targetfile-error");
const gemfileLockToDependencies = require("./gemfile-lock-to-dependencies");
const _ = require("lodash");
function inspect(root, targetFile) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!targetFile) {
            throw missing_targetfile_error_1.MissingTargetFileError(root);
        }
        const specs = yield gatherSpecs(root, targetFile);
        return {
            plugin: {
                name: 'bundled:rubygems',
                runtime: 'unknown',
            },
            scannedProjects: [
                {
                    depTree: {
                        name: specs.packageName,
                        targetFile: specs.targetFile,
                        dependencies: getDependenciesFromSpecs(specs),
                    },
                },
            ],
        };
    });
}
exports.inspect = inspect;
function getDependenciesFromSpecs(specs) {
    const gemfileLockBase64 = _.get(specs, 'files.gemfileLock.contents');
    const gemspecBase64 = _.get(specs, 'files.gemspec.contents');
    const contents = Buffer.from(gemfileLockBase64 || gemspecBase64, 'base64').toString();
    const dependencies = gemfileLockToDependencies(contents);
    return dependencies;
}
function gatherSpecs(root, targetFile) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const inspector of inspectors_1.inspectors) {
            if (inspector.canHandle(targetFile)) {
                return yield inspector.gatherSpecs(root, targetFile);
            }
        }
        throw new Error(`Could not handle file: ${targetFile}`);
    });
}
//# sourceMappingURL=index.js.map