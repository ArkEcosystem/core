"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const try_get_spec_1 = require("./try-get-spec");
const pattern = /^Gemfile(\.lock)*$/;
function canHandle(file) {
    return !!file && pattern.test(path.basename(file));
}
exports.canHandle = canHandle;
function gatherSpecs(root, target) {
    return __awaiter(this, void 0, void 0, function* () {
        const targetName = path.basename(target);
        const targetDir = path.dirname(target);
        const files = {};
        const gemfileLock = yield try_get_spec_1.tryGetSpec(root, path.join(targetDir, 'Gemfile.lock'));
        if (gemfileLock) {
            files.gemfileLock = gemfileLock;
        }
        else {
            throw new Error("Missing Gemfile.lock file: we can't test " +
                'without dependencies.\nPlease run `bundle install` first.');
        }
        const gemfile = yield try_get_spec_1.tryGetSpec(root, path.join(targetDir, 'Gemfile'));
        if (gemfile) {
            files.gemfile = gemfile;
        }
        return {
            packageName: path.basename(root),
            targetFile: path.join(targetDir, targetName),
            files,
        };
    });
}
exports.gatherSpecs = gatherSpecs;
//# sourceMappingURL=gemfile.js.map