"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require("then-fs");
const path = require("path");
const Debug = require("debug");
const debug = Debug('snyk');
module.exports = function help(item) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!item || item === true || typeof item !== 'string') {
            item = 'usage';
        }
        // cleanse the filename to only contain letters
        // aka: /\W/g but figured this was easier to read
        item = item.replace(/[^a-z-]/gi, '');
        const filename = path.resolve(__dirname, '../../../help', item + '.txt');
        try {
            return yield fs.readFile(filename, 'utf8');
        }
        catch (error) {
            debug(error);
            return `'${item}' help can't be found at location: ${filename}`;
        }
    });
};
//# sourceMappingURL=help.js.map