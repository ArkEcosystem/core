"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("@hapi/joi"));
const dlv_1 = __importDefault(require("dlv"));
const dset_1 = __importDefault(require("dset"));
class Config {
    constructor() {
        this.config = {};
    }
    load(options) {
        this.reset();
        const { value, error } = joi_1.default.validate(options, joi_1.default.object({
            methods: joi_1.default.array()
                .items(joi_1.default.object().keys({
                method: joi_1.default.func().required(),
                name: joi_1.default.string().required(),
                schema: joi_1.default.object(),
            }))
                .required(),
            processor: joi_1.default.object()
                .keys({
                schema: joi_1.default.object().default(joi_1.default.object().keys({
                    id: joi_1.default.alternatives()
                        .try(joi_1.default.number(), joi_1.default.string())
                        .required(),
                    jsonrpc: joi_1.default.string()
                        .allow("2.0")
                        .required(),
                    method: joi_1.default.string().required(),
                    params: joi_1.default.object(),
                })),
                validate: joi_1.default.func().default((data, schema) => joi_1.default.validate(data, schema)),
            })
                .default(),
        }).default());
        if (error) {
            this.error = error;
            return;
        }
        this.config = value;
    }
    reset() {
        this.error = undefined;
        this.config = {};
    }
    get(key, defaultValue) {
        return dlv_1.default(this.config, key, defaultValue);
    }
    set(key, value) {
        dset_1.default(this.config, key, value);
    }
    getError() {
        return this.error;
    }
    hasError() {
        return !!this.error;
    }
}
exports.config = new Config();
//# sourceMappingURL=config.js.map