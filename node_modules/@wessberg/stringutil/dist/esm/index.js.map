{"version":3,"file":"index.js","sources":["../../src/string-util/string-util.ts"],"sourcesContent":["import {ITruncateOptions} from \"./i-truncate-options\";\n\n/**\n * Unquotes the given string - if it is quoted\n * @param {string} str\n * @returns {string}\n */\nexport function unquote (str: string): string {\n\treturn isQuoted(str) ? str.slice(1, str.length - 1) : str;\n}\n\n/**\n * Returns true if the string is in camelCase\n * @param {string} str\n * @returns {boolean}\n */\nexport function isInCamelCase (str: string): boolean {\n\treturn camelCase(str) === str;\n}\n\n/**\n * Returns true if the string is in PascalCase\n * @param {string} str\n * @returns {boolean}\n */\nexport function isInPascalCase (str: string): boolean {\n\treturn pascalCase(str) === str;\n}\n\n/**\n * Returns true if the string is in kebab-case\n * @param {string} str\n * @returns {boolean}\n */\nexport function isInKebabCase (str: string): boolean {\n\treturn kebabCase(str) === str;\n}\n\n/**\n * Returns true if the string is in uppercase\n * @param {string} str\n * @returns {boolean}\n */\nexport function isLowerCase (str: string): boolean {\n\treturn str.toLowerCase() === str;\n}\n\n/**\n * Returns true if the string is in uppercase\n * @param {string} str\n * @returns {boolean}\n */\nexport function isUpperCase (str: string): boolean {\n\treturn str.toUpperCase() === str;\n}\n\n/**\n * Lowercases the first character of the string.\n * @param {string} str\n * @returns {string}\n */\nexport function lowerCaseFirst (str: string): string {\n\tif (str.length < 2) return str.toLowerCase();\n\tconst head = str.slice(0, 1);\n\tconst tail = str.slice(1);\n\treturn `${head.toLowerCase()}${tail}`;\n}\n\n/**\n * Uppercases the first character of the string.\n * @param {string} str\n * @returns {string}\n */\nexport function upperCaseFirst (str: string): string {\n\tif (str.length < 2) return str.toUpperCase();\n\tconst head = str.slice(0, 1);\n\tconst tail = str.slice(1);\n\treturn `${head.toUpperCase()}${tail}`;\n}\n\n/**\n * Returns true if the string is empty (has nothing but whitespace)\n * @param {string} str\n * @returns {boolean}\n */\nexport function isEmpty (str: string): boolean {\n\treturn trim(str).length === 0;\n}\n\n/**\n * Returns true if the given string starts with a quote.\n * @param {string} str\n * @returns {boolean}\n */\nexport function startsWithQuote (str: string): boolean {\n\treturn str.startsWith(`\"`) || str.startsWith(`'`) || str.startsWith(\"`\");\n}\n\n/**\n * Returns true if the given string ends with a quote.\n * @param {string} str\n * @returns {boolean}\n */\nexport function endsWithQuote (str: string): boolean {\n\treturn str.endsWith(`\"`) || str.endsWith(`'`) || str.endsWith(\"`\");\n}\n\n/**\n * Returns true if the given string is quoted.\n * @param {string} str\n * @returns {boolean}\n */\nexport function isQuoted (str: string): boolean {\n\tconst trimmed = removeWhitespace(str, true);\n\treturn startsWithQuote(trimmed) && endsWithQuote(trimmed);\n}\n\n/**\n * Returns all index matches of the provided Regular Expression on the provided string, optionally starting from a specific index.\n * @param {RegExp} regexp\n * @param {string} str\n * @param {number} [from=0]\n * @returns {number[]}\n */\nexport function allIndexesOf (str: string, regexp: RegExp, from: number = 0): number[] {\n\treturn matchAll(str, regexp, from).map(match => match.index);\n}\n\n/**\n * Matches all occurrences of the given RegExp, including capture groups, globally. Supports both global RegExps and non-global RegExps\n * @param {string} str\n * @param {RegExp} regexp\n * @param {number} [from=0]\n * @returns {RegExpExecArray[]}\n */\nexport function matchAll (str: string, regexp: RegExp, from: number = 0): RegExpExecArray[] {\n\tlet flags = regexp.flags;\n\tif (!flags.includes(\"g\")) {\n\t\tflags += \"g\";\n\t}\n\n\t// Normalize the regular expression and make sure it *does* include the Global ('g') flag\n\tconst normalizedRegExp = new RegExp(regexp, flags);\n\n\tconst matches: RegExpExecArray[] = [];\n\n\twhile (true) {\n\t\tconst match = normalizedRegExp.exec(str);\n\t\tif (match == null) break;\n\t\tif (match.index >= from) {\n\t\t\tmatches.push(match);\n\t\t}\n\t}\n\n\treturn matches;\n}\n\n/**\n * Trims all of the provided strings.\n * @param {string[]} strings\n * @returns {string[]}\n */\nexport function trimAll (strings: string[]): string[] {\n\treturn strings.map(str => trim(str));\n}\n\n/**\n * camelCases the given string.\n * @param {string} str\n * @returns {string}\n */\nexport function camelCase (str: string): string {\n\treturn lowerCaseFirst(str\n\t// Replaces any - or _ characters with a space\n\t\t.replace(/[-_+]+/g, \" \").replace(/[ ]{2,}/g, \" \")\n\t\t// Removes any non alphanumeric characters\n\t\t.replace(/[^\\w\\sa-zæøåàáäâëêéèïîíìöòóôüúùû&]/gi, \"\").replace(/[A-Z]{2,}/g, $1 => $1.toLowerCase())\n\t\t// Uppercases the first character in each group immediately following a space\n\t\t// (delimited by spaces)\n\t\t.replace(/ (.)/g, $1 => $1.toUpperCase())\n\t\t// Removes spaces\n\t\t.replace(/ /g, \"\"));\n}\n\n/**\n * PascalCases the given string.\n * @param {string} str\n * @returns {string}\n */\nexport function pascalCase (str: string): string {\n\treturn capitalize(camelCase(str));\n}\n\n/**\n * Capitalizes the given string.\n * @param {string} str\n * @returns {string}\n */\nexport function capitalize (str: string): string {\n\treturn str.slice(0, 1).toUpperCase() + str.slice(1);\n}\n\n/**\n * kebab-cases (dash-cases) the given string.\n * @param {string} str\n * @returns {string}\n */\nexport function kebabCase (str: string): string {\n\t// Lower cases the string\n\tlet _str = str;\n\tif (!/[a-zæøåàáäâëêéèïîíìöòóôüúùû]/.test(_str)) _str = str.toLowerCase();\n\treturn _str.replace(/(?:_)[A-ZÅÀÁÂÄÆËÊÉÈÏÎÍÌÖÔÒÓØÜÛÚÙ]{2,}|[A-Z]{2,}(?=_)/g, $1 => ` ${ $1.toLowerCase() }`).replace(/[-_+]/g, \" \").replace(/[ \\t\\r]*[A-ZÅÀÁÂÄÆËÊÉÈÏÎÍÌÖÔÒÓØÜÛÚÙ]+[ \\t\\r]+/g, $1 => ` ${ $1.toLowerCase() } `).replace(/[A-ZÅÀÁÂÄÆËÊÉÈÏÎÍÌÖÔÒÓØÜÛÚÙ]/g, $1 => ` ${ $1.toLowerCase() }`).replace(/^[ \\t\\r]+/g, \"\").replace(/\\s{2,}/g, \" \").replace(/\\s+/g, \"-\");\n}\n\n/**\n * Removes all whitespace from a string. If the second argument is truthy, it will preserve spaces.\n * @param {string} str\n * @param {boolean} [preserveSpaces=false]\n * @returns {string}\n */\nexport function removeWhitespace (str: string, preserveSpaces: boolean = false): string {\n\n\t// Convert tabs to spaces and remove anything but spaces.\n\tif (preserveSpaces) {\n\t\treturn str\n\t\t\t.replace(/&nbsp;/g, \" \")\n\t\t\t.replace(/[\\t]/g, \" \")\n\t\t\t.replace(/[\\n\\r]/g, \"\")\n\t\t\t.replace(/[ ]{2,}/g, \" \");\n\t}\n\n\t// Remove any kind of whitespace.\n\treturn str\n\t\t.replace(/[ \\n\\t\\r]/g, \"\")\n\t\t.replace(/&nbsp;/, \"\");\n}\n\n/**\n * Returns true if the given string contains whitespace\n * @param {string} str\n * @returns {boolean}\n */\nexport function containsWhitespace (str: string): boolean {\n\treturn str.length !== removeWhitespace(str).length;\n}\n\n/**\n * Returns true if the given string contains nothing but whitespace\n * @param {string} str\n * @returns {boolean}\n */\nexport function containsOnlyWhitespace (str: string): boolean {\n\treturn removeWhitespace(str).length === 0;\n}\n\n/**\n * Trims a string. It works like String.prototype.trim, except it also handles HTML spaces (&nbsp;).\n * @param {string} str\n * @returns {string}\n */\nexport function trim (str: string): string {\n\tlet local = str.trim();\n\twhile (local.startsWith(\"&nbsp;\")) {\n\t\tlocal = local.slice(\"&nbsp;\".length);\n\t\tlocal = local.trim();\n\t}\n\twhile (local.endsWith(\"&nbsp;\")) {\n\t\tlocal = local.slice(0, local.length - \"&nbsp;\".length);\n\t\tlocal = local.trim();\n\t}\n\treturn local;\n}\n\n\n/**\n * Replaces special characters like \"æ\" with \"ae\".\n * @param {string} str\n * @returns {string}\n */\nexport function convertToAscii (str: string): string {\n\treturn str\n\t\t.replace(/ /g, \"-\")\n\t\t.replace(/_/g, \"-\")\n\t\t.replace(/[àáâäãą]/g, \"a\")\n\t\t.replace(/[èéêëę]/g, \"e\")\n\t\t.replace(/[ìíîïı]/g, \"i\")\n\t\t.replace(/[òóôõöőð]/g, \"o\")\n\t\t.replace(/[ùúûüŭů]/g, \"u\")\n\t\t.replace(/[çćčĉ]/g, \"c\")\n\t\t.replace(/[çćčĉ]/g, \"c\")\n\t\t.replace(/[żźž]/g, \"z\")\n\t\t.replace(/[śşšŝ]/g, \"s\")\n\t\t.replace(/[ñń]/g, \"n\")\n\t\t.replace(/[ýÿ]/g, \"y\")\n\t\t.replace(/[ğĝ]/g, \"g\")\n\t\t.replace(/ß/g, \"ss\")\n\t\t.replace(/æ/g, \"ae\")\n\t\t.replace(/ø/g, \"oe\")\n\t\t.replace(/å/g, \"aa\")\n\t\t// Remove all other unicode characters\n\t\t.replace(/[^\\x00-\\x7F]/g, \"\");\n}\n\n/**\n * Truncates the given text by the given max length and with the given omission character(s)\n * @param {string} text\n * @param {ITruncateOptions} [options]\n * @returns {string}\n */\nexport function truncate (text: string, {length = 30, omission = \"...\"}: Partial<ITruncateOptions> = {}): string {\n\tif (text.length <= length) return text;\n\treturn `${text.slice(0, (length -(omission.length)))}${omission}`;\n}"],"names":[],"mappings":"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"}