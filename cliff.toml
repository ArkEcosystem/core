# configuration file for git-cliff (0.1.0)

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespaces from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# allow only conventional commits
# https://www.conventionalcommits.org
conventional_commits = true
# regex for parsing and grouping commits
commit_parsers = [
	# Added
    { message = "^feat*", group = "Added"},
    { message = "^.*: add", group = "Added"},
    { message = "^.*: support", group = "Added"},
    # Changed
	{ message = "^doc*", group = "Changed"},
    { message = "^perf*", group = "Changed"},
    { message = "^refactor*", group = "Changed"},
    { message = "^chore*", group = "Changed"},
	# Deprecated
    { message = "^.*: deprecate", group = "Deprecated"},
	# Removed
    { message = "^.*: remove", group = "Removed"},
    { message = "^.*: delete", group = "Removed"},
	# Fixed
    { message = "^fix*", group = "Fixed"},
    { message = "^test*", group = "Fixed"},
    { message = "^.*: fix", group = "Fixed"},
	# Security
    { body = ".*security", group = "Security"},
	# Skip
    { message = "^chore\\(release\\): prepare for*", skip = true},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
