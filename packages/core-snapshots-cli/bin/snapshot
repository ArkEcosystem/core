#!/usr/bin/env node

const app = require('commander')
const util = require('../lib/utils')

app.version(require('../package.json').version)

const registerCommand = (name, description) => {
  return app
    .command(name)
    .description(description)
    .option('-d, --data <data>', 'data directory', '~/.ark')
    .option('-c, --config <config>', 'network config', '~/.ark/config')
    .option('-t, --token <token>', 'token name', 'ark')
    .option('-n, --network <network>', 'token network')
}

registerCommand('create', 'create a full snapshot of the database')
  .option('-f, --filename <filename>', 'block snapshot filename')
  .option('-s, --start <number>', 'start network height to export', -1)
  .option('-e, --end <number>', 'end network height to export', -1)
  .option('--codec <string>', 'codec name, default is msg-lite binary')
  .action(async (options) => {
    await util.setUpLite(options)
    await require('../lib/commands/create')(options)
  })

registerCommand('import', 'import data from specified snapshot')
  .option('-f, --filename <filename>', 'gziped snapshot filename with height')
  .option('--truncate', 'skip transaction validations', false)
  .option('--skip-restart-round', 'skip revert to current round', false)
  .option('--signature-verify', 'signature verification', false)
  .option('--codec <string>', 'codec name, use none for default')
  .action(async (options) => {
    await util.setUpLite(options)
    await require('../lib/commands/import')(options)
  })

registerCommand('verify', 'check validity of specified snapshot')
  .option('-f, --filename <filename>', 'gziped snapshot filename with height')
  .option('-c, --codec <string>', 'codec name, default is msg-lite binary')
  .option('--signature-verify', 'signature verification', false)
  .action(async (options) => {
    await util.setUpLite(options)
    await require('../lib/commands/verify')(options)
  })

registerCommand('rollback', 'rollback chain to specified height')
  .option('-b, --block-height <number>', 'block network height number to rollback', -1)
  .action(async (options) => {
    await util.setUpLite(options)
    require('../lib/commands/rollback')(options)
  })

app
  .command('*')
  .action(env => {
    app.help()
    process.exit(0)
  })

app.parse(process.argv)
