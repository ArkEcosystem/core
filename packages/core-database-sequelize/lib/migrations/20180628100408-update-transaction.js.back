'use strict'
const { Block, Transaction } = require('@arkecosystem/crypto').models
const logger = require('@arkecosystem/core-container').resolvePlugin('logger')

/**
 * The transactions migration.
 * @type {Object}
 */
module.exports = {
  /**
   * Run the migrations.
   * @param  {Sequelize.QueryInterface} queryInterface
   * @param  {Sequelize} Sequelize
   * @return {void}
   */
  async up (queryInterface, Sequelize, manager) {
    // await queryInterface.addColumn('transactions', 'sequence', {
    //     allowNull: false,
    //     defaultValue: 0,
    //     type: Sequelize.SMALLINT
    //   })
    const blocks = await manager.query
      .select('*')
      .from('blocks')
      .where('numberOfTransactions', '>', 1)
      .all()

    let index = 0
    const max = blocks.length
    const wrongBlocks = []
    await Promise.all(blocks.map(async block => {
      const transactions = await manager.query
        .select('serialized')
        .from('transactions')
        .where('blockId', block.id)
        .all()

      block.transactions = transactions.map(transaction => Transaction.deserialize(transaction.serialized.toString('hex')))
      const test = new Block(block)
      let message = 'Checking transaction orders'
      if (wrongBlocks.length > 0) message = `Found ${wrongBlocks.length} errorneous blocks`
      logger.printTracker('Database Migration', index++, max, message)
      if (!test.verification.verified) {
        wrongBlocks.push(test)
      }
      return test
    }))

    await Promise.all(wrongBlocks.map(async block => {
      
    }))

    // throw new Error('dummy')
  },
  /**
   * Reverse the migrations.
   * @param  {Sequelize.QueryInterface} queryInterface
   * @param  {Sequelize} Sequelize
   * @return {void}
   */
  async down (queryInterface, Sequelize) {
    return queryInterface.removeColumn('transactions', 'sequence')
  }
}
