#!/usr/bin/env node

const app = require('commander')

app.version(require('../package.json').version)

app
  .command('start')
  .description('start a relay node and the forger')
  .option('-d, --data <data>', 'data directory', '~/.ark')
  .option('-c, --config <config>', 'core config', '~/.ark/config')
  .option('-t, --token <token>', 'token name', 'ark')
  .option('-n, --network <network>', 'token network')
  .option('-b, --bip38 <bip38>', 'forger bip38')
  .option('-a, --address <address>', 'forger address')
  .option('-p, --password <password>', 'forger password')
  .option('--network-start', 'force genesis network start', false)
  .action(async (options) => require('../lib/start-relay-and-forger')(options))

app
  .command('relay')
  .description('start a relay node')
  .option('-d, --data <data>', 'data directory', '~/.ark')
  .option('-c, --config <config>', 'network config', '~/.ark/config')
  .option('-t, --token <token>', 'token name', 'ark')
  .option('-n, --network <network>', 'token network')
  .action(async (options) => require('../lib/start-relay')(options))

app
  .command('forger')
  .description('start the forger')
  .option('-d, --data <data>', 'data directory', '~/.ark')
  .option('-c, --config <config>', 'network config', '~/.ark/config')
  .option('-t, --token <token>', 'token name', 'ark')
  .option('-n, --network <network>', 'token network')
  .option('-b, --bip38 <bip38>', 'forger bip38')
  .option('-a, --address <address>', 'forger address')
  .option('-p, --password <password>', 'forger password')
  .option('--network-start', 'force genesis network start', false)
  .action(async (options) => require('../lib/start-forger')(options))

app
  .command('snapshot')
  .description('take a snapshot of the database')
  .option('-d, --data <data>', 'data directory', '~/.ark')
  .option('-c, --config <config>', 'network config', '~/.ark/config')
  .option('-t, --token <token>', 'token name', 'ark')
  .option('-n, --network <network>', 'token network')
  .action(async (options) => require('../lib/snapshot')(options))

app
  .command('*')
  .action(env => {
    app.help()
    process.exit(0)
  })

app.parse(process.argv)
