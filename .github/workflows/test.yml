name: Test

on:
    push:
        branches:
            - "master"
            - "develop"
    pull_request:
        types: [ready_for_review, synchronize, opened]

jobs:
    unit:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [12.x]

        steps:
            - uses: actions/checkout@v1
            - name: Cache node modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-node-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Install & Build
              run: yarn setup
            - name: Test
              run: yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2
            - name: Codecov
              run: ./node_modules/.bin/codecov --token=${{ secrets.CODECOV_TOKEN }}

    integration:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:10.8
                env:
                    POSTGRES_USER: ark
                    POSTGRES_PASSWORD: password
                    POSTGRES_DB: ark_unitnet
                ports:
                    - 5432:5432
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        strategy:
            matrix:
                node-version: [12.x]

        steps:
            - uses: actions/checkout@v1
            - name: Cache node modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-node-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Update system
              run: sudo apt-get update -y
            - name: Install xsel & postgresql-client
              run: sudo apt-get install -q xsel postgresql-client
            - name: Install and build packages
              run: yarn setup
            - name: Create .core/database directory
              run: mkdir -p $HOME/.core/database
            - name: Integration tests
              run: yarn test:integration:coverage --coverageDirectory .coverage/integration/
            - name: Codecov
              run: ./node_modules/.bin/codecov --token=${{ secrets.CODECOV_TOKEN }}

              env:
                  CORE_DB_DATABASE: ark_unitnet
                  CORE_DB_USERNAME: ark
                  POSTGRES_USER: ark
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: ark_unitnet

    e2e:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [12.x]

        steps:
            - uses: actions/checkout@v1
            - name: Cache node modules
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.os }}-e2e-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: ${{ runner.os }}-e2e-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Install and build packages
              run: yarn setup && cd __tests__/e2e  && yarn cache clean && yarn install --frozen-lockfile
            - name: Build test helpers
              run: cd __tests__/helpers && echo "{}" > tsconfig.json && ../../node_modules/.bin/tsc || true
            - name: Build test utils
              run: cd __tests__/utils && echo "{}" > tsconfig.json && ../../node_modules/.bin/tsc || true
            - name: Docker compose up
              run: cd __tests__/e2e/lib/config && docker-compose up -d
            - name: Wait 20 sec for docker containers to be up and nodes be running
              run: sleep 20
            - name: Run tests
              run: cd __tests__/e2e && yarn run-tests -s scenario1
            - name: Output results - node0
              if: always()
              run: docker logs config_core0_1
            - name: Output results - node1
              if: always()
              run: docker logs config_core1_1
            - name: Output results - node2
              if: always()
              run: docker logs config_core2_1
