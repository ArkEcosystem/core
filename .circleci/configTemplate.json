{
    "version": 2,
    "jobs": {
        "test-node10-unit": {
            "working_directory": "~/core",
            "docker": [
                {
                    "image": "circleci/node:10-browsers"
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel",
                        "command": "sudo apt-get install -q xsel"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-unit"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-unit",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Unit tests",
                        "command": "cd ~/core && yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node11-unit": {
            "working_directory": "~/core",
            "docker": [
                {
                    "image": "circleci/node:11-browsers"
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel",
                        "command": "sudo apt-get install -q xsel"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-unit"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-unit",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Unit tests",
                        "command": "cd ~/core && yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node10-functional": {
            "working_directory": "~/core",
            "environment": {
                "CORE_DB_DATABASE": "ark_unitnet",
                "CORE_DB_USERNAME": "ark"
            },
            "docker": [
                {
                    "image": "circleci/node:10-browsers"
                },
                {
                    "image": "postgres:alpine",
                    "environment": {
                        "POSTGRES_PASSWORD": "password",
                        "POSTGRES_DB": "ark_unitnet",
                        "POSTGRES_USER": "ark"
                    }
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel & postgresql-client",
                        "command": "sudo apt-get install -q xsel postgresql-client"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-functional"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-functional",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Functional tests",
                        "command": "cd ~/core && yarn test:functional:coverage --coverageDirectory .coverage/functional/"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node11-functional": {
            "working_directory": "~/core",
            "environment": {
                "CORE_DB_DATABASE": "ark_unitnet",
                "CORE_DB_USERNAME": "ark"
            },
            "docker": [
                {
                    "image": "circleci/node:11-browsers"
                },
                {
                    "image": "postgres:alpine",
                    "environment": {
                        "POSTGRES_PASSWORD": "password",
                        "POSTGRES_DB": "ark_unitnet",
                        "POSTGRES_USER": "ark"
                    }
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel & postgresql-client",
                        "command": "sudo apt-get install -q xsel postgresql-client"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-functional"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-functional",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Functional tests",
                        "command": "cd ~/core && yarn test:functional:coverage --coverageDirectory .coverage/functional/"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node10-integration-0": {
            "working_directory": "~/core",
            "environment": {
                "CORE_DB_DATABASE": "ark_unitnet",
                "CORE_DB_USERNAME": "ark"
            },
            "docker": [
                {
                    "image": "circleci/node:10-browsers"
                },
                {
                    "image": "postgres:alpine",
                    "environment": {
                        "POSTGRES_PASSWORD": "password",
                        "POSTGRES_DB": "ark_unitnet",
                        "POSTGRES_USER": "ark"
                    }
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel & postgresql-client",
                        "command": "sudo apt-get install -q xsel postgresql-client"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-1"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-1",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Unit tests",
                        "command": "cd ~/core && yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node11-integration-0": {
            "working_directory": "~/core",
            "environment": {
                "CORE_DB_DATABASE": "ark_unitnet",
                "CORE_DB_USERNAME": "ark"
            },
            "docker": [
                {
                    "image": "circleci/node:11-browsers"
                },
                {
                    "image": "postgres:alpine",
                    "environment": {
                        "POSTGRES_PASSWORD": "password",
                        "POSTGRES_DB": "ark_unitnet",
                        "POSTGRES_USER": "ark"
                    }
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Install xsel & postgresql-client",
                        "command": "sudo apt-get install -q xsel postgresql-client"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-1"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-1",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Create .core/database directory",
                        "command": "mkdir -p $HOME/.core/database"
                    }
                },
                {
                    "run": {
                        "name": "Unit tests",
                        "command": "cd ~/core && yarn test:unit:coverage --coverageDirectory .coverage/unit/ --maxWorkers=2"
                    }
                },
                {
                    "run": {
                        "name": "Last 1000 lines of test output",
                        "when": "on_fail",
                        "command": "tail -n 1000 test_output.txt"
                    }
                },
                {
                    "run": {
                        "name": "Lint",
                        "command": "yarn lint"
                    }
                },
                {
                    "run": {
                        "name": "Codecov",
                        "command": "./node_modules/.bin/codecov"
                    }
                }
            ]
        },
        "test-node10-benchmark": {
            "working_directory": "~/core",
            "docker": [
                {
                    "image": "circleci/node:10-browsers"
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-benchmark"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node10-{{ checksum \"checksum.txt\" }}-benchmark",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Benchmark",
                        "command": "cd ~/core && yarn bench"
                    }
                }
            ]
        },
        "test-node11-benchmark": {
            "working_directory": "~/core",
            "docker": [
                {
                    "image": "circleci/node:11-browsers"
                }
            ],
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Apt update",
                        "command": "sudo sh -c 'echo \"deb http://ftp.debian.org/debian stable main contrib non-free\" >> /etc/apt/sources.list' && sudo apt-get update"
                    }
                },
                {
                    "run": {
                        "name": "Generate cache key",
                        "command": "find ./packages/ -name package.json -print0 | sort -z | xargs -r0 echo ./package.json | xargs md5sum | md5sum - > checksum.txt"
                    }
                },
                {
                    "restore_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-benchmark"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "yarn setup"
                    }
                },
                {
                    "save_cache": {
                        "key": "core-node11-{{ checksum \"checksum.txt\" }}-benchmark",
                        "paths": []
                    }
                },
                {
                    "run": {
                        "name": "Benchmark",
                        "command": "cd ~/core && yarn bench"
                    }
                }
            ]
        },
        "test-node10-e2e": {
            "machine": true,
            "steps": [
                "checkout",
                {
                    "run": {
                        "name": "Adjustments for sudo env variables",
                        "command": "n=$(which node) && n=${n%/bin/node} && chmod -R 755 $n/bin/* && sudo cp -r $n/{bin,lib,share} /usr/local && n=$(which npm) && n=${n%/bin/npm} && chmod -R 755 $n/bin/* && sudo cp -r $n/{bin,lib,share} /usr/local"
                    }
                },
                {
                    "run": {
                        "name": "Install n and update node version",
                        "command": "sudo npm install -g n && sudo n 10 && source ~/.bashrc && nvm install 10 && nvm use 10"
                    }
                },
                {
                    "run": {
                        "name": "Install yarn",
                        "command": "curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && echo \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list && sudo apt-get update && sudo apt-get install yarn"
                    }
                },
                {
                    "run": {
                        "name": "Install lerna",
                        "command": "source ~/.bashrc && nvm use 10 && yarn add lerna -W"
                    }
                },
                {
                    "run": {
                        "name": "Docker swarm init",
                        "command": "docker swarm init"
                    }
                },
                {
                    "restore_cache": {
                        "key": "ark-e2e-{{ checksum \"__tests__/e2e/package.json\" }}-1"
                    }
                },
                {
                    "run": {
                        "name": "Install and build packages",
                        "command": "source ~/.bashrc && nvm use 10 && yarn bootstrap && yarn build && cd __tests__/e2e && yarn install"
                    }
                },
                {
                    "save_cache": {
                        "key": "ark-e2e-{{ checksum \"__tests__/e2e/package.json\" }}-1",
                        "paths": ["__tests__/e2e/node_modules"]
                    }
                },
                {
                    "run": {
                        "name": "Generate files",
                        "command": "source ~/.bashrc && nvm use 10 && node --version && cd __tests__/e2e && bin/e2e generate -c 3"
                    }
                },
                {
                    "run": {
                        "name": "Make scripts executable",
                        "command": "sudo chmod +x __tests__/e2e/dist/docker* && sudo chmod +x __tests__/e2e/dist/node0/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node1/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node2/docker/testnet-e2e/entrypoint.sh && sudo chmod +x __tests__/e2e/dist/node0/ark.sh && sudo chmod +x __tests__/e2e/dist/node1/ark.sh && sudo chmod +x __tests__/e2e/dist/node2/ark.sh"
                    }
                },
                {
                    "run": {
                        "name": "Docker init and start",
                        "command": "cd __tests__/e2e/dist && ./docker-init.sh && ./docker-start.sh"
                    }
                },
                {
                    "run": {
                        "name": "Run tests",
                        "command": "source ~/.bashrc && nvm use 10 && cd __tests__/e2e && sudo bin/e2e run-tests -s scenario1"
                    }
                },
                {
                    "run": {
                        "name": "Output results - node0",
                        "when": "always",
                        "command": "cat __tests__/e2e/dist/node0/output.log && cat __tests__/e2e/dist/node0/errors.log"
                    }
                },
                {
                    "run": {
                        "name": "Output results - node1",
                        "when": "always",
                        "command": "cat __tests__/e2e/dist/node1/output.log && cat __tests__/e2e/dist/node1/errors.log"
                    }
                },
                {
                    "run": {
                        "name": "Output results - node2",
                        "when": "always",
                        "command": "cat __tests__/e2e/dist/node2/output.log && cat __tests__/e2e/dist/node2/errors.log"
                    }
                }
            ]
        }
    },
    "workflows": {
        "version": 2,
        "build_and_test": {
            "jobs": []
        }
    }
}
