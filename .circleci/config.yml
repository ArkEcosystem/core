version: 2
jobs:
    node11-unit:
        working_directory: ~/core
        docker:
            - image: "circleci/node:11"
        steps: &stepsUnit
            - checkout
            - run:
                  name: Apt update
                  command: >-
                      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
                      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update
            - run:
                  name: Install xsel
                  command: sudo apt-get install -q xsel
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "yarn.lock" }}
                      - v1-dependencies-
            - run:
                  name: Install and build packages
                  command: yarn setup
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "yarn.lock" }}
            - run:
                  name: Create .core/database directory
                  command: mkdir -p $HOME/.core/database
            - run:
                  name: Unit tests
                  command: >-
                      cd ~/core && yarn test:unit:coverage --coverageDirectory
                      .coverage/unit/ --maxWorkers=2
            - run:
                  name: Last 1000 lines of test output
                  when: on_fail
                  command: tail -n 1000 test_output.txt
            - run:
                  name: Lint
                  command: yarn lint
            - run:
                  name: Codecov
                  command: ./node_modules/.bin/codecov
    node12-unit:
        working_directory: ~/core
        docker:
            - image: "circleci/node:12"
        steps: *stepsUnit
    node11-functional:
        working_directory: ~/core
        environment:
            CORE_DB_DATABASE: ark_unitnet
            CORE_DB_USERNAME: ark
        docker:
            - image: "circleci/node:11"
            - image: "postgres:alpine"
              environment:
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: ark_unitnet
                  POSTGRES_USER: ark
        steps: &stepsFunctional
            - checkout
            - run:
                  name: Apt update
                  command: >-
                      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
                      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update
            - run:
                  name: Install xsel & postgresql-client
                  command: sudo apt-get install -q xsel postgresql-client
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "yarn.lock" }}
                      - v1-dependencies-
            - run:
                  name: Install and build packages
                  command: yarn setup
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "yarn.lock" }}
            - run:
                  name: Create .core/database directory
                  command: mkdir -p $HOME/.core/database
            - run:
                  name: Functional tests
                  command: >-
                      cd ~/core && yarn test:functional:coverage --coverageDirectory
                      .coverage/functional/
            - run:
                  name: Last 1000 lines of test output
                  when: on_fail
                  command: tail -n 1000 test_output.txt
            - run:
                  name: Lint
                  command: yarn lint
            - run:
                  name: Codecov
                  command: ./node_modules/.bin/codecov
    node12-functional:
        working_directory: ~/core
        environment:
            CORE_DB_DATABASE: ark_unitnet
            CORE_DB_USERNAME: ark
        docker:
            - image: "circleci/node:12"
            - image: "postgres:alpine"
              environment:
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: ark_unitnet
                  POSTGRES_USER: ark
        steps: *stepsFunctional
    node11-integration:
        working_directory: ~/core
        environment:
            CORE_DB_DATABASE: ark_unitnet
            CORE_DB_USERNAME: ark
        docker:
            - image: "circleci/node:11"
            - image: "postgres:alpine"
              environment:
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: ark_unitnet
                  POSTGRES_USER: ark
        steps: &stepsIntegration
            - checkout
            - run:
                  name: Apt update
                  command: >-
                      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
                      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update
            - run:
                  name: Install xsel & postgresql-client
                  command: sudo apt-get install -q xsel postgresql-client
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "yarn.lock" }}
                      - v1-dependencies-
            - run:
                  name: Install and build packages
                  command: yarn setup
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "yarn.lock" }}
            - run:
                  name: Create .core/database directory
                  command: mkdir -p $HOME/.core/database
            - run:
                  name: Integration tests
                  command: cd ~/core/.circleci && yarn test:integration:coverage --coverageDirectory .coverage/integration/
            - run:
                  name: Last 1000 lines of test output
                  when: on_fail
                  command: tail -n 1000 test_output.txt
            - run:
                  name: Lint
                  command: yarn lint
            - run:
                  name: Codecov
                  command: ./node_modules/.bin/codecov
    node12-integration:
        working_directory: ~/core
        environment:
            CORE_DB_DATABASE: ark_unitnet
            CORE_DB_USERNAME: ark
        docker:
            - image: "circleci/node:12"
            - image: "postgres:alpine"
              environment:
                  POSTGRES_PASSWORD: password
                  POSTGRES_DB: ark_unitnet
                  POSTGRES_USER: ark
        steps: *stepsIntegration
    node11-benchmark:
        working_directory: ~/core
        docker:
            - image: "circleci/node:11"
        steps: &stepsBenchmark
            - checkout
            - run:
                  name: Apt update
                  command: >-
                      sudo sh -c 'echo "deb http://ftp.debian.org/debian stable main
                      contrib non-free" >> /etc/apt/sources.list' && sudo apt-get update
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "yarn.lock" }}
                      - v1-dependencies-
            - run:
                  name: Install and build packages
                  command: yarn setup
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "yarn.lock" }}
            - run:
                  name: Benchmark
                  command: cd ~/core && yarn bench
    node12-benchmark:
        working_directory: ~/core
        docker:
            - image: "circleci/node:12"
        steps: *stepsBenchmark
    node11-e2e:
        machine: true
        environment:
            USE_NVM_VERSION: "11"
        steps: &stepsE2E
            - checkout
            - run:
                  name: Install nvm $USE_NVM_VERSION
                  command: source ~/.bashrc && nvm install $USE_NVM_VERSION && nvm use $USE_NVM_VERSION
            - restore_cache:
                  keys:
                      - v1-dependencies-{{ checksum "yarn.lock" }}
                      - v1-dependencies-
            - run:
                  name: Install yarn
                  command: >-
                      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add
                      - && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo
                      tee /etc/apt/sources.list.d/yarn.list && sudo apt-get update && sudo
                      apt-get install yarn
            - run:
                  name: Docker swarm init
                  command: docker swarm init
            - run:
                  name: Install and build packages
                  command: >-
                      source ~/.bashrc && nvm use $USE_NVM_VERSION && yarn && yarn bootstrap && yarn
                      build && cd __tests__/e2e && ../../node_modules/.bin/tsc && yarn install
            - save_cache:
                  paths:
                      - node_modules
                  key: v1-dependencies-{{ checksum "yarn.lock" }}
            - run:
                  name: Generate files
                  command: >-
                      source ~/.bashrc && nvm use $USE_NVM_VERSION && node --version && cd __tests__/e2e
                      && yarn generate -c 3 -v $USE_NVM_VERSION
            - run:
                  name: Make scripts executable
                  command: >-
                      sudo chmod +x __tests__/e2e/dist/docker* && sudo chmod +x
                      __tests__/e2e/dist/node0/docker/testnet-e2e/entrypoint.sh && sudo
                      chmod +x __tests__/e2e/dist/node1/docker/testnet-e2e/entrypoint.sh
                      && sudo chmod +x
                      __tests__/e2e/dist/node2/docker/testnet-e2e/entrypoint.sh && sudo
                      chmod +x __tests__/e2e/dist/node0/ark.sh && sudo chmod +x
                      __tests__/e2e/dist/node1/ark.sh && sudo chmod +x
                      __tests__/e2e/dist/node2/ark.sh
            - run:
                  name: Docker init and start
                  command: cd __tests__/e2e/dist && ./docker-init.sh && ./docker-start.sh
            - run:
                  name: Wait 10 sec for docker containers to be up
                  command: sleep 10
            - run:
                  name: Run tests
                  command: >-
                      cd __tests__/e2e && sudo chown -R $USER:$USER ./dist/ && source
                      ~/.bashrc && nvm use $USE_NVM_VERSION && yarn run-tests -s scenario1
            - run:
                  name: Output results - node0
                  when: always
                  command: >-
                      cat __tests__/e2e/dist/node0/output.log && cat
                      __tests__/e2e/dist/node0/errors.log
            - run:
                  name: Output results - node1
                  when: always
                  command: >-
                      cat __tests__/e2e/dist/node1/output.log && cat
                      __tests__/e2e/dist/node1/errors.log
            - run:
                  name: Output results - node2
                  when: always
                  command: >-
                      cat __tests__/e2e/dist/node2/output.log && cat
                      __tests__/e2e/dist/node2/errors.log
    node12-e2e:
        machine: true
        environment:
            USE_NVM_VERSION: "12"
        steps: *stepsE2E
workflows:
    version: 2
    test:
        jobs:
            - node11-unit
            - node12-unit
            - node11-functional
            - node12-functional
            - node11-benchmark
            - node12-benchmark
            - node11-e2e
            - node12-e2e
            - node11-integration
            - node12-integration
